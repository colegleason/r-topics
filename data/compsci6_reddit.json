{"300": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 6, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m very interested in participating in one next summer.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm very interested in participating in one next summer.", "saved": false, "id": "1293c0", "clicked": false, "title": "How selective are Comp Sci REUs in general?", "num_comments": 10, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_1293c0", "children": [], "author": "coforce", "id": "c6uh427", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 4, "body": "Selective. Want to know an easier route that yields the same result? Go up to a professor and tell them you are interested in doing research with them. I did and it led to recommendation letters, a publication + research grants.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Selective. Want to know an easier route that yields the same result? Go up to a professor and tell them you are interested in doing research with them. I did and it led to recommendation letters, a publication + research grants.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6uh427", "flair_text": null, "created": 1351713640.0, "created_utc": 1351710040.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_1293c0", "children": [], "author": "feartrich", "id": "c6t6uo1", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 2, "body": "I've found these stats:\nhttp://www.scec.org/education/college/internships/nowwhat.html\n\nfor USC programs, it's about a 15%-43% acceptance rate...", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve found these stats:\n&lt;a href=\"http://www.scec.org/education/college/internships/nowwhat.html\"&gt;http://www.scec.org/education/college/internships/nowwhat.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;for USC programs, it&amp;#39;s about a 15%-43% acceptance rate...&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6t6uo1", "flair_text": null, "created": 1351483917.0, "created_utc": 1351480317.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_1293c0", "children": [], "author": "jzukoff", "id": "c6t8bx9", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 2, "body": "For those who don't know, and REU is a research experience for undergrads. They are hosted at larger research universities and give undergrads the ability to do comp sci research alongside their peers under the guidance of a more experienced mentor.\n\nI participated in an REU two summers ago, between my sophomore and junior year of undergrad and it was definitely a great experience. As far as how competitive it is, its really hard to say what they are looking for. I come from a top tier liberal arts college but we are by no means known for our computer science program. I'd say that based on my experience, the students tended to be from a wide variety of backgrounds. Additionally, I believe that you apply to specific projects so if something in your background would give you an advantage for a particular area of research, that'd give you a better chance than someone else who may have a stronger overall academic record but is lacking that background. Regardless, definitely give it a shot if you're even considering going into academia after undergrad, just don't expect to get \"real world\" corporate experience like an internship would give you.\n\nHere's a list of REUs for computer science\nhttp://www.nsf.gov/crssprgm/reu/list_result.cfm?unitid=5049", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For those who don&amp;#39;t know, and REU is a research experience for undergrads. They are hosted at larger research universities and give undergrads the ability to do comp sci research alongside their peers under the guidance of a more experienced mentor.&lt;/p&gt;\n\n&lt;p&gt;I participated in an REU two summers ago, between my sophomore and junior year of undergrad and it was definitely a great experience. As far as how competitive it is, its really hard to say what they are looking for. I come from a top tier liberal arts college but we are by no means known for our computer science program. I&amp;#39;d say that based on my experience, the students tended to be from a wide variety of backgrounds. Additionally, I believe that you apply to specific projects so if something in your background would give you an advantage for a particular area of research, that&amp;#39;d give you a better chance than someone else who may have a stronger overall academic record but is lacking that background. Regardless, definitely give it a shot if you&amp;#39;re even considering going into academia after undergrad, just don&amp;#39;t expect to get &amp;quot;real world&amp;quot; corporate experience like an internship would give you.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a list of REUs for computer science\n&lt;a href=\"http://www.nsf.gov/crssprgm/reu/list_result.cfm?unitid=5049\"&gt;http://www.nsf.gov/crssprgm/reu/list_result.cfm?unitid=5049&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6t8bx9", "flair_text": null, "created": 1351490324.0, "created_utc": 1351486724.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_1293c0", "children": [], "author": "compscimagine", "id": "c6t918c", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 2, "body": "I did the Computer Vision one at UCF.  From my experience, not that selective.  Some of my friends applied and most got in.  We're all from MIT.\n\nThat said, it was pretty fun and definitely makes you a better researcher.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I did the Computer Vision one at UCF.  From my experience, not that selective.  Some of my friends applied and most got in.  We&amp;#39;re all from MIT.&lt;/p&gt;\n\n&lt;p&gt;That said, it was pretty fun and definitely makes you a better researcher.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6t918c", "flair_text": null, "created": 1351494251.0, "created_utc": 1351490651.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_1293c0", "children": [], "author": "zackcantwait", "id": "c6ui92t", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 1, "body": "My advice would be to apply to a lot of different programs in several different domains. In my experience REUs were very competitive.\n\nI participated in an REU in undergrad that was largely different from any of the research I had done since then and from what I am now doing in graduate school. However, an REU is about being able to immerse yourself in a topic, full-time for ten weeks and contribute new knowledge to the field.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My advice would be to apply to a lot of different programs in several different domains. In my experience REUs were very competitive.&lt;/p&gt;\n\n&lt;p&gt;I participated in an REU in undergrad that was largely different from any of the research I had done since then and from what I am now doing in graduate school. However, an REU is about being able to immerse yourself in a topic, full-time for ten weeks and contribute new knowledge to the field.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ui92t", "flair_text": null, "created": 1351717802.0, "created_utc": 1351714202.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_1293c0", "children": [], "author": "n3hima", "id": "c6t7yq1", "parent_id": "t3_1293c0", "score": 0, "approved_by": null, "upvotes": 2, "body": "What's an REU?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What&amp;#39;s an REU?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6t7yq1", "flair_text": null, "created": 1351488568.0, "created_utc": 1351484968.0, "num_reports": null}], "score": 3, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 9, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/1293c0/how_selective_are_comp_sci_reus_in_general/", "has_more_comments": false, "name": "t3_1293c0", "created": 1351480164.0, "url": "http://www.reddit.com/r/compsci/comments/1293c0/how_selective_are_comp_sci_reus_in_general/", "author_flair_text": null, "author": "feartrich", "created_utc": 1351476564.0, "link_flair_text": null, "media": null, "num_reports": null}, "301": {"domain": "epetitions.direct.gov.uk", "link_flair_class": null, "banned_by": null, "downvotes": 60, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "124kes", "clicked": false, "title": "e-Petition Reminder: Put Alan Turing on the next \u00a310 note -- 20% of the way there!", "num_comments": 6, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_124kes", "children": [], "author": "swhell", "id": "c6s3f84", "parent_id": "t3_124kes", "score": 0, "approved_by": null, "upvotes": 26, "body": "20% of the way to being *considered for debate*", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;20% of the way to being &lt;em&gt;considered for debate&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6s3f84", "flair_text": null, "created": 1351269028.0, "created_utc": 1351265428.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_124kes", "children": [], "author": "thephotoman", "id": "c6s41k6", "parent_id": "t3_124kes", "score": 0, "approved_by": null, "upvotes": 11, "body": "Too bad they change the design every so often.  I really like the depiction of Charles Darwin currently on the tenner.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Too bad they change the design every so often.  I really like the depiction of Charles Darwin currently on the tenner.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6s41k6", "flair_text": null, "created": 1351271236.0, "created_utc": 1351267636.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_124kes", "children": [], "author": "thomashauk", "id": "c6s425j", "parent_id": "t3_124kes", "score": 0, "approved_by": null, "upvotes": 4, "body": "This isn't the remit of Parliament it's up to the bank of England. They have published a list of those they are considering to have on new note and he's on there and considered one of the favourates.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This isn&amp;#39;t the remit of Parliament it&amp;#39;s up to the bank of England. They have published a list of those they are considering to have on new note and he&amp;#39;s on there and considered one of the favourates.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6s425j", "flair_text": null, "created": 1351271295.0, "created_utc": 1351267695.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_124kes", "children": [], "author": "BrainInAJar", "id": "c6s52gi", "parent_id": "t3_124kes", "score": 0, "approved_by": null, "upvotes": 4, "body": "Too bad internet petitions don't do anything.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Too bad internet petitions don&amp;#39;t do anything.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6s52gi", "flair_text": null, "created": 1351274844.0, "created_utc": 1351271244.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_124kes", "children": [], "author": "[deleted]", "id": "c6s5saj", "parent_id": "t3_124kes", "score": 0, "approved_by": null, "upvotes": 4, "body": "I wish the US would actually put worthwhile people onto money.  All we get are politicians and almost-half-fictitious historical figures.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wish the US would actually put worthwhile people onto money.  All we get are politicians and almost-half-fictitious historical figures.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6s5saj", "flair_text": null, "created": 1351277387.0, "created_utc": 1351273787.0, "num_reports": null}], "score": 249, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 309, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/124kes/epetition_reminder_put_alan_turing_on_the_next_10/", "has_more_comments": false, "name": "t3_124kes", "created": 1351268191.0, "url": "http://epetitions.direct.gov.uk/petitions/31659", "author_flair_text": null, "author": "adamashton", "created_utc": 1351264591.0, "link_flair_text": null, "media": null, "num_reports": null}, "302": {"domain": "members.chello.nl", "link_flair_class": null, "banned_by": null, "downvotes": 3, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "125avk", "clicked": false, "title": "\"How unimportant it is whether submarines can swim\" (EWD1056)", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_125avk", "children": [], "author": "[deleted]", "id": "c6ssnz4", "parent_id": "t3_125avk", "score": 0, "approved_by": null, "upvotes": 3, "body": "[deleted]", "edited": 1351447018.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ssnz4", "flair_text": null, "created": 1351406015.0, "created_utc": 1351402415.0, "num_reports": null}], "score": 19, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 22, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/125avk/how_unimportant_it_is_whether_submarines_can_swim/", "has_more_comments": false, "name": "t3_125avk", "created": 1351293424.0, "url": "http://members.chello.nl/hjgtuyl/computing/EWD1056.html", "author_flair_text": null, "author": "gwern", "created_utc": 1351289824.0, "link_flair_text": null, "media": null, "num_reports": null}, "303": {"domain": "cstheory.stackexchange.com", "link_flair_class": null, "banned_by": null, "downvotes": 2, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "125l9f", "clicked": false, "title": "Ecology and evolution through the algorithmic lens", "num_comments": 0, "comments": [], "score": 2, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 4, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/125l9f/ecology_and_evolution_through_the_algorithmic_lens/", "has_more_comments": false, "name": "t3_125l9f", "created": 1351305459.0, "url": "http://cstheory.stackexchange.com/q/14103/1037", "author_flair_text": null, "author": "DevFRus", "created_utc": 1351301859.0, "link_flair_text": null, "media": null, "num_reports": null}, "304": {"domain": "blog.aggregateknowledge.com", "link_flair_class": null, "banned_by": null, "downvotes": 1, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "124r3r", "clicked": false, "title": "Sketch of the Day: HyperLogLog \u2014 Cornerstone of a Big Data Infrastructure", "num_comments": 0, "comments": [], "score": 7, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 8, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/124r3r/sketch_of_the_day_hyperloglog_cornerstone_of_a/", "has_more_comments": false, "name": "t3_124r3r", "created": 1351274537.0, "url": "http://blog.aggregateknowledge.com/2012/10/25/sketch-of-the-day-hyperloglog-cornerstone-of-a-big-data-infrastructure/", "author_flair_text": null, "author": "rweald", "created_utc": 1351270937.0, "link_flair_text": null, "media": null, "num_reports": null}, "305": {"domain": "crypto.stanford.edu", "link_flair_class": null, "banned_by": null, "downvotes": 19, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "122yrk", "clicked": false, "title": "SSL certificate validation is completely broken in many security-critical applications and libraries", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_122yrk", "children": [], "author": "rq60", "id": "c6rymsq", "parent_id": "t3_122yrk", "score": 0, "approved_by": null, "upvotes": 4, "body": "&gt; CURLOPT_SSL_VERIFYHOST\t 1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. In production environments the value of this option should be kept at 2 (default value).\n\nat first i thought they were talking about CURLOPT_SSL_VERIFYPEER which does use true/false.  talk about inconsistent... should probably be using constants rather than a magic 1 or 2 as values.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;CURLOPT_SSL_VERIFYHOST     1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. In production environments the value of this option should be kept at 2 (default value).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;at first i thought they were talking about CURLOPT_SSL_VERIFYPEER which does use true/false.  talk about inconsistent... should probably be using constants rather than a magic 1 or 2 as values.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6rymsq", "flair_text": null, "created": 1351235330.0, "created_utc": 1351231730.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_122yrk", "children": [], "author": "RyanMcGowan", "id": "c6rxs06", "parent_id": "t3_122yrk", "score": 0, "approved_by": null, "upvotes": 1, "body": "This needs more attention!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This needs more attention!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6rxs06", "flair_text": null, "created": 1351230605.0, "created_utc": 1351227005.0, "num_reports": null}], "score": 58, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 77, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/122yrk/ssl_certificate_validation_is_completely_broken/", "has_more_comments": false, "name": "t3_122yrk", "created": 1351197396.0, "url": "https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html", "author_flair_text": null, "author": "SaturnMoth", "created_utc": 1351193796.0, "link_flair_text": null, "media": null, "num_reports": null}, "306": {"domain": "egtheory.wordpress.com", "link_flair_class": null, "banned_by": null, "downvotes": 8, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "121sll", "clicked": false, "title": "Generating random k-regular graphs", "num_comments": 12, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_121sll", "children": [], "author": "cypherx", "id": "c6rnyty", "parent_id": "t3_121sll", "score": 0, "approved_by": null, "upvotes": 6, "body": "I'm missing something simple, can someone explain to me why the obvious/naive approach not work? \n\n    Pick a random vertex without replacement and \n        (from the remaining vertices), \n        choose k random neighbors. \n    Repeat n times. ", "edited": 1351193030.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m missing something simple, can someone explain to me why the obvious/naive approach not work? &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Pick a random vertex without replacement and \n    (from the remaining vertices), \n    choose k random neighbors. \nRepeat n times. \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6rnyty", "flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "created": 1351193506.0, "created_utc": 1351189906.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_121sll", "children": [], "author": "DevFRus", "id": "c6rwh48", "parent_id": "t3_121sll", "score": 0, "approved_by": null, "upvotes": 1, "body": "If you are curious about what these graphs are used for in evolutionary game theory, then [here is a summary of some analytic results for games on random k-regular graphs](http://egtheory.wordpress.com/2012/10/25/ohtsuki-nowak-transform/).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you are curious about what these graphs are used for in evolutionary game theory, then &lt;a href=\"http://egtheory.wordpress.com/2012/10/25/ohtsuki-nowak-transform/\"&gt;here is a summary of some analytic results for games on random k-regular graphs&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6rwh48", "flair_text": null, "created": 1351224862.0, "created_utc": 1351221262.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_121sll", "children": [], "author": "Hellrazor236", "id": "c6rg0m0", "parent_id": "t3_121sll", "score": 0, "approved_by": null, "upvotes": 2, "body": "I came for the xkcd and was severely disappointed.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I came for the xkcd and was severely disappointed.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6rg0m0", "flair_text": null, "created": 1351149552.0, "created_utc": 1351145952.0, "num_reports": null}], "score": 18, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 26, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/121sll/generating_random_kregular_graphs/", "has_more_comments": false, "name": "t3_121sll", "created": 1351142442.0, "url": "http://egtheory.wordpress.com/2012/03/29/random-regular-graphs/", "author_flair_text": null, "author": "DevFRus", "created_utc": 1351138842.0, "link_flair_text": null, "media": null, "num_reports": null}, "307": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 23, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So there are several ways to find 2&lt;sup&gt;n&lt;/sup&gt; (without using any libraries). There is the obvious loop n times and multiply by 2 each time. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int poweroftwo(int n) {\n\n  int sum = 1;                \n  for (int i = 0; i &amp;lt; n; n++){\n    sum = sum*2;\n  }            \n  return sum;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;runtime - O(n)&lt;/p&gt;\n\n&lt;p&gt;it can also be done recursively&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int poweroftwo(int n) {\n  if (n &amp;lt; 1)\n    return 1;\n\n  int x = poweroftwo(floor(n/2));\n  if (n % 2 == 0) {\n    return x*x;\n  } else { \n    return x*x*2;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this will give a log(n) running time&lt;/p&gt;\n\n&lt;p&gt;but when I asked the question to someone this is what they gave me and claimed constant running time&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int poweroftwo(int n) {\n  return 1 &amp;lt;&amp;lt; n;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is this actually constant running time? or is it still a linear running time because it takes n iterations to move n bits?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "So there are several ways to find 2^n (without using any libraries). There is the obvious loop n times and multiply by 2 each time. \n\n    int poweroftwo(int n) {\n\n      int sum = 1;                \n      for (int i = 0; i &lt; n; n++){\n        sum = sum*2;\n      }            \n      return sum;\n    }\n\nruntime - O(n)\n\nit can also be done recursively\n\n    int poweroftwo(int n) {\n      if (n &lt; 1)\n        return 1;\n\n      int x = poweroftwo(floor(n/2));\n      if (n % 2 == 0) {\n        return x*x;\n      } else { \n        return x*x*2;\n      }\n    }\n\nthis will give a log(n) running time\n\nbut when I asked the question to someone this is what they gave me and claimed constant running time\n\n    int poweroftwo(int n) {\n      return 1 &lt;&lt; n;\n    }\n\n\nIs this actually constant running time? or is it still a linear running time because it takes n iterations to move n bits?\n\nThanks!", "saved": false, "id": "11yql6", "clicked": false, "title": "runtime of 2^n", "num_comments": 56, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 9, "link_id": "t3_11yql6", "children": [], "author": "antonulrich", "id": "c6qs274", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 52, "body": "It's comparing apples and oranges.\n\nThe first two runtimes are algorithmic runtimes -- the worst case behavior for a number n *of any size*. The last one talks about actual runtime -- how many CPU cycles are needed. Those are different things.\n\nYes, the last one is O(1) if you look at an actual CPU. But the reason is not that it's a better algorithm, the reason is that you are limiting the size of the input. You assume n fits in a single CPU register (e.g 64 bits); if it doesn't, it's not O(1) any more.\n\nHowever, any algorithm is O(1) if the input is bounded by a fixed number. So if n can never be longer than 64 bits, then the first and the second algorithms are O(1), too.\n\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s comparing apples and oranges.&lt;/p&gt;\n\n&lt;p&gt;The first two runtimes are algorithmic runtimes -- the worst case behavior for a number n &lt;em&gt;of any size&lt;/em&gt;. The last one talks about actual runtime -- how many CPU cycles are needed. Those are different things.&lt;/p&gt;\n\n&lt;p&gt;Yes, the last one is O(1) if you look at an actual CPU. But the reason is not that it&amp;#39;s a better algorithm, the reason is that you are limiting the size of the input. You assume n fits in a single CPU register (e.g 64 bits); if it doesn&amp;#39;t, it&amp;#39;s not O(1) any more.&lt;/p&gt;\n\n&lt;p&gt;However, any algorithm is O(1) if the input is bounded by a fixed number. So if n can never be longer than 64 bits, then the first and the second algorithms are O(1), too.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qs274", "flair_text": null, "created": 1351038886.0, "created_utc": 1351035286.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 16, "link_id": "t3_11yql6", "children": [], "author": "Dan7620", "id": "c6qpfhi", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 62, "body": "Yes, if the CPU contains a hardware shifter unit then the operation is done in constant time. See http://en.wikipedia.org/wiki/Barrel_shifter", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yes, if the CPU contains a hardware shifter unit then the operation is done in constant time. See &lt;a href=\"http://en.wikipedia.org/wiki/Barrel_shifter\"&gt;http://en.wikipedia.org/wiki/Barrel_shifter&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpfhi", "flair_text": null, "created": 1351029327.0, "created_utc": 1351025727.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 8, "link_id": "t3_11yql6", "children": [], "author": "rarededilerore", "id": "c6qpfwk", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 25, "body": "Shifting bits is a single instruction in common CPUs. It takes up only one clock cycle. That\u2019s why it\u2019s constant.\n\n*Edit:* That\u2019s how it\u2019s wired: http://www.realworldtech.com/includes/images/articles/fo4-fig10.gif", "edited": 1351026123.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Shifting bits is a single instruction in common CPUs. It takes up only one clock cycle. That\u2019s why it\u2019s constant.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; That\u2019s how it\u2019s wired: &lt;a href=\"http://www.realworldtech.com/includes/images/articles/fo4-fig10.gif\"&gt;http://www.realworldtech.com/includes/images/articles/fo4-fig10.gif&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpfwk", "flair_text": null, "created": 1351029362.0, "created_utc": 1351025762.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11yql6", "children": [], "author": "skindeeper", "id": "c6qpnww", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 18, "body": "Anytime you're talking about big-O bounds, we're talking about the number of operations required - so we have to specify *which* operations we're talking about. And those operations differ depending on what model of computation you're interested in, or more practically, what are the expensive operations in a given problem.\n\nFor example, bounds on sorting algorithms are usually given in terms of number of comparison operations. Numerical algorithms sensibly are given in terms of basic arithmetic operations.\n\nIn your case here, we have to decide how to count a \"shift left\" operation. Is it constant time? Is it linear in it's right argument? And this depends on whether we want to report time bounds for a simple, +-/* arithmetic machine, or if we want to report time bounds for a machine model with a constant-time shift.\n\nIn a real machine, shift left can be implemented in several ways. A very simple machine might have no built-in operation for it, so the compiler might implement it as a loop or multiplication. Or, it might be built in to hardware, but take n or log(n) operations. In modern chips, it's (almost certainly) constant time.\n\nSo, the technical answer is \"it depends.\" ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Anytime you&amp;#39;re talking about big-O bounds, we&amp;#39;re talking about the number of operations required - so we have to specify &lt;em&gt;which&lt;/em&gt; operations we&amp;#39;re talking about. And those operations differ depending on what model of computation you&amp;#39;re interested in, or more practically, what are the expensive operations in a given problem.&lt;/p&gt;\n\n&lt;p&gt;For example, bounds on sorting algorithms are usually given in terms of number of comparison operations. Numerical algorithms sensibly are given in terms of basic arithmetic operations.&lt;/p&gt;\n\n&lt;p&gt;In your case here, we have to decide how to count a &amp;quot;shift left&amp;quot; operation. Is it constant time? Is it linear in it&amp;#39;s right argument? And this depends on whether we want to report time bounds for a simple, +-/* arithmetic machine, or if we want to report time bounds for a machine model with a constant-time shift.&lt;/p&gt;\n\n&lt;p&gt;In a real machine, shift left can be implemented in several ways. A very simple machine might have no built-in operation for it, so the compiler might implement it as a loop or multiplication. Or, it might be built in to hardware, but take n or log(n) operations. In modern chips, it&amp;#39;s (almost certainly) constant time.&lt;/p&gt;\n\n&lt;p&gt;So, the technical answer is &amp;quot;it depends.&amp;quot; &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpnww", "flair_text": null, "created": 1351030091.0, "created_utc": 1351026491.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11yql6", "children": [], "author": "AgentAnderson", "id": "c6qrszq", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 12, "body": "Why are all these people saying it's a single operation?\n\nWhat about a 9000-bit number? This is compsci, not compengineering; consider the general case.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why are all these people saying it&amp;#39;s a single operation?&lt;/p&gt;\n\n&lt;p&gt;What about a 9000-bit number? This is compsci, not compengineering; consider the general case.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qrszq", "flair_text": null, "created": 1351037910.0, "created_utc": 1351034310.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 15, "link_id": "t3_11yql6", "children": [], "author": "supercargo", "id": "c6qpg9q", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 27, "body": "It is a trick to make it look like constant time, but in this case the constant is bound by the size (# of bits) of an integer.  Even if the CPU can perform this operation in a single instruction it is still taking advantage of fixed size integers. If integers weren't fixed bit width, then this wouldn't be constant time.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is a trick to make it look like constant time, but in this case the constant is bound by the size (# of bits) of an integer.  Even if the CPU can perform this operation in a single instruction it is still taking advantage of fixed size integers. If integers weren&amp;#39;t fixed bit width, then this wouldn&amp;#39;t be constant time.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpg9q", "flair_text": null, "created": 1351029395.0, "created_utc": 1351025795.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11yql6", "children": [], "author": "pigeon768", "id": "c6qpzqd", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 8, "body": "That depends on the architecture. In x86 land, shift by constant or shift by variable is a constant time operation, and is very fast.\n\nOn some other architectures, such as the [PowerPC,](http://cellperformance.beyond3d.com/articles/2006/04/avoiding-microcoded-instructions-on-the-ppu.html) shift by constant is a constant time operation, but shift by variable is a significantly slower microcoded instruction that actually stalls the pipeline. I *suspect* the bitshift method is still faster than the other implementations, (branching and whatnot) but having never coded a PowerPC system I couldn't tell you for sure. [Relevant stackoverflow article.](http://stackoverflow.com/questions/539836/emulating-variable-bit-shift-using-only-constant-shifts)\n\nHowever often you think your compiler spits out bitshifts, multiply that number by about 64 and you'll be close. By the way, when you just told your compiler to multiply by 64? It used a bitshift.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That depends on the architecture. In x86 land, shift by constant or shift by variable is a constant time operation, and is very fast.&lt;/p&gt;\n\n&lt;p&gt;On some other architectures, such as the &lt;a href=\"http://cellperformance.beyond3d.com/articles/2006/04/avoiding-microcoded-instructions-on-the-ppu.html\"&gt;PowerPC,&lt;/a&gt; shift by constant is a constant time operation, but shift by variable is a significantly slower microcoded instruction that actually stalls the pipeline. I &lt;em&gt;suspect&lt;/em&gt; the bitshift method is still faster than the other implementations, (branching and whatnot) but having never coded a PowerPC system I couldn&amp;#39;t tell you for sure. &lt;a href=\"http://stackoverflow.com/questions/539836/emulating-variable-bit-shift-using-only-constant-shifts\"&gt;Relevant stackoverflow article.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;However often you think your compiler spits out bitshifts, multiply that number by about 64 and you&amp;#39;ll be close. By the way, when you just told your compiler to multiply by 64? It used a bitshift.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpzqd", "flair_text": null, "created": 1351031204.0, "created_utc": 1351027604.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 9, "link_id": "t3_11yql6", "children": [], "author": "fearailhold", "id": "c6qpgun", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 13, "body": "It requires constant running time with most architectures, but some can require O(n) number of cycles. See [this discussion](http://stackoverflow.com/questions/9083743/is-bit-shifting-o1-or-on) for details.\n\nKeep in mind that none of your code will work correctly when n is greater than 64 (or 32, if you have a 32-bit machine). Since n is bounded, you could argue that shifting is O(1), but that'd be a weird argument to make since I assume that you are thinking about applying these approaches to arbitrary precision arithmetic.\n\nOne more thing to note is the absence of *implied constants* in asymptotic analysis. If you are on an architecture where your shifting algorithm is O(n), then that is asymptotically \"slower\" than your recursive O(log(n)) algorithm, but practically speaking the shifting algorithm will be significantly faster. Why? Well, think about the cost of integer multiplication versus integer bit shifting.", "edited": 1351026084.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It requires constant running time with most architectures, but some can require O(n) number of cycles. See &lt;a href=\"http://stackoverflow.com/questions/9083743/is-bit-shifting-o1-or-on\"&gt;this discussion&lt;/a&gt; for details.&lt;/p&gt;\n\n&lt;p&gt;Keep in mind that none of your code will work correctly when n is greater than 64 (or 32, if you have a 32-bit machine). Since n is bounded, you could argue that shifting is O(1), but that&amp;#39;d be a weird argument to make since I assume that you are thinking about applying these approaches to arbitrary precision arithmetic.&lt;/p&gt;\n\n&lt;p&gt;One more thing to note is the absence of &lt;em&gt;implied constants&lt;/em&gt; in asymptotic analysis. If you are on an architecture where your shifting algorithm is O(n), then that is asymptotically &amp;quot;slower&amp;quot; than your recursive O(log(n)) algorithm, but practically speaking the shifting algorithm will be significantly faster. Why? Well, think about the cost of integer multiplication versus integer bit shifting.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpgun", "flair_text": null, "created": 1351029449.0, "created_utc": 1351025849.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11yql6", "children": [], "author": "spevak", "id": "c6qrw6v", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 2, "body": "bit shifting is a pretty ubiquitous hardware-level instruction, and should will only take one clock cycle unless you're running some strange architecture that doesn't support it, or if for some reason your higher-level language shift operator is not implemented using the hardware shift instruction (I don't know why they woudn't...)\nTL;DR: bit shifting is constant time, excepting certain unlikely curcumstances", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;bit shifting is a pretty ubiquitous hardware-level instruction, and should will only take one clock cycle unless you&amp;#39;re running some strange architecture that doesn&amp;#39;t support it, or if for some reason your higher-level language shift operator is not implemented using the hardware shift instruction (I don&amp;#39;t know why they woudn&amp;#39;t...)\nTL;DR: bit shifting is constant time, excepting certain unlikely curcumstances&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qrw6v", "flair_text": null, "created": 1351038257.0, "created_utc": 1351034657.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11yql6", "children": [], "author": "sparr", "id": "c6qtxl1", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 1, "body": "8-bit AVR doesn't have an instruction for arbitrary shifts. 1&lt;&lt;n gets compiled into a loop of &lt;&lt;1 n times. So this very much depends on your architecture.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;8-bit AVR doesn&amp;#39;t have an instruction for arbitrary shifts. 1&amp;lt;&amp;lt;n gets compiled into a loop of &amp;lt;&amp;lt;1 n times. So this very much depends on your architecture.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qtxl1", "flair_text": null, "created": 1351046298.0, "created_utc": 1351042698.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11yql6", "children": [], "author": "rkenned", "id": "c6qwyoq", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 1, "body": "I guess I'll be the practical one here...your code doesn't work for n &gt; 32, and I would imagine the handling of integer overflow for very large n would be your performance bottleneck...not the actual multiplication itself. \n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I guess I&amp;#39;ll be the practical one here...your code doesn&amp;#39;t work for n &amp;gt; 32, and I would imagine the handling of integer overflow for very large n would be your performance bottleneck...not the actual multiplication itself. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qwyoq", "flair_text": null, "created": 1351058348.0, "created_utc": 1351054748.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11yql6", "children": [], "author": "kouhoutek", "id": "c6qxtum", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 1, "body": "Algorithmic complexity starts to become less meaningful when you look at the minutia of hardware.  Specialized hardware can reduce *any* operation to constant time over a limited domain, and all domains have some limit eventually.  In fact, if I characterize a computer as a finite state machine (which it is), O(n) pretty much goes out the window.\n\nBut to answer your question, a lot of computer hardware can bitshift n places just as fast as they can multiply by n....often faster.  You could split hairs whether deep down it is constant time or log n, but that is true with *any* operation.\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Algorithmic complexity starts to become less meaningful when you look at the minutia of hardware.  Specialized hardware can reduce &lt;em&gt;any&lt;/em&gt; operation to constant time over a limited domain, and all domains have some limit eventually.  In fact, if I characterize a computer as a finite state machine (which it is), O(n) pretty much goes out the window.&lt;/p&gt;\n\n&lt;p&gt;But to answer your question, a lot of computer hardware can bitshift n places just as fast as they can multiply by n....often faster.  You could split hairs whether deep down it is constant time or log n, but that is true with &lt;em&gt;any&lt;/em&gt; operation.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qxtum", "flair_text": null, "created": 1351062991.0, "created_utc": 1351059391.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11yql6", "children": [], "author": "hay_guise", "id": "c6r3ato", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 1, "body": "if you're using 32 bit integers, there's a small fixed number of solutions to the problem. i don't think it makes a whole lot of sense to use O notation in this scenario, but if you're counting processor cycles, it can be O(1). if you're counting gate operations, it's still probably O(1) but with bigger constants. shift regesters typically work by shifting each bit by the specified amount, rather than shifting by 1 a bunch of times, and they don't know that most of the bits are 0, so they have to shift all of them.\n\nif you're using arbitrary length integers, it's going to be O(n) best case, because you have to output n bits.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;if you&amp;#39;re using 32 bit integers, there&amp;#39;s a small fixed number of solutions to the problem. i don&amp;#39;t think it makes a whole lot of sense to use O notation in this scenario, but if you&amp;#39;re counting processor cycles, it can be O(1). if you&amp;#39;re counting gate operations, it&amp;#39;s still probably O(1) but with bigger constants. shift regesters typically work by shifting each bit by the specified amount, rather than shifting by 1 a bunch of times, and they don&amp;#39;t know that most of the bits are 0, so they have to shift all of them.&lt;/p&gt;\n\n&lt;p&gt;if you&amp;#39;re using arbitrary length integers, it&amp;#39;s going to be O(n) best case, because you have to output n bits.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6r3ato", "flair_text": null, "created": 1351098407.0, "created_utc": 1351094807.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 6, "link_id": "t3_11yql6", "children": [], "author": "Rhomboid", "id": "c6qphg2", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 7, "body": "On most architectures, the machine instruction for doing a bit shift takes the same amount of time no matter the size of the shift; it certainly does not have to loop n times.  So in that sense, yes, it's most definitely a constant-time function.\n\nBut really this kind of consideration is far outside the purview of algorithmic analysis.  Or rather, algorithmic analysis is not about how hardware works.  For the purposes of algorithmic analysis you just have to declare by definition the cost of all operations, which means you usually end up saying that all operators like +, -, /, \\*, as well as things like reading and writing memory take a fixed and constant amount of time.  In reality, hardware doesn't work that way.  But that's okay, because algorithmic analysis is meant to be a rough approximation of things, it's not meant to model the details of hardware, which is why you always have to benchmark.\n\nSo, in summary, it's whatever you want to define it as.  If you define the &lt;&lt; operator as having a constant cost, then this is a O(1) function.  That would be a prudent definition, because that's actually how the hardware works, but that doesn't necessarily mean anything.\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;On most architectures, the machine instruction for doing a bit shift takes the same amount of time no matter the size of the shift; it certainly does not have to loop n times.  So in that sense, yes, it&amp;#39;s most definitely a constant-time function.&lt;/p&gt;\n\n&lt;p&gt;But really this kind of consideration is far outside the purview of algorithmic analysis.  Or rather, algorithmic analysis is not about how hardware works.  For the purposes of algorithmic analysis you just have to declare by definition the cost of all operations, which means you usually end up saying that all operators like +, -, /, *, as well as things like reading and writing memory take a fixed and constant amount of time.  In reality, hardware doesn&amp;#39;t work that way.  But that&amp;#39;s okay, because algorithmic analysis is meant to be a rough approximation of things, it&amp;#39;s not meant to model the details of hardware, which is why you always have to benchmark.&lt;/p&gt;\n\n&lt;p&gt;So, in summary, it&amp;#39;s whatever you want to define it as.  If you define the &amp;lt;&amp;lt; operator as having a constant cost, then this is a O(1) function.  That would be a prudent definition, because that&amp;#39;s actually how the hardware works, but that doesn&amp;#39;t necessarily mean anything.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qphg2", "flair_text": null, "created": 1351029503.0, "created_utc": 1351025903.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11yql6", "children": [], "author": "UserNotAvailable", "id": "c6qq8kw", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 4, "body": "Using shifts is very popular for architectures with limited resources to optimize performance critical parts. Think 3D engines, embedded media player, video codecs, ...\n\nThis is espically usefull, if your chip can do shifts in hardware but can't do multiplications or division. Even if you have to do several single shifts, it is often faster than multiplication.\n\n\nThere are some caveats, mostly related to signed and unsigned numbers. For example\n\n    // This won't work\n    int divideByTwo(int x) {\n      return (x &gt;&gt; 1);\n    }\n    \n    // This will work\n    unsigned int divideByTwo(unsigned int x) {\n      return (x &gt;&gt; 1);\n    }\n\nYou can to some very nice and fast math using this for example\n\n    bool isEvenNumber(int x){\n      return (x &amp; 1);\n    }\n\n    int moduloSixteen(int x){\n      return (x &amp; 0x10);\n    }\n\n    unsigned int calculateSevenEights(unsigned int x){\n      return (x - (x &gt;&gt; 3));\n    }\n\n    unsigned int multiplyByThirteen(unsigned int x){\n      return (x + (x &lt;&lt; 2) + (x &lt;&lt; 3));\n    }", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using shifts is very popular for architectures with limited resources to optimize performance critical parts. Think 3D engines, embedded media player, video codecs, ...&lt;/p&gt;\n\n&lt;p&gt;This is espically usefull, if your chip can do shifts in hardware but can&amp;#39;t do multiplications or division. Even if you have to do several single shifts, it is often faster than multiplication.&lt;/p&gt;\n\n&lt;p&gt;There are some caveats, mostly related to signed and unsigned numbers. For example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// This won&amp;#39;t work\nint divideByTwo(int x) {\n  return (x &amp;gt;&amp;gt; 1);\n}\n\n// This will work\nunsigned int divideByTwo(unsigned int x) {\n  return (x &amp;gt;&amp;gt; 1);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can to some very nice and fast math using this for example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;bool isEvenNumber(int x){\n  return (x &amp;amp; 1);\n}\n\nint moduloSixteen(int x){\n  return (x &amp;amp; 0x10);\n}\n\nunsigned int calculateSevenEights(unsigned int x){\n  return (x - (x &amp;gt;&amp;gt; 3));\n}\n\nunsigned int multiplyByThirteen(unsigned int x){\n  return (x + (x &amp;lt;&amp;lt; 2) + (x &amp;lt;&amp;lt; 3));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qq8kw", "flair_text": null, "created": 1351032072.0, "created_utc": 1351028472.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11yql6", "children": [], "author": "oniofchaos", "id": "c6qr98k", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 2, "body": "When I took your code for the recursive version of poweroftwo, it did not work. It returned 2, 4, 4, 16, 16, 16, 16, 256, 256... when I looped through the first few powers.\n\n\nIt ends up returning 2^k, where k is some power of 2, until n equals the next power of 2. So from n = 4 to n = 7, it returns 2^4. Once n = 8, it returns 2^8 all the way to n = 15.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When I took your code for the recursive version of poweroftwo, it did not work. It returned 2, 4, 4, 16, 16, 16, 16, 256, 256... when I looped through the first few powers.&lt;/p&gt;\n\n&lt;p&gt;It ends up returning 2&lt;sup&gt;k,&lt;/sup&gt; where k is some power of 2, until n equals the next power of 2. So from n = 4 to n = 7, it returns 2&lt;sup&gt;4.&lt;/sup&gt; Once n = 8, it returns 2&lt;sup&gt;8&lt;/sup&gt; all the way to n = 15.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qr98k", "flair_text": null, "created": 1351035821.0, "created_utc": 1351032221.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11yql6", "children": [], "author": "badalgorithm", "id": "c6tq2jj", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 2, "body": "Sigh, this should be obvious.\n\nEverything ends up in binary form. As such, bit shifting is the fastest way to multiply by a power of two or divide by a power of 2. This is because all you are doing is shifiting the bit in register. Nothing is faster.\n\nThinking that looping, or even worse, in this situation, going recursive. Recursive, while fun, does incur performance penalty with each recursion due to the fact that each recursion is an additional function call which requires additional saving and loading of registers with the bonus of having the possibility of blowing out your stack because you went to deep with your recursion.\n\nNo need to complicate the simple.\n\nIf you are unfamiliar with bit shifting, you might also want to read up on bitwise operators, in general, e.g. AND, OR, XOR.\n\n\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sigh, this should be obvious.&lt;/p&gt;\n\n&lt;p&gt;Everything ends up in binary form. As such, bit shifting is the fastest way to multiply by a power of two or divide by a power of 2. This is because all you are doing is shifiting the bit in register. Nothing is faster.&lt;/p&gt;\n\n&lt;p&gt;Thinking that looping, or even worse, in this situation, going recursive. Recursive, while fun, does incur performance penalty with each recursion due to the fact that each recursion is an additional function call which requires additional saving and loading of registers with the bonus of having the possibility of blowing out your stack because you went to deep with your recursion.&lt;/p&gt;\n\n&lt;p&gt;No need to complicate the simple.&lt;/p&gt;\n\n&lt;p&gt;If you are unfamiliar with bit shifting, you might also want to read up on bitwise operators, in general, e.g. AND, OR, XOR.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6tq2jj", "flair_text": null, "created": 1351577273.0, "created_utc": 1351573673.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 14, "link_id": "t3_11yql6", "children": [], "author": "ebix", "id": "c6qpgi9", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 9, "body": "How would you actually describe a program that \"moved every bit n to the right\"?\n\nFirst you read the bit in the 1st position, and write it to some other memory at position n+1, then do the same for the bit in the 2nd position. So on and so forth...\n\nNow how many bits are there for a number n? log_2(n). \n\nThis algorithm has the same run time as (and actually is doing effectively the same thing as) the recursive algorithm.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How would you actually describe a program that &amp;quot;moved every bit n to the right&amp;quot;?&lt;/p&gt;\n\n&lt;p&gt;First you read the bit in the 1st position, and write it to some other memory at position n+1, then do the same for the bit in the 2nd position. So on and so forth...&lt;/p&gt;\n\n&lt;p&gt;Now how many bits are there for a number n? log_2(n). &lt;/p&gt;\n\n&lt;p&gt;This algorithm has the same run time as (and actually is doing effectively the same thing as) the recursive algorithm.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qpgi9", "flair_text": null, "created": 1351029418.0, "created_utc": 1351025818.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11yql6", "children": [], "author": "[deleted]", "id": "c6qp17o", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 3, "body": "[deleted]", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qp17o", "flair_text": null, "created": 1351028031.0, "created_utc": 1351024431.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 20, "link_id": "t3_11yql6", "children": [], "author": "[deleted]", "id": "c6qq78c", "parent_id": "t3_11yql6", "score": 0, "approved_by": null, "upvotes": 4, "body": "[deleted]", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qq78c", "flair_text": null, "created": 1351031936.0, "created_utc": 1351028336.0, "num_reports": null}], "score": 46, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 69, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11yql6/runtime_of_2n/", "has_more_comments": false, "name": "t3_11yql6", "created": 1351026924.0, "url": "http://www.reddit.com/r/compsci/comments/11yql6/runtime_of_2n/", "author_flair_text": null, "author": "shapiska", "created_utc": 1351023324.0, "link_flair_text": null, "media": null, "num_reports": null}, "308": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 4, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m reading an article that talks about ciphers that are susceptible to cache-timing attacks. I&amp;#39;m having a hard time understanding what they are. &lt;/p&gt;\n\n&lt;p&gt;The article defines a cache-timing attack as &amp;quot;when an attacker attempts to recover parts of a cryptosystem state by observing the variance in timing measurements due to processor data caching effects.&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t understand when these observations of timing measurements occur. Is the hacker &amp;quot;watching&amp;quot; the message get encrypted? How would a hacker be able to observe processor data caching effects of a message that has already been encrypted?&lt;/p&gt;\n\n&lt;p&gt;Any clarification or knowledge of this subject is greatly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm reading an article that talks about ciphers that are susceptible to cache-timing attacks. I'm having a hard time understanding what they are. \n\nThe article defines a cache-timing attack as \"when an attacker attempts to recover parts of a cryptosystem state by observing the variance in timing measurements due to processor data caching effects.\"\n\nI don't understand when these observations of timing measurements occur. Is the hacker \"watching\" the message get encrypted? How would a hacker be able to observe processor data caching effects of a message that has already been encrypted?\n\nAny clarification or knowledge of this subject is greatly appreciated.", "saved": false, "id": "11z7tz", "clicked": false, "title": "How do cache-timing attacks work?", "num_comments": 6, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11z7tz", "children": [], "author": "yoshimitsu1028", "id": "c6qv5hq", "parent_id": "t3_11z7tz", "score": 0, "approved_by": null, "upvotes": 6, "body": "First you'd need to know what data caching is. In this case it's when addresses of the same prefix occur. I.e. for a size 16 cache, address of 1, 17, 33 will hit the same cache location because 1 mod 16 = 1, 17 mod 16 = 1, and  33 mod 16 = 1.\n\nThis is important in knowing what happens when the program is trying to reference something that has been seen relatively recently. Take this example, \n\n    x = 1 //a\n    \n    x = 0 //b\n    \n    y = 2 //c\n    \n    x = 3 //d\n\nAnd, using the 16 size cache mentioned earlier, have x map to on address 1 and y map to address 17. Looking at the cache just after (a) runs, we'll see a mapping of cache[&amp;x % 8] = (address, value) = (&amp;x,1). When (b) hits, we check the mapping of cache[&amp;x%8] = (&amp;x,_) and the address inside this cache value is the same as the address for the variable being referenced, so we can update the cache, no worries cache[1] = (&amp;x, 0), making the data *dirty* (data in the cache is out of sync with upper layers). When c gets executed, and we do the address check, cache[&amp;y%8]  which will return the address of x which isn't the variable we want to reference. This is known as a *cache collision*, so now, because the data is dirty, we have to write the contents of this cache (in this case the value of x) out to the next layer of memory, is this is a outer most layer of cache, it'll go to main memory (ram). After writing out the, the cache[1] can now be assigned the values of y, i.e. (&amp;y, 2). A similar collision occurs on (d), but no writing back to main memory is necessary because the contents of y haven't changed, i.e. not dirty.\n\nNow back to the main question of topic. The Cache-timing attack deals with the cases that the cache becomes corrupted, therefore a delay is presented when looking up data. For AES encryption, most software uses a lookup table for its encryption algorithm using values of *n* XOR *k*, where *n* is the data to send and *k* is your AES key. If you know what software the server is using for the AES encryption, you could run the algorithm yourself with known data and determine based on your input of *n* and find the delay given by the cache for given n^i(keep in mind you'd need to run billions of these transfers in order to get a good baseline in case you get a lot of non-collision cache hits). After mapping delays to given n^i, you could then use this to find the value of *k* given known values *n* and *n* XOR *k*.\n\nTo watch the message, you see the delay in message passing between A and B and after many *n*'s, you can determine AES time for each n^i. Using this data, if you know which *n^i* causes the biggest time spike and you know its *n^i* XOR *k^i*, you can determine the *k^i*\n\nGuh... typed too much.\n\n[AES cache-timing attack](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0CDIQxQEwAQ&amp;url=https%3A%2F%2Fdocs.google.com%2Fviewer%3Fa%3Dv%26q%3Dcache%3ATyYZ0oBb8IoJ%3Acr.yp.to%2Fantiforgery%2Fcachetiming-20050414.pdf%2B%26hl%3Den%26gl%3Dus%26pid%3Dbl%26srcid%3DADGEESjSFaUIG3iGAuayfrRQY-nzDJm4jbQRsYrLK2POWgiGwgvS_sLFy7cVzuHtJ7P3ddpVNseOMRAk0Idj9Nf2HkIwAPOT0mSvBHs6D6ZRJLl1xhw-jXqfRw5MqhlgDYA1rTGlkEtV%26sig%3DAHIEtbStxfPxdJMLfyrZIfiTPdP86lgTcA&amp;ei=01KHUJHuEa7cigKex4HoDA&amp;usg=AFQjCNGClS9obSfy85owlFi5QSK_HDyXIw&amp;cad=rja)\n\nEDIT: clearity", "edited": 1351047641.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First you&amp;#39;d need to know what data caching is. In this case it&amp;#39;s when addresses of the same prefix occur. I.e. for a size 16 cache, address of 1, 17, 33 will hit the same cache location because 1 mod 16 = 1, 17 mod 16 = 1, and  33 mod 16 = 1.&lt;/p&gt;\n\n&lt;p&gt;This is important in knowing what happens when the program is trying to reference something that has been seen relatively recently. Take this example, &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x = 1 //a\n\nx = 0 //b\n\ny = 2 //c\n\nx = 3 //d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And, using the 16 size cache mentioned earlier, have x map to on address 1 and y map to address 17. Looking at the cache just after (a) runs, we&amp;#39;ll see a mapping of cache[&amp;amp;x % 8] = (address, value) = (&amp;amp;x,1). When (b) hits, we check the mapping of cache[&amp;amp;x%8] = (&amp;amp;x,_) and the address inside this cache value is the same as the address for the variable being referenced, so we can update the cache, no worries cache[1] = (&amp;amp;x, 0), making the data &lt;em&gt;dirty&lt;/em&gt; (data in the cache is out of sync with upper layers). When c gets executed, and we do the address check, cache[&amp;amp;y%8]  which will return the address of x which isn&amp;#39;t the variable we want to reference. This is known as a &lt;em&gt;cache collision&lt;/em&gt;, so now, because the data is dirty, we have to write the contents of this cache (in this case the value of x) out to the next layer of memory, is this is a outer most layer of cache, it&amp;#39;ll go to main memory (ram). After writing out the, the cache[1] can now be assigned the values of y, i.e. (&amp;amp;y, 2). A similar collision occurs on (d), but no writing back to main memory is necessary because the contents of y haven&amp;#39;t changed, i.e. not dirty.&lt;/p&gt;\n\n&lt;p&gt;Now back to the main question of topic. The Cache-timing attack deals with the cases that the cache becomes corrupted, therefore a delay is presented when looking up data. For AES encryption, most software uses a lookup table for its encryption algorithm using values of &lt;em&gt;n&lt;/em&gt; XOR &lt;em&gt;k&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the data to send and &lt;em&gt;k&lt;/em&gt; is your AES key. If you know what software the server is using for the AES encryption, you could run the algorithm yourself with known data and determine based on your input of &lt;em&gt;n&lt;/em&gt; and find the delay given by the cache for given n&lt;sup&gt;i(keep&lt;/sup&gt; in mind you&amp;#39;d need to run billions of these transfers in order to get a good baseline in case you get a lot of non-collision cache hits). After mapping delays to given n&lt;sup&gt;i,&lt;/sup&gt; you could then use this to find the value of &lt;em&gt;k&lt;/em&gt; given known values &lt;em&gt;n&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; XOR &lt;em&gt;k&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;To watch the message, you see the delay in message passing between A and B and after many &lt;em&gt;n&lt;/em&gt;&amp;#39;s, you can determine AES time for each n&lt;sup&gt;i.&lt;/sup&gt; Using this data, if you know which &lt;em&gt;n&lt;sup&gt;i&lt;/sup&gt;&lt;/em&gt; causes the biggest time spike and you know its &lt;em&gt;n&lt;sup&gt;i&lt;/sup&gt;&lt;/em&gt; XOR &lt;em&gt;k&lt;sup&gt;i&lt;/sup&gt;&lt;/em&gt;, you can determine the &lt;em&gt;k&lt;sup&gt;i&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Guh... typed too much.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;ved=0CDIQxQEwAQ&amp;amp;url=https%3A%2F%2Fdocs.google.com%2Fviewer%3Fa%3Dv%26q%3Dcache%3ATyYZ0oBb8IoJ%3Acr.yp.to%2Fantiforgery%2Fcachetiming-20050414.pdf%2B%26hl%3Den%26gl%3Dus%26pid%3Dbl%26srcid%3DADGEESjSFaUIG3iGAuayfrRQY-nzDJm4jbQRsYrLK2POWgiGwgvS_sLFy7cVzuHtJ7P3ddpVNseOMRAk0Idj9Nf2HkIwAPOT0mSvBHs6D6ZRJLl1xhw-jXqfRw5MqhlgDYA1rTGlkEtV%26sig%3DAHIEtbStxfPxdJMLfyrZIfiTPdP86lgTcA&amp;amp;ei=01KHUJHuEa7cigKex4HoDA&amp;amp;usg=AFQjCNGClS9obSfy85owlFi5QSK_HDyXIw&amp;amp;cad=rja\"&gt;AES cache-timing attack&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT: clearity&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qv5hq", "flair_text": null, "created": 1351050929.0, "created_utc": 1351047329.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11z7tz", "children": [], "author": "NegatedVoid", "id": "c6qv05z", "parent_id": "t3_11z7tz", "score": 0, "approved_by": null, "upvotes": 12, "body": "So let's say you had some code in your crypto algorithm like this:\n\n    if (keybit[30]):\n        foo()\n    else:\n        bar()\n\nwith 'foo' and 'bar' being some code that is large enough that they occupy different cache lines.\n\nAfter executing this, the processor task switches to the attacker who runs:\n\n    start_time = now()\n    foo()\n    foo_time_taken = now() - start_time\n\n    start_time = now()\n    bar()\n    bar_time_taken = now() - start_time\n\n    if (foo_time_taken &lt; bar_time_taken)\n        print(\"foo was recently in memory so keybit 30 is more likely to be true\")\n    else \n        print(\"bar was recently in memory so keybit 30 is more likely to be false\")\nWhichever function was already in the cache would execute faster, revealing a bit of the state of the cryptosystem. Now, of course, you don't usually have things as clear as 'if bit 30 then do x', but even a small amount of probabilistic data goes a long way at reducing the keyspace. especially when you can just run it 100,000 times.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So let&amp;#39;s say you had some code in your crypto algorithm like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if (keybit[30]):\n    foo()\nelse:\n    bar()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &amp;#39;foo&amp;#39; and &amp;#39;bar&amp;#39; being some code that is large enough that they occupy different cache lines.&lt;/p&gt;\n\n&lt;p&gt;After executing this, the processor task switches to the attacker who runs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;start_time = now()\nfoo()\nfoo_time_taken = now() - start_time\n\nstart_time = now()\nbar()\nbar_time_taken = now() - start_time\n\nif (foo_time_taken &amp;lt; bar_time_taken)\n    print(&amp;quot;foo was recently in memory so keybit 30 is more likely to be true&amp;quot;)\nelse \n    print(&amp;quot;bar was recently in memory so keybit 30 is more likely to be false&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Whichever function was already in the cache would execute faster, revealing a bit of the state of the cryptosystem. Now, of course, you don&amp;#39;t usually have things as clear as &amp;#39;if bit 30 then do x&amp;#39;, but even a small amount of probabilistic data goes a long way at reducing the keyspace. especially when you can just run it 100,000 times.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qv05z", "flair_text": null, "created": 1351050368.0, "created_utc": 1351046768.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11z7tz", "children": [], "author": "nthcxd", "id": "c6r7ay8", "parent_id": "t3_11z7tz", "score": 0, "approved_by": null, "upvotes": 2, "body": "This is a relevant publication on this subject: [Cache missing for Fun and Profit](http://css.csail.mit.edu/6.858/2012/readings/ht-cache.pdf)\n\nThe author describes two things: 1) a covert channel between two threads sharing an L1 (hyperthreads) and 2) a spy thread observing the timing behavior of another thread on the same core running OpenSSL RSA operation (chapter 5).\n\nNinja edit: I don't know enough about this subject matter to declare this to be the first known publication on the subject.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is a relevant publication on this subject: &lt;a href=\"http://css.csail.mit.edu/6.858/2012/readings/ht-cache.pdf\"&gt;Cache missing for Fun and Profit&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The author describes two things: 1) a covert channel between two threads sharing an L1 (hyperthreads) and 2) a spy thread observing the timing behavior of another thread on the same core running OpenSSL RSA operation (chapter 5).&lt;/p&gt;\n\n&lt;p&gt;Ninja edit: I don&amp;#39;t know enough about this subject matter to declare this to be the first known publication on the subject.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6r7ay8", "flair_text": null, "created": 1351112305.0, "created_utc": 1351108705.0, "num_reports": null}], "score": 15, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 19, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11z7tz/how_do_cachetiming_attacks_work/", "has_more_comments": false, "name": "t3_11z7tz", "created": 1351041985.0, "url": "http://www.reddit.com/r/compsci/comments/11z7tz/how_do_cachetiming_attacks_work/", "author_flair_text": null, "author": "NerdyHardass", "created_utc": 1351038385.0, "link_flair_text": null, "media": null, "num_reports": null}, "309": {"domain": "cacm.acm.org", "link_flair_class": null, "banned_by": null, "downvotes": 10, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11zbt7", "clicked": false, "title": "The Ph.D. Grind: Lead From Below", "num_comments": 0, "comments": [], "score": 0, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 10, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11zbt7/the_phd_grind_lead_from_below/", "has_more_comments": false, "name": "t3_11zbt7", "created": 1351045529.0, "url": "http://cacm.acm.org/blogs/blog-cacm/155690-the-phd-grind-lead-from-below/fulltext", "author_flair_text": null, "author": "enferex", "created_utc": 1351041929.0, "link_flair_text": null, "media": null, "num_reports": null}, "310": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 31, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Most universities today don&amp;#39;t teach quantum computing. They teach computing as it has been for the past decade or more. Will the value of today&amp;#39;s computer science degree diminish with the advent of quantum computing? At what level of abstraction will computer science change? Will programs written in the most common languages like Java and C++ run on quantum computers? Will programmers have to think differently or will only computer architects have to think differently? Will the von Neumann model still hold?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Most universities today don't teach quantum computing. They teach computing as it has been for the past decade or more. Will the value of today's computer science degree diminish with the advent of quantum computing? At what level of abstraction will computer science change? Will programs written in the most common languages like Java and C++ run on quantum computers? Will programmers have to think differently or will only computer architects have to think differently? Will the von Neumann model still hold?", "saved": false, "id": "11wx6a", "clicked": false, "title": "Your thoughts on how quantum computing will change computer science from a CS students perspective.", "num_comments": 78, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_11wx6a", "children": [], "author": "crwcomposer", "id": "c6qa945", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 57, "body": "Quantum computing works fundamentally differently than traditional computing.\n\nIn fact, unless it turns out differently than expected (which it very well might) it won't replace traditional computing for most every-day tasks.\n\nSo, no, you probably won't be running any C or Java on a quantum computer.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quantum computing works fundamentally differently than traditional computing.&lt;/p&gt;\n\n&lt;p&gt;In fact, unless it turns out differently than expected (which it very well might) it won&amp;#39;t replace traditional computing for most every-day tasks.&lt;/p&gt;\n\n&lt;p&gt;So, no, you probably won&amp;#39;t be running any C or Java on a quantum computer.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qa945", "flair_text": null, "created": 1350958307.0, "created_utc": 1350954707.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11wx6a", "children": [], "author": "eleitl", "id": "c6qg26h", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 6, "body": "It won't, because QC won't be practical (as in: better than classical computing) for another 30-50 years, if ever.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It won&amp;#39;t, because QC won&amp;#39;t be practical (as in: better than classical computing) for another 30-50 years, if ever.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qg26h", "flair_text": null, "created": 1350983437.0, "created_utc": 1350979837.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11wx6a", "children": [], "author": "tejoka", "id": "c6qjtd1", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 9, "body": "It's a non-issue.  Worry more about learning parallel computing.\n\nQuantum computing, if it's ever a thing that ends up on a typical machine at all, will be a specialized component of the machine that changes nothing at all about programming.  It probably won't even be a general purpose computing device (like GPUs are now,) but instead specialized to one or two specific tasks.  You'll no more write quantum programs than you'll write \"quartz programs\" for consulting the real time clock.\n\nThe only way anyone will end up writing quantum programs is if (a) we get several absurdly unlikely breakthroughs in what quantum computers are even theoretically capable of, or (b) it turns out that building quantum circuits is outright trivial and totally cheap, on par with silicon! (btw, would you like to buy a bridge?)\n\nDon't get me wrong, quantum computing is interesting.  But it's interesting because it's one of the best ways we have to probe quantum physics right now (besides the LHC) and it's incredible tool for making advances in algorithms, including some results that don't even directly involve quantum algorithms.  But not because it's going to change computing.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a non-issue.  Worry more about learning parallel computing.&lt;/p&gt;\n\n&lt;p&gt;Quantum computing, if it&amp;#39;s ever a thing that ends up on a typical machine at all, will be a specialized component of the machine that changes nothing at all about programming.  It probably won&amp;#39;t even be a general purpose computing device (like GPUs are now,) but instead specialized to one or two specific tasks.  You&amp;#39;ll no more write quantum programs than you&amp;#39;ll write &amp;quot;quartz programs&amp;quot; for consulting the real time clock.&lt;/p&gt;\n\n&lt;p&gt;The only way anyone will end up writing quantum programs is if (a) we get several absurdly unlikely breakthroughs in what quantum computers are even theoretically capable of, or (b) it turns out that building quantum circuits is outright trivial and totally cheap, on par with silicon! (btw, would you like to buy a bridge?)&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t get me wrong, quantum computing is interesting.  But it&amp;#39;s interesting because it&amp;#39;s one of the best ways we have to probe quantum physics right now (besides the LHC) and it&amp;#39;s incredible tool for making advances in algorithms, including some results that don&amp;#39;t even directly involve quantum algorithms.  But not because it&amp;#39;s going to change computing.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qjtd1", "flair_text": null, "created": 1351009537.0, "created_utc": 1351005937.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 14, "link_id": "t3_11wx6a", "children": [], "author": "squidesquide", "id": "c6qd13m", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 23, "body": "Dijkstra had this to say about what computers mean to Computer Science:\n\n*\"As a result, the topic became \u2014primarily in the USA\u2014 prematurely known as \"computer science\" \u2014which, actually is like referring to surgery as \"knife science\"\u2014 and it was firmly implanted in people's minds that computing science is about machines and their peripheral equipment.\"*\n\nThe nature of information and abstract thought will not change if we somehow achieve processors capable of new things. All that will happen is that our limitations manipulating the world will be lessened. People will still have to learn most of what we learn today - maybe with a different focus, much like how we (\"higher-level\" focused people) nowadays learn about transistors and logic gates, as when compared to the eletrical engineerings and their 'electronic brains'in the 50's. The next people to come along will just have to learn *extra* things - much like we learn about big data storage and access.\n\n**Computer Science is as much about Computers as Astronomy is about telescopes** is the quote often attributed do Djistkra, and even though it might just be folklore, I thing it summarizes well his intent with the actual quote.\n\nThere is a very famous gif I can't quite find right now of an \"Introduction to Computer Science\" class where the lecturer writes Computer Science in the blackboard, then proceeds to cross first Science, then Computer. It's not a (at least not natural) Science. And it's not (just) about computers.", "edited": 1350963681.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dijkstra had this to say about what computers mean to Computer Science:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&amp;quot;As a result, the topic became \u2014primarily in the USA\u2014 prematurely known as &amp;quot;computer science&amp;quot; \u2014which, actually is like referring to surgery as &amp;quot;knife science&amp;quot;\u2014 and it was firmly implanted in people&amp;#39;s minds that computing science is about machines and their peripheral equipment.&amp;quot;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The nature of information and abstract thought will not change if we somehow achieve processors capable of new things. All that will happen is that our limitations manipulating the world will be lessened. People will still have to learn most of what we learn today - maybe with a different focus, much like how we (&amp;quot;higher-level&amp;quot; focused people) nowadays learn about transistors and logic gates, as when compared to the eletrical engineerings and their &amp;#39;electronic brains&amp;#39;in the 50&amp;#39;s. The next people to come along will just have to learn &lt;em&gt;extra&lt;/em&gt; things - much like we learn about big data storage and access.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Computer Science is as much about Computers as Astronomy is about telescopes&lt;/strong&gt; is the quote often attributed do Djistkra, and even though it might just be folklore, I thing it summarizes well his intent with the actual quote.&lt;/p&gt;\n\n&lt;p&gt;There is a very famous gif I can&amp;#39;t quite find right now of an &amp;quot;Introduction to Computer Science&amp;quot; class where the lecturer writes Computer Science in the blackboard, then proceeds to cross first Science, then Computer. It&amp;#39;s not a (at least not natural) Science. And it&amp;#39;s not (just) about computers.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qd13m", "flair_text": null, "created": 1350967061.0, "created_utc": 1350963461.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11wx6a", "children": [], "author": "cypherx", "id": "c6qehve", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 3, "body": "I think that quantum computing, if it ever becomes practical, will spur a lot of interest in non-standard higher level programming models. Reversible computing models, probabilistic lambda calculus, linear lambda calculus, etc.. all might become useful when your \"hardware\" only supports one sort of operation: rotating a state vector. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think that quantum computing, if it ever becomes practical, will spur a lot of interest in non-standard higher level programming models. Reversible computing models, probabilistic lambda calculus, linear lambda calculus, etc.. all might become useful when your &amp;quot;hardware&amp;quot; only supports one sort of operation: rotating a state vector. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qehve", "flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "created": 1350972980.0, "created_utc": 1350969380.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11wx6a", "children": [], "author": "vytah", "id": "c6qfemy", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 3, "body": "Quantum computing will speed up few things, but classical processors aren't gonna go anywhere. At best, there will be QCS classes as a part of CS curriculum.\n\nLook at multicore. We have multicore CPU's for years, parallel and concurrent computing classes, and your average Joe Coder still cannot spawn a thread without deadlocks or race conditions.\n\nAnd most of things didn't change in the advent of multicore. You still need non-parallelizable algorithms.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quantum computing will speed up few things, but classical processors aren&amp;#39;t gonna go anywhere. At best, there will be QCS classes as a part of CS curriculum.&lt;/p&gt;\n\n&lt;p&gt;Look at multicore. We have multicore CPU&amp;#39;s for years, parallel and concurrent computing classes, and your average Joe Coder still cannot spawn a thread without deadlocks or race conditions.&lt;/p&gt;\n\n&lt;p&gt;And most of things didn&amp;#39;t change in the advent of multicore. You still need non-parallelizable algorithms.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qfemy", "flair_text": null, "created": 1350978248.0, "created_utc": 1350974648.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11wx6a", "children": [], "author": "sinhahaha", "id": "c6qhlqi", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 1, "body": "[This](http://arxiv.org/abs/quant-ph/0207118) is a guide of sorts which teaches computer and mathematically literate students the basics of quantum mechanics with the goal of being able to create quantum algorithms and such. It's not as hard as you might think, I suggest giving it a read if you're interested.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://arxiv.org/abs/quant-ph/0207118\"&gt;This&lt;/a&gt; is a guide of sorts which teaches computer and mathematically literate students the basics of quantum mechanics with the goal of being able to create quantum algorithms and such. It&amp;#39;s not as hard as you might think, I suggest giving it a read if you&amp;#39;re interested.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qhlqi", "flair_text": null, "created": 1350998530.0, "created_utc": 1350994930.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11wx6a", "children": [], "author": "shogun21", "id": "c6qkltp", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 2, "body": "Even with the advent of quantum computers, we'll **still have traditional silicon-based computers** for quite some time. Mostly because of the costs of creating even a few qubits on a quantum computer.\n\nThe field of computer science is constantly changing as technology grows. To stay marketable, you have to keep up with the latest standards and technologies. However, the fundamental understanding of logic/systems/data-structures/algorithms, will remain.\n\nQuantum computers are **fundamentally different** from traditional computers so all engineers/programs would have to design and use them differently.\n\nThe **von Neumann architecture** is actually quite interesting when it comes to quantum computing. When you have an electron in a super-position between two states, what happens when you observe it? It collapses to a single state. Therein lies the problem of input/output that we cannot read the qubits while they're making calculations, but have to read them to get any value from the computation.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Even with the advent of quantum computers, we&amp;#39;ll &lt;strong&gt;still have traditional silicon-based computers&lt;/strong&gt; for quite some time. Mostly because of the costs of creating even a few qubits on a quantum computer.&lt;/p&gt;\n\n&lt;p&gt;The field of computer science is constantly changing as technology grows. To stay marketable, you have to keep up with the latest standards and technologies. However, the fundamental understanding of logic/systems/data-structures/algorithms, will remain.&lt;/p&gt;\n\n&lt;p&gt;Quantum computers are &lt;strong&gt;fundamentally different&lt;/strong&gt; from traditional computers so all engineers/programs would have to design and use them differently.&lt;/p&gt;\n\n&lt;p&gt;The &lt;strong&gt;von Neumann architecture&lt;/strong&gt; is actually quite interesting when it comes to quantum computing. When you have an electron in a super-position between two states, what happens when you observe it? It collapses to a single state. Therein lies the problem of input/output that we cannot read the qubits while they&amp;#39;re making calculations, but have to read them to get any value from the computation.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qkltp", "flair_text": null, "created": 1351012479.0, "created_utc": 1351008879.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11wx6a", "children": [], "author": "pemungkah", "id": "c6qd7yb", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 3, "body": "Thinking back on the history of computing, I think we're seeing a similar evolution, from small, purpose-built machines toward \"large\" machines that time-share for many users. There hasn't, as far as I know, been a breakthrough on the order of the invention of the stored program in the quantum computing field, nor has there yet been a technological breakthrough on the order of the transistor. We're currently doing the equivalent of building better and better tube-and-relay-driven special purpose machines, so from that technical standpoint, there's really not a lot to teach yet. Possibly looking into potential quantum algorithms (e.g., the kind of stuff Damian Conway has lectured about related to the Quantum::Superpositions module) might be interesting and amusing, but not yet particularly applicable. If you were teaching electrical engineering, it might be moreso. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thinking back on the history of computing, I think we&amp;#39;re seeing a similar evolution, from small, purpose-built machines toward &amp;quot;large&amp;quot; machines that time-share for many users. There hasn&amp;#39;t, as far as I know, been a breakthrough on the order of the invention of the stored program in the quantum computing field, nor has there yet been a technological breakthrough on the order of the transistor. We&amp;#39;re currently doing the equivalent of building better and better tube-and-relay-driven special purpose machines, so from that technical standpoint, there&amp;#39;s really not a lot to teach yet. Possibly looking into potential quantum algorithms (e.g., the kind of stuff Damian Conway has lectured about related to the Quantum::Superpositions module) might be interesting and amusing, but not yet particularly applicable. If you were teaching electrical engineering, it might be moreso. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qd7yb", "flair_text": null, "created": 1350967735.0, "created_utc": 1350964135.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11wx6a", "children": [], "author": "b0b0b0b", "id": "c6qdtm3", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 2, "body": "The von Neumann model hasn't held for over 10 years, considering superscalar architectures and, e.g., cache oblivious algorithms.\n\nAFAICT, D-Wave will turn out to have been a slimy curiosity, but I wouldn't let that detract from the beauty of quantum computation / information theory.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The von Neumann model hasn&amp;#39;t held for over 10 years, considering superscalar architectures and, e.g., cache oblivious algorithms.&lt;/p&gt;\n\n&lt;p&gt;AFAICT, D-Wave will turn out to have been a slimy curiosity, but I wouldn&amp;#39;t let that detract from the beauty of quantum computation / information theory.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qdtm3", "flair_text": null, "created": 1350970014.0, "created_utc": 1350966414.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 12, "link_id": "t3_11wx6a", "children": [], "author": "mynameisomar", "id": "c6qay12", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 7, "body": "People always say, \"Moore's Law *has* to break soon, [valid reason that is seemingly convincing]!\" They said it 20 years ago, they said it 10 years ago, they're saying it now about atom-sized transistors (where quantum physics takes over). But that's the magic of Moore's Law. Somewhere, about a year after the last improvement, some guy is going to formulate a solution and make it 2x better than the last guy.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;People always say, &amp;quot;Moore&amp;#39;s Law &lt;em&gt;has&lt;/em&gt; to break soon, [valid reason that is seemingly convincing]!&amp;quot; They said it 20 years ago, they said it 10 years ago, they&amp;#39;re saying it now about atom-sized transistors (where quantum physics takes over). But that&amp;#39;s the magic of Moore&amp;#39;s Law. Somewhere, about a year after the last improvement, some guy is going to formulate a solution and make it 2x better than the last guy.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qay12", "flair_text": null, "created": 1350960406.0, "created_utc": 1350956806.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11wx6a", "children": [], "author": "Fuco1337", "id": "c6qgm3n", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 2, "body": "Quantum computers is the same as studying Alternating Turing machines or computations with oracle etc. It is just another model of computation. Nothing changes.\n\nITT: People who have no idea what \"Quantum\" is. Go read a physics book first, dangit.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quantum computers is the same as studying Alternating Turing machines or computations with oracle etc. It is just another model of computation. Nothing changes.&lt;/p&gt;\n\n&lt;p&gt;ITT: People who have no idea what &amp;quot;Quantum&amp;quot; is. Go read a physics book first, dangit.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qgm3n", "flair_text": null, "created": 1350989159.0, "created_utc": 1350985559.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11wx6a", "children": [], "author": "MrLogandude", "id": "c6qkstc", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 2, "body": "As a senior in High School about to go to College for CS, how much will QC effect me?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As a senior in High School about to go to College for CS, how much will QC effect me?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qkstc", "flair_text": null, "created": 1351013216.0, "created_utc": 1351009616.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11wx6a", "children": [], "author": "chikithegreat", "id": "c6qm570", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 2, "body": "Rather than everything being black and white, it would now be black , blite, and white.\n\nevery algorithm would need to be rewritten, from scratch", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rather than everything being black and white, it would now be black , blite, and white.&lt;/p&gt;\n\n&lt;p&gt;every algorithm would need to be rewritten, from scratch&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qm570", "flair_text": null, "created": 1351018249.0, "created_utc": 1351014649.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_11wx6a", "children": [], "author": "FearMonstro", "id": "c6qcepg", "parent_id": "t3_11wx6a", "score": 0, "approved_by": null, "upvotes": 4, "body": "Computational theory is the same irrespective of the devices that implement the computations. Computational theory predates the computer age, in fact. But at a less fundamental level, I think CS would change dramatically.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Computational theory is the same irrespective of the devices that implement the computations. Computational theory predates the computer age, in fact. But at a less fundamental level, I think CS would change dramatically.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qcepg", "flair_text": null, "created": 1350964950.0, "created_utc": 1350961350.0, "num_reports": null}], "score": 64, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 95, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11wx6a/your_thoughts_on_how_quantum_computing_will/", "has_more_comments": false, "name": "t3_11wx6a", "created": 1350955703.0, "url": "http://www.reddit.com/r/compsci/comments/11wx6a/your_thoughts_on_how_quantum_computing_will/", "author_flair_text": null, "author": "bumchikici", "created_utc": 1350952103.0, "link_flair_text": null, "media": null, "num_reports": null}, "311": {"domain": "en.wikipedia.org", "link_flair_class": null, "banned_by": null, "downvotes": 50, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11u9cm", "clicked": false, "title": "Billion Laughs", "num_comments": 22, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11u9cm", "children": [], "author": "dahlukeh", "id": "c6pn93u", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 35, "body": "I've seen a similar attack on sites which allow you to compile code, where you submit C code with an exponential amount of #defines:\n#define A B B\n#define B C C\n...\n#define Z printf (\"0\");\nA lot of sites forget to cap the compile time...", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen a similar attack on sites which allow you to compile code, where you submit C code with an exponential amount of #defines:&lt;/p&gt;\n\n&lt;h1&gt;define A B B&lt;/h1&gt;\n\n&lt;h1&gt;define B C C&lt;/h1&gt;\n\n&lt;p&gt;...&lt;/p&gt;\n\n&lt;h1&gt;define Z printf (&amp;quot;0&amp;quot;);&lt;/h1&gt;\n\n&lt;p&gt;A lot of sites forget to cap the compile time...&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pn93u", "flair_text": null, "created": 1350828290.0, "created_utc": 1350824690.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11u9cm", "children": [], "author": "[deleted]", "id": "c6pn6ze", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 30, "body": "Interesting, tangentially related fact: Due to the fact that browsers accept gzipped content, you can send a zip bomb as a response* to a HTTP request.", "edited": 1350849190.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting, tangentially related fact: Due to the fact that browsers accept gzipped content, you can send a zip bomb as a response* to a HTTP request.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pn6ze", "flair_text": null, "created": 1350827750.0, "created_utc": 1350824150.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11u9cm", "children": [], "author": "mynameisomar", "id": "c6prcb0", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 9, "body": "Reminds me of fork-bombing. From now on whenever I fork bomb a friend's computer I promise to use \"lol\" instead of ':'.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Reminds me of fork-bombing. From now on whenever I fork bomb a friend&amp;#39;s computer I promise to use &amp;quot;lol&amp;quot; instead of &amp;#39;:&amp;#39;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6prcb0", "flair_text": null, "created": 1350848839.0, "created_utc": 1350845239.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11u9cm", "children": [], "author": "ash5", "id": "c6pmpcm", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 10, "body": "(via https://news.ycombinator.com/item?id=4677364 )", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(via &lt;a href=\"https://news.ycombinator.com/item?id=4677364\"&gt;https://news.ycombinator.com/item?id=4677364&lt;/a&gt; )&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pmpcm", "flair_text": null, "created": 1350822145.0, "created_utc": 1350818545.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11u9cm", "children": [], "author": "SanityInAnarchy", "id": "c6prx9n", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 9, "body": "I wonder how many parsers will catch a circular entity reference?\n\n    &lt;?xml version=\"1.0\"?&gt;\n    &lt;!DOCTYPE lolz [\n     &lt;!ENTITY lol1 \"&amp;lol2;&amp;lol2;\"&gt;\n     &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;\"&gt;\n    ]&gt;\n    &lt;lolz&gt;&amp;lol1;&lt;/lolz&gt;\n\nWill that be an error, or will it be an infinitely large document?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wonder how many parsers will catch a circular entity reference?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;\n&amp;lt;!DOCTYPE lolz [\n &amp;lt;!ENTITY lol1 &amp;quot;&amp;amp;lol2;&amp;amp;lol2;&amp;quot;&amp;gt;\n &amp;lt;!ENTITY lol2 &amp;quot;&amp;amp;lol1;&amp;amp;lol1;&amp;quot;&amp;gt;\n]&amp;gt;\n&amp;lt;lolz&amp;gt;&amp;amp;lol1;&amp;lt;/lolz&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will that be an error, or will it be an infinitely large document?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6prx9n", "flair_text": null, "created": 1350851083.0, "created_utc": 1350847483.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11u9cm", "children": [], "author": "PANCAKETWAT14", "id": "c6q2ww2", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 2, "body": "I've recently had to purposefully expose this vulnerability for a training application.\n\nIt's actually very difficult to be open to this nowadays. The only way I found to do it was using PHP's LibXML parser with the LIBXML_PARSEHUGE flag set. Otherwise it gives a fatal error mentioning the recursion. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve recently had to purposefully expose this vulnerability for a training application.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s actually very difficult to be open to this nowadays. The only way I found to do it was using PHP&amp;#39;s LibXML parser with the LIBXML_PARSEHUGE flag set. Otherwise it gives a fatal error mentioning the recursion. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6q2ww2", "flair_text": null, "created": 1350906785.0, "created_utc": 1350903185.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11u9cm", "children": [], "author": "dogfunky", "id": "c6pvxe0", "parent_id": "t3_11u9cm", "score": 0, "approved_by": null, "upvotes": 4, "body": "lol", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;lol&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pvxe0", "flair_text": null, "created": 1350867665.0, "created_utc": 1350864065.0, "num_reports": null}], "score": 206, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 256, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11u9cm/billion_laughs/", "has_more_comments": false, "name": "t3_11u9cm", "created": 1350822134.0, "url": "http://en.wikipedia.org/wiki/Billion_laughs", "author_flair_text": null, "author": "ash5", "created_utc": 1350818534.0, "link_flair_text": null, "media": null, "num_reports": null}, "312": {"domain": "hiiamchris.com", "link_flair_class": null, "banned_by": null, "downvotes": 5, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11uz6o", "clicked": false, "title": "A graph classification strategy: Applied to subreddits. ", "num_comments": 4, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11uz6o", "children": [], "author": "JD557", "id": "c6qhayt", "parent_id": "t3_11uz6o", "score": 0, "approved_by": null, "upvotes": 1, "body": "Interesting stuff.\n\nMost of the data seems correct, althought there are some weird relations in there that might not represent a majority of users (pokemon&lt;-&gt;drugs, ladyboners&lt;-&gt;Christianity...).\n\nI'll be waiting for the results on the larger dataset. It's a shame though that arbor.js doesn't work that well.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting stuff.&lt;/p&gt;\n\n&lt;p&gt;Most of the data seems correct, althought there are some weird relations in there that might not represent a majority of users (pokemon&amp;lt;-&amp;gt;drugs, ladyboners&amp;lt;-&amp;gt;Christianity...).&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll be waiting for the results on the larger dataset. It&amp;#39;s a shame though that arbor.js doesn&amp;#39;t work that well.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6qhayt", "flair_text": null, "created": 1350996172.0, "created_utc": 1350992572.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11uz6o", "children": [], "author": "guiraldelli", "id": "c6r2ysk", "parent_id": "t3_11uz6o", "score": 0, "approved_by": null, "upvotes": 1, "body": "I thought the result very impressive, although [JD557](http://www.reddit.com/r/compsci/comments/11uz6o/a_graph_classification_strategy_applied_to/c6qhayt) has highlighted there are some weird relations.\n\nI would like to see a bechmark against other classification strategies, such as [K-Means](http://en.wikipedia.org/wiki/K-means_clustering).\n\nConcerning the visualization, arbor.js is fairly bad for large data (as in the example): that would be nice if other visualization formats (as a matrix or plain text file) were available.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I thought the result very impressive, although &lt;a href=\"http://www.reddit.com/r/compsci/comments/11uz6o/a_graph_classification_strategy_applied_to/c6qhayt\"&gt;JD557&lt;/a&gt; has highlighted there are some weird relations.&lt;/p&gt;\n\n&lt;p&gt;I would like to see a bechmark against other classification strategies, such as &lt;a href=\"http://en.wikipedia.org/wiki/K-means_clustering\"&gt;K-Means&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Concerning the visualization, arbor.js is fairly bad for large data (as in the example): that would be nice if other visualization formats (as a matrix or plain text file) were available.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6r2ysk", "flair_text": null, "created": 1351097193.0, "created_utc": 1351093593.0, "num_reports": null}], "score": 2, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 7, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11uz6o/a_graph_classification_strategy_applied_to/", "has_more_comments": false, "name": "t3_11uz6o", "created": 1350856385.0, "url": "http://www.hiiamchris.com/wordpress/?p=76", "author_flair_text": null, "author": "rozap", "created_utc": 1350852785.0, "link_flair_text": null, "media": null, "num_reports": null}, "313": {"domain": "eros-os.org", "link_flair_class": null, "banned_by": null, "downvotes": 0, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11ud8b", "clicked": false, "title": "Comparing ACLs and Capabilities", "num_comments": 0, "comments": [], "score": 6, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 6, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11ud8b/comparing_acls_and_capabilities/", "has_more_comments": false, "name": "t3_11ud8b", "created": 1350831025.0, "url": "http://www.eros-os.org/essays/ACLSvCaps.html", "author_flair_text": null, "author": "andreasw", "created_utc": 1350827425.0, "link_flair_text": null, "media": null, "num_reports": null}, "314": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 2, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am taking a lambda calculus class and am a linguistics grad student not a comp sci grad student.  I have kept up with the class for the most part until we reached the typing section.  I understand how to do the typing derivations because it is essentially pattern matching with the type assignment rules.  What I cannot seem to understand is how to assign a type to a particular term T.  &lt;/p&gt;\n\n&lt;p&gt;For example with the Church encoded 2: \\x.\\y.x(xy) the type (I&amp;#39;m pretty sure) is (b1 -&amp;gt; b2) -&amp;gt; (b1 -&amp;gt; b2).&lt;/p&gt;\n\n&lt;p&gt;How can you know the type just from looking at the term?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am taking a lambda calculus class and am a linguistics grad student not a comp sci grad student.  I have kept up with the class for the most part until we reached the typing section.  I understand how to do the typing derivations because it is essentially pattern matching with the type assignment rules.  What I cannot seem to understand is how to assign a type to a particular term T.  \n\nFor example with the Church encoded 2: \\x.\\y.x(xy) the type (I'm pretty sure) is (b1 -&gt; b2) -&gt; (b1 -&gt; b2).\n\nHow can you know the type just from looking at the term?", "saved": false, "id": "11uksn", "clicked": false, "title": "Help with typing lambda terms", "num_comments": 5, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11uksn", "children": [], "author": "tailcalled", "id": "c6pprzo", "parent_id": "t3_11uksn", "score": 0, "approved_by": null, "upvotes": 5, "body": "How to do type inference manually:\n\n    \\f. \\x. f (f x)\nWe will start out by adding dummy types to every expression:\n\n    \\f:a. \\x:b. f (f x : c) : d\n\nWe look at every part, starting at this:\n\n    (f x : c)\n\nThis tells us at if we give `f` a `b`, then we will get a `c`, in other words, `f : b -&gt; c`. Since `f : a` and that there is no subtyping in simply typed lambda calculus, we can set `a = b -&gt; c`. Then we end up with\n\n    \\f:b -&gt; c. \\x:b. f (f x : c) : d\n\nNext, see that we also give `f` a `c`:\n\n    f (f x : b)\n\n This means that `b = c`:\n\n    \\f:b -&gt; b. \\x:b. f (f x : b) : d\n\nLastly, observe that `f` returns a `d`:\n\n    f (f x : b) : d\n\nSince we already know that `f : b -&gt; b`, `d = b`.\n\n    \\f:b -&gt; b. \\x:b. f (f x : b) : b\n\nIn other words, the overall type is\n\n    (\\f:b -&gt; b. \\x:b. f (f x : b) : b) : (b -&gt; b) -&gt; (b -&gt; b)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How to do type inference manually:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\f. \\x. f (f x)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We will start out by adding dummy types to every expression:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\f:a. \\x:b. f (f x : c) : d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We look at every part, starting at this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(f x : c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This tells us at if we give &lt;code&gt;f&lt;/code&gt; a &lt;code&gt;b&lt;/code&gt;, then we will get a &lt;code&gt;c&lt;/code&gt;, in other words, &lt;code&gt;f : b -&amp;gt; c&lt;/code&gt;. Since &lt;code&gt;f : a&lt;/code&gt; and that there is no subtyping in simply typed lambda calculus, we can set &lt;code&gt;a = b -&amp;gt; c&lt;/code&gt;. Then we end up with&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\f:b -&amp;gt; c. \\x:b. f (f x : c) : d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Next, see that we also give &lt;code&gt;f&lt;/code&gt; a &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f (f x : b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means that &lt;code&gt;b = c&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\f:b -&amp;gt; b. \\x:b. f (f x : b) : d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lastly, observe that &lt;code&gt;f&lt;/code&gt; returns a &lt;code&gt;d&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f (f x : b) : d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since we already know that &lt;code&gt;f : b -&amp;gt; b&lt;/code&gt;, &lt;code&gt;d = b&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\f:b -&amp;gt; b. \\x:b. f (f x : b) : b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In other words, the overall type is&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(\\f:b -&amp;gt; b. \\x:b. f (f x : b) : b) : (b -&amp;gt; b) -&amp;gt; (b -&amp;gt; b)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pprzo", "flair_text": null, "created": 1350842638.0, "created_utc": 1350839038.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11uksn", "children": [], "author": "kbradero", "id": "c6q9tvh", "parent_id": "t3_11uksn", "score": 0, "approved_by": null, "upvotes": 1, "body": "hi!, is there any book you can refer/point out ?\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;hi!, is there any book you can refer/point out ?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6q9tvh", "flair_text": null, "created": 1350956948.0, "created_utc": 1350953348.0, "num_reports": null}], "score": 1, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 3, "hidden": false, "thumbnail": "", "edited": 1350842025.0, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11uksn/help_with_typing_lambda_terms/", "has_more_comments": false, "name": "t3_11uksn", "created": 1350841532.0, "url": "http://www.reddit.com/r/compsci/comments/11uksn/help_with_typing_lambda_terms/", "author_flair_text": null, "author": "Dougiejim", "created_utc": 1350837932.0, "link_flair_text": null, "media": null, "num_reports": null}, "315": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 16, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Extensionality\"&gt;Extensionality&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: Okay, biggest class so far is &lt;a href=\"http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/\"&gt;functions from a compact domain to a discrete codomain&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[Extensionality](http://en.wikipedia.org/wiki/Extensionality)\n\nEdit: Okay, biggest class so far is [functions from a compact domain to a discrete codomain](http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/).", "saved": false, "id": "11sr0x", "clicked": false, "title": "What is the biggest class of programs for which extensional equality is decidable?", "num_comments": 26, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11sr0x", "children": [], "author": "roconnor", "id": "c6pb5x8", "parent_id": "t3_11sr0x", "score": 0, "approved_by": null, "upvotes": 11, "body": "If we consider programs as black box functions, then\n\n(a) every function from a finite domain to a discrete codomain has decidable equality by simply enumerating the finite domain and comparing the output on each input.\n\n(b) more generally, [every function from from a compact domain to a discrete codomain has decidable equality](http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/).\n\nI'm not aware of any broader class.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If we consider programs as black box functions, then&lt;/p&gt;\n\n&lt;p&gt;(a) every function from a finite domain to a discrete codomain has decidable equality by simply enumerating the finite domain and comparing the output on each input.&lt;/p&gt;\n\n&lt;p&gt;(b) more generally, &lt;a href=\"http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/\"&gt;every function from from a compact domain to a discrete codomain has decidable equality&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not aware of any broader class.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pb5x8", "flair_text": null, "created": 1350757606.0, "created_utc": 1350754006.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11sr0x", "children": [], "author": "Fuco1337", "id": "c6p99su", "parent_id": "t3_11sr0x", "score": 0, "approved_by": null, "upvotes": 8, "body": "Regular languages, by construction of minimal automaton/transition monoid.\n\nFor CFL, even the problem of deciding whether a language is trivial is impossible.", "edited": 1350744562.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Regular languages, by construction of minimal automaton/transition monoid.&lt;/p&gt;\n\n&lt;p&gt;For CFL, even the problem of deciding whether a language is trivial is impossible.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p99su", "flair_text": null, "created": 1350747846.0, "created_utc": 1350744246.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11sr0x", "children": [], "author": "bo1024", "id": "c6pfx2x", "parent_id": "t3_11sr0x", "score": 0, "approved_by": null, "upvotes": 1, "body": "Hmm. I assume you are defining the problem as: take as input a description of two Turing Machines, and accept if they always have the same behavior on the same inputs, or reject otherwise. Right?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hmm. I assume you are defining the problem as: take as input a description of two Turing Machines, and accept if they always have the same behavior on the same inputs, or reject otherwise. Right?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6pfx2x", "flair_text": null, "created": 1350779433.0, "created_utc": 1350775833.0, "num_reports": null}], "score": 23, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 39, "hidden": false, "thumbnail": "", "edited": 1350838035.0, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11sr0x/what_is_the_biggest_class_of_programs_for_which/", "has_more_comments": false, "name": "t3_11sr0x", "created": 1350747358.0, "url": "http://www.reddit.com/r/compsci/comments/11sr0x/what_is_the_biggest_class_of_programs_for_which/", "author_flair_text": null, "author": "tailcalled", "created_utc": 1350743758.0, "link_flair_text": null, "media": null, "num_reports": null}, "316": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 16, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t understand much of the benefits of using either a closure as opposed to using a class in languages that support both.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll use PHP as an example since that&amp;#39;s the language I&amp;#39;m using most these days.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$two = 2;\n$addFromTwo = function ($number) use ($two) {\n    return $two + $number;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the case of the closure, you have access to a variable, in this case $two, in the scope outside of the closure. It&amp;#39;s mutable. After the closure is created, I could alter it&amp;#39;s behavior by doing something like...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$two = 3;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With a class, I can do&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Number {\n    public $number;\n    public function __construct($number) {\n        $this-&amp;gt;number = $number;\n    }\n    public function add($otherNumber) {\n       return $this-&amp;gt;number + $otherNumber;\n    }\n}\n$number = new Number(2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the class instance, I can do the following to change the behavior of the add method...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$number-&amp;gt;number = 3;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Classes add the benefit of letting me group functional mutations to a set of data, and letting me create several interfaces to a set of data. I can do the same thing with closures, but not in a way that expresses the enclosed data quite as well. Closures, in the meantime, require less written code than a class.&lt;/p&gt;\n\n&lt;p&gt;Could someone help me understand which structure is better for different scenarios and why?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I don't understand much of the benefits of using either a closure as opposed to using a class in languages that support both.\n\nI'll use PHP as an example since that's the language I'm using most these days.\n\n    $two = 2;\n    $addFromTwo = function ($number) use ($two) {\n        return $two + $number;\n    };\n\nIn the case of the closure, you have access to a variable, in this case $two, in the scope outside of the closure. It's mutable. After the closure is created, I could alter it's behavior by doing something like...\n\n    $two = 3;\n\nWith a class, I can do\n\n    class Number {\n        public $number;\n        public function __construct($number) {\n            $this-&gt;number = $number;\n        }\n        public function add($otherNumber) {\n           return $this-&gt;number + $otherNumber;\n        }\n    }\n    $number = new Number(2);\n    \nIn the class instance, I can do the following to change the behavior of the add method...\n\n    $number-&gt;number = 3;\n\nClasses add the benefit of letting me group functional mutations to a set of data, and letting me create several interfaces to a set of data. I can do the same thing with closures, but not in a way that expresses the enclosed data quite as well. Closures, in the meantime, require less written code than a class.\n\nCould someone help me understand which structure is better for different scenarios and why?", "saved": false, "id": "11rg83", "clicked": false, "title": "closures vs classes?", "num_comments": 34, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 6, "link_id": "t3_11rg83", "children": [], "author": "SanityInAnarchy", "id": "c6p0dpp", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 38, "body": "Mostly convenience, though likely not related to your example. Compare:\n\nJava (at least, Java 7) does not have closures. To take an extremely simple example, here is how to sort a List in Java:\n\n    import java.util.*; // Don't do this, let Eclipse manage imports, but\n                        // this is nice for a demo\n\n    class Test {\n        public static void main(String[] args) {\n            List&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(new String[]{\"ALPACA\",\"syntax\",\"astrology\",\"LLAMA\"}));\n            Collections.sort(list);\n            System.out.println(list);\n        }   \n    }   \n\nIf you run this, it generates the following:\n\n    [ALPACA, LLAMA, astrology, syntax]\n\nThat's probably not what you wanted. It's sorting by some absolute value of the character, so capital letters are always before lowercase. You probably wanted a case-insensitive sort. You could do something like this first:\n\n    for(int i=0; i&lt;list.size(); ++i) {\n        list.set(i, list.get(i).toLowerCase());\n    }\n\nBut this probably still isn't what you want:\n\n    [alpaca, astrology, llama, syntax]\n\nYou wanted to preserve the case they had, but sort them in a case-insensitive way. In other words, you wanted to sort them some other way than the default.\n\nI'll leave aside a few other, increasingly more tortured possibilities. The obvious thing you want is to provide some additional *behavior* that a sorter could use.\n\nYou could, I suppose, use inheritance to do this. It's not hard to imagine -- create a class with a sort() method and a compare() method, then override the compare() method in a subclass, maybe a CaseInsensitiveSorter. But that violates the [open/closed principle](http://en.wikipedia.org/wiki/Open/closed_principle), so I won't go into the details of that. (Besides, it would be a great exercise for the reader -- implement a class that does Quicksort, and let it override some method so it sorts by some other criterion.)\n\nThe solution the Java Collections library chose is to let you pass in an object called a Comparator, which lets you compare things. [Here is the interface for Comparator](http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html):\n\n    public interface Comparator&lt;T&gt; {\n        public int compare(T left, T right);\n    }\n\nYou can override this, so you'd probably do this:\n\n    public class CaseInsensitiveComparator implements Comparator&lt;String&gt; {\n        @Override\n        public int compare(String left, String right) {\n            return left.toLowerCase().compareTo(right.toLowerCase());\n        }\n    }\n\nHere, I'm using the fact that String has a compareTo method that's more or less the same idea. Basically, Java doesn't have operator overloading, so instead of being able to test things like this:\n\n    a &lt; b\n\nUnless it's a primitive numeric type, you can do this to get the same result:\n\n    a.compareTo(b) &lt; 0\n\nSimilarly, a==b becomes a.compareTo(b) == 0, and so on. If you have a comparator (call it c), you would instead do:\n\n    c.compare(a, b) &lt; 0\n\nI probably haven't done the best job explaining this part, so let me know if this is confusing.\n\nSo anyway, back to our example. Java actually doesn't make this quite as painful as all that. There are *anonymous classes,* so I can just make a brand new object with a proper compare() method on the spot. So here's my complete insensitive sort example:\n\n    import java.util.*;\n    \n    class Test {\n        public static void main(String[] args) {\n            List&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(new String[]{\"ALPACA\", \"syntax\",\"astrology\",\"LLAMA\"}));\n            Collections.sort(list, new Comparator&lt;String&gt;(){\n                @Override\n                public int compare(String left, String right) {\n                    return left.toLowerCase().compareTo(right.toLowerCase());\n                }\n            });\n            System.out.println(list);\n        }\n    }\n\nThis outputs what we want:\n\n    [ALPACA, astrology, LLAMA, syntax]\n\nThat's starting to look more like a closure. Really, it's a functor -- a function object -- really, all I want to do is pass a function pointer to Collections.sort(), but Java doesn't have function pointers, so instead I'm faking it with an object.\n\nThis example is a bit contrived -- apparently, people want to compare ignoring case often enough that not only is there also a compareToIgnoreCase() method on string, but String.CASE_INSENSITIVE_ORDER is a comparator that uses it. So I could have written this as:\n\n    Collections.sort(list, String.CASE_INSENSITIVE_ORDER)\n\nStill, I hope you get the idea. This is the kind of thing you have to do if the behavior you want isn't built in somehow.\n\nNow, I don't have Java 8 on my system, and I'm too lazy to fetch it for this example, and I don't trust myself to write good Java 8 from scratch. So instead, here's the same example in some other languages. In JavaScript:\n\n    var list = ['ALPACA','syntax','astrology','LLAMA'];\n    list.sort(function(a,b) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n        if (a &lt; b) {\n            return -1;\n        } else if (a &gt; b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    alert(list);\n\nThis pops up a window that says \"ALPACA,astrology,LLAMA,syntax\". The comparison function is a bit longer, but that may be just because I don't know offhand of any functions to return that magical -1, 0, or 1 that I need here.\n\nStill, I contend that it's more readable. That extra cruft of an interface and a whole extra class that exists only to pass in a function is gone. I'm just passing a function.\n\nIn Ruby:\n\n    list = ['ALPACA','syntax','astrology','LLAMA']\n    list.sort! {|a,b| a.downcase &lt;=&gt; b.downcase}\n    p list\n\nAnd the output:\n\n    [\"ALPACA\", \"astrology\", \"LLAMA\", \"syntax\"]\n\nBut notice, that sort method call is *ridiculously* better than the Java version -- it's even a readable one-liner! I also avoided some rubyisms, to make it a bit more comparable, but we can do better than that:\n\n    list.sort_by! {|x| x.downcase}\n\nAnd since we're only calling a single method there, there's another shortcut that's definitely cheating:\n\n    list.sort_by!(&amp;:downcase)\n\nIdiomatic Ruby would probably avoid the bang method (by convention, in Ruby, methods that end in bangs (!) are \"dangerous\", and usually modify the object in question). Plus, it's so short already, I'd probably just do this:\n\n    list = ['ALPACA','syntax','astrology','LLAMA']\n    p list.sort_by(&amp;:downcase)\n\nAnyway, this isn't supposed to be about Ruby being better at everything, but while I'm on the subject, Ruby makes closures so easy to write that they've actually solved some *other* problems Java 8 is trying to solve. For example, if you open a file, how do you make sure it's closed? In C++, you'd use a destructor -- whenever the object falls out of scope, the destructor is called, and that closes the file. But in garbage-collected languages, like pretty much all the other languages we've mentioned, you have to make sure to close the file, even if an exception is thrown. In Java, that means you're doing a lot of this:\n\n    try {\n      SomeInputStream input = whatever...\n      do some stuff with input...\n    } finally {\n      input.close();\n    }\n\nSimilar things have to happen for transactions. Try the operation, if there are errors, catch and rollback, otherwise commit.\n\nIn Ruby, those blocks mean you can practically make up control structures. So you can add new sorts of loops, and you can abstract away all that messy exception handling:\n\n    open 'foo.txt' do |file|\n      file.each_line do |line|\n        puts \"Read line: #{line.chomp}\"\n      end\n    end\n\nNot only do you get that clever each_line construct, but the 'open' method promises to handle closing the file for you, even if there are exceptions involved. You can *almost* pretend it's garbage-collected.\n\nOf course, the old way is also in Ruby, because sometimes files don't nest quite so neatly -- you might need to open file a, then file b, then close file a, work with file b some more, and finally close file b. But it works well enough often enough that it still saves me a ton of time.\n\nClosures aren't the only way to solve problems like this. Lisp-style macros are even more powerful when it comes to replacing keywords with user-defined stuff (custom loops and such). I actually like the C++ destructor concept a lot more for resource cleanup (other than memory), I'm just not willing to give up garbage collection to be able to use it.\n\nThe main thing, though, is convenience. You *could* do any of the above in other ways. I even showed you the other ways. But honestly, would you rather write a try/catch block around every file open, or would you rather pass a block to 'open'? Would you rather create a Comparator (even an anonymous one), or would you rather pass a block instead? Which is more readable?\n\nAs for when classes are better: Probably when you actually are conceptually creating an object and maintaining state. Your example is a good one. I could make a counter like this (JS):\n\n    function Counter() {\n      var num = 0;\n      return function() {\n        return (num += 1);\n      };\n    }\n    \n    var x = Counter();\n    x();  # 1\n    x();  # 2\n    ...\n\nAnd that's a neat trick, but if it gets much more complicated than a simple counter or a single variable, it's probably better to just make a class. I tend to use closures more when they fit neatly into the flow of the program, and when I would otherwise just be passing a function pointer that really is just a function pointer.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mostly convenience, though likely not related to your example. Compare:&lt;/p&gt;\n\n&lt;p&gt;Java (at least, Java 7) does not have closures. To take an extremely simple example, here is how to sort a List in Java:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.util.*; // Don&amp;#39;t do this, let Eclipse manage imports, but\n                    // this is nice for a demo\n\nclass Test {\n    public static void main(String[] args) {\n        List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(new String[]{&amp;quot;ALPACA&amp;quot;,&amp;quot;syntax&amp;quot;,&amp;quot;astrology&amp;quot;,&amp;quot;LLAMA&amp;quot;}));\n        Collections.sort(list);\n        System.out.println(list);\n    }   \n}   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you run this, it generates the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[ALPACA, LLAMA, astrology, syntax]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s probably not what you wanted. It&amp;#39;s sorting by some absolute value of the character, so capital letters are always before lowercase. You probably wanted a case-insensitive sort. You could do something like this first:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for(int i=0; i&amp;lt;list.size(); ++i) {\n    list.set(i, list.get(i).toLowerCase());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this probably still isn&amp;#39;t what you want:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[alpaca, astrology, llama, syntax]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You wanted to preserve the case they had, but sort them in a case-insensitive way. In other words, you wanted to sort them some other way than the default.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll leave aside a few other, increasingly more tortured possibilities. The obvious thing you want is to provide some additional &lt;em&gt;behavior&lt;/em&gt; that a sorter could use.&lt;/p&gt;\n\n&lt;p&gt;You could, I suppose, use inheritance to do this. It&amp;#39;s not hard to imagine -- create a class with a sort() method and a compare() method, then override the compare() method in a subclass, maybe a CaseInsensitiveSorter. But that violates the &lt;a href=\"http://en.wikipedia.org/wiki/Open/closed_principle\"&gt;open/closed principle&lt;/a&gt;, so I won&amp;#39;t go into the details of that. (Besides, it would be a great exercise for the reader -- implement a class that does Quicksort, and let it override some method so it sorts by some other criterion.)&lt;/p&gt;\n\n&lt;p&gt;The solution the Java Collections library chose is to let you pass in an object called a Comparator, which lets you compare things. &lt;a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html\"&gt;Here is the interface for Comparator&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public interface Comparator&amp;lt;T&amp;gt; {\n    public int compare(T left, T right);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can override this, so you&amp;#39;d probably do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class CaseInsensitiveComparator implements Comparator&amp;lt;String&amp;gt; {\n    @Override\n    public int compare(String left, String right) {\n        return left.toLowerCase().compareTo(right.toLowerCase());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, I&amp;#39;m using the fact that String has a compareTo method that&amp;#39;s more or less the same idea. Basically, Java doesn&amp;#39;t have operator overloading, so instead of being able to test things like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a &amp;lt; b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unless it&amp;#39;s a primitive numeric type, you can do this to get the same result:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a.compareTo(b) &amp;lt; 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly, a==b becomes a.compareTo(b) == 0, and so on. If you have a comparator (call it c), you would instead do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;c.compare(a, b) &amp;lt; 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I probably haven&amp;#39;t done the best job explaining this part, so let me know if this is confusing.&lt;/p&gt;\n\n&lt;p&gt;So anyway, back to our example. Java actually doesn&amp;#39;t make this quite as painful as all that. There are &lt;em&gt;anonymous classes,&lt;/em&gt; so I can just make a brand new object with a proper compare() method on the spot. So here&amp;#39;s my complete insensitive sort example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.util.*;\n\nclass Test {\n    public static void main(String[] args) {\n        List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(new String[]{&amp;quot;ALPACA&amp;quot;, &amp;quot;syntax&amp;quot;,&amp;quot;astrology&amp;quot;,&amp;quot;LLAMA&amp;quot;}));\n        Collections.sort(list, new Comparator&amp;lt;String&amp;gt;(){\n            @Override\n            public int compare(String left, String right) {\n                return left.toLowerCase().compareTo(right.toLowerCase());\n            }\n        });\n        System.out.println(list);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This outputs what we want:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[ALPACA, astrology, LLAMA, syntax]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s starting to look more like a closure. Really, it&amp;#39;s a functor -- a function object -- really, all I want to do is pass a function pointer to Collections.sort(), but Java doesn&amp;#39;t have function pointers, so instead I&amp;#39;m faking it with an object.&lt;/p&gt;\n\n&lt;p&gt;This example is a bit contrived -- apparently, people want to compare ignoring case often enough that not only is there also a compareToIgnoreCase() method on string, but String.CASE_INSENSITIVE_ORDER is a comparator that uses it. So I could have written this as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Collections.sort(list, String.CASE_INSENSITIVE_ORDER)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Still, I hope you get the idea. This is the kind of thing you have to do if the behavior you want isn&amp;#39;t built in somehow.&lt;/p&gt;\n\n&lt;p&gt;Now, I don&amp;#39;t have Java 8 on my system, and I&amp;#39;m too lazy to fetch it for this example, and I don&amp;#39;t trust myself to write good Java 8 from scratch. So instead, here&amp;#39;s the same example in some other languages. In JavaScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var list = [&amp;#39;ALPACA&amp;#39;,&amp;#39;syntax&amp;#39;,&amp;#39;astrology&amp;#39;,&amp;#39;LLAMA&amp;#39;];\nlist.sort(function(a,b) {\n    a = a.toLowerCase();\n    b = b.toLowerCase();\n    if (a &amp;lt; b) {\n        return -1;\n    } else if (a &amp;gt; b) {\n        return 1;\n    } else {\n        return 0;\n    }\n});\nalert(list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This pops up a window that says &amp;quot;ALPACA,astrology,LLAMA,syntax&amp;quot;. The comparison function is a bit longer, but that may be just because I don&amp;#39;t know offhand of any functions to return that magical -1, 0, or 1 that I need here.&lt;/p&gt;\n\n&lt;p&gt;Still, I contend that it&amp;#39;s more readable. That extra cruft of an interface and a whole extra class that exists only to pass in a function is gone. I&amp;#39;m just passing a function.&lt;/p&gt;\n\n&lt;p&gt;In Ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list = [&amp;#39;ALPACA&amp;#39;,&amp;#39;syntax&amp;#39;,&amp;#39;astrology&amp;#39;,&amp;#39;LLAMA&amp;#39;]\nlist.sort! {|a,b| a.downcase &amp;lt;=&amp;gt; b.downcase}\np list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[&amp;quot;ALPACA&amp;quot;, &amp;quot;astrology&amp;quot;, &amp;quot;LLAMA&amp;quot;, &amp;quot;syntax&amp;quot;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But notice, that sort method call is &lt;em&gt;ridiculously&lt;/em&gt; better than the Java version -- it&amp;#39;s even a readable one-liner! I also avoided some rubyisms, to make it a bit more comparable, but we can do better than that:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list.sort_by! {|x| x.downcase}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And since we&amp;#39;re only calling a single method there, there&amp;#39;s another shortcut that&amp;#39;s definitely cheating:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list.sort_by!(&amp;amp;:downcase)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Idiomatic Ruby would probably avoid the bang method (by convention, in Ruby, methods that end in bangs (!) are &amp;quot;dangerous&amp;quot;, and usually modify the object in question). Plus, it&amp;#39;s so short already, I&amp;#39;d probably just do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;list = [&amp;#39;ALPACA&amp;#39;,&amp;#39;syntax&amp;#39;,&amp;#39;astrology&amp;#39;,&amp;#39;LLAMA&amp;#39;]\np list.sort_by(&amp;amp;:downcase)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Anyway, this isn&amp;#39;t supposed to be about Ruby being better at everything, but while I&amp;#39;m on the subject, Ruby makes closures so easy to write that they&amp;#39;ve actually solved some &lt;em&gt;other&lt;/em&gt; problems Java 8 is trying to solve. For example, if you open a file, how do you make sure it&amp;#39;s closed? In C++, you&amp;#39;d use a destructor -- whenever the object falls out of scope, the destructor is called, and that closes the file. But in garbage-collected languages, like pretty much all the other languages we&amp;#39;ve mentioned, you have to make sure to close the file, even if an exception is thrown. In Java, that means you&amp;#39;re doing a lot of this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;try {\n  SomeInputStream input = whatever...\n  do some stuff with input...\n} finally {\n  input.close();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similar things have to happen for transactions. Try the operation, if there are errors, catch and rollback, otherwise commit.&lt;/p&gt;\n\n&lt;p&gt;In Ruby, those blocks mean you can practically make up control structures. So you can add new sorts of loops, and you can abstract away all that messy exception handling:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;open &amp;#39;foo.txt&amp;#39; do |file|\n  file.each_line do |line|\n    puts &amp;quot;Read line: #{line.chomp}&amp;quot;\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not only do you get that clever each_line construct, but the &amp;#39;open&amp;#39; method promises to handle closing the file for you, even if there are exceptions involved. You can &lt;em&gt;almost&lt;/em&gt; pretend it&amp;#39;s garbage-collected.&lt;/p&gt;\n\n&lt;p&gt;Of course, the old way is also in Ruby, because sometimes files don&amp;#39;t nest quite so neatly -- you might need to open file a, then file b, then close file a, work with file b some more, and finally close file b. But it works well enough often enough that it still saves me a ton of time.&lt;/p&gt;\n\n&lt;p&gt;Closures aren&amp;#39;t the only way to solve problems like this. Lisp-style macros are even more powerful when it comes to replacing keywords with user-defined stuff (custom loops and such). I actually like the C++ destructor concept a lot more for resource cleanup (other than memory), I&amp;#39;m just not willing to give up garbage collection to be able to use it.&lt;/p&gt;\n\n&lt;p&gt;The main thing, though, is convenience. You &lt;em&gt;could&lt;/em&gt; do any of the above in other ways. I even showed you the other ways. But honestly, would you rather write a try/catch block around every file open, or would you rather pass a block to &amp;#39;open&amp;#39;? Would you rather create a Comparator (even an anonymous one), or would you rather pass a block instead? Which is more readable?&lt;/p&gt;\n\n&lt;p&gt;As for when classes are better: Probably when you actually are conceptually creating an object and maintaining state. Your example is a good one. I could make a counter like this (JS):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function Counter() {\n  var num = 0;\n  return function() {\n    return (num += 1);\n  };\n}\n\nvar x = Counter();\nx();  # 1\nx();  # 2\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And that&amp;#39;s a neat trick, but if it gets much more complicated than a simple counter or a single variable, it&amp;#39;s probably better to just make a class. I tend to use closures more when they fit neatly into the flow of the program, and when I would otherwise just be passing a function pointer that really is just a function pointer.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p0dpp", "flair_text": null, "created": 1350687401.0, "created_utc": 1350683801.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 11, "link_id": "t3_11rg83", "children": [], "author": "rer0tsaz", "id": "c6p0m2d", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 66, "body": "The venerable master Qc Na was walking with his student, Anton. Hoping to prompt the master into a discussion, Anton said \u201cMaster, I have heard that objects are a very good thing \u2013 is this true?\u201d Qc Na looked pityingly at his student and replied, \u201cFoolish pupil \u2013 objects are merely a poor man\u2019s closures.\u201d\n\nChastised, Anton took his leave from his master and returned to his cell, intent on studying closures. He carefully read the entire \u201cLambda: The Ultimate\u2026\u201d series of papers and its cousins, and implemented a small Scheme interpreter with a closure-based object system. He learned much, and looked forward to informing his master of his progress.\n\nOn his next walk with Qc Na, Anton attempted to impress his master by saying \u201cMaster, I have diligently studied the matter, and now understand that objects are truly a poor man\u2019s closures.\u201d Qc Na responded by hitting Anton with his stick, saying \u201cWhen will you learn? Closures are a poor man\u2019s object.\u201d At that moment, Anton became enlightened.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The venerable master Qc Na was walking with his student, Anton. Hoping to prompt the master into a discussion, Anton said \u201cMaster, I have heard that objects are a very good thing \u2013 is this true?\u201d Qc Na looked pityingly at his student and replied, \u201cFoolish pupil \u2013 objects are merely a poor man\u2019s closures.\u201d&lt;/p&gt;\n\n&lt;p&gt;Chastised, Anton took his leave from his master and returned to his cell, intent on studying closures. He carefully read the entire \u201cLambda: The Ultimate\u2026\u201d series of papers and its cousins, and implemented a small Scheme interpreter with a closure-based object system. He learned much, and looked forward to informing his master of his progress.&lt;/p&gt;\n\n&lt;p&gt;On his next walk with Qc Na, Anton attempted to impress his master by saying \u201cMaster, I have diligently studied the matter, and now understand that objects are truly a poor man\u2019s closures.\u201d Qc Na responded by hitting Anton with his stick, saying \u201cWhen will you learn? Closures are a poor man\u2019s object.\u201d At that moment, Anton became enlightened.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p0m2d", "flair_text": null, "created": 1350688401.0, "created_utc": 1350684801.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11rg83", "children": [], "author": "teb311", "id": "c6oyc6k", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 19, "body": "[Relevant reading](http://www.ibm.com/developerworks/java/library/j-jtp04247/index.html)\n\nOne example: with closures and first class functions, you can actually build a function up at runtime, without knowing the variables at compile time. This means you can do cool things like memoize arbitrary functions *at runtime*. \n\nTo do this with an object you'd need to know something about the structure of the function you're going to memoize. Not so with closures; we capture the environment when we close over the function.\n\nBut that's an esoteric example. The real reason you'd want to use a closure is because some things are just a lot easier to do with them. It takes a functional mindset to understand when and why closures are useful. People who start with OOP languages often miss the power of closures, because we get used to the idea of returning 'objects or literals' not returning blocks of executable code as data. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.ibm.com/developerworks/java/library/j-jtp04247/index.html\"&gt;Relevant reading&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;One example: with closures and first class functions, you can actually build a function up at runtime, without knowing the variables at compile time. This means you can do cool things like memoize arbitrary functions &lt;em&gt;at runtime&lt;/em&gt;. &lt;/p&gt;\n\n&lt;p&gt;To do this with an object you&amp;#39;d need to know something about the structure of the function you&amp;#39;re going to memoize. Not so with closures; we capture the environment when we close over the function.&lt;/p&gt;\n\n&lt;p&gt;But that&amp;#39;s an esoteric example. The real reason you&amp;#39;d want to use a closure is because some things are just a lot easier to do with them. It takes a functional mindset to understand when and why closures are useful. People who start with OOP languages often miss the power of closures, because we get used to the idea of returning &amp;#39;objects or literals&amp;#39; not returning blocks of executable code as data. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oyc6k", "flair_text": null, "created": 1350679669.0, "created_utc": 1350676069.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11rg83", "children": [], "author": "lordlicorice", "id": "c6p6anq", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 7, "body": "&gt; function ($number) use ($two)  \n&gt; After the closure is created, I could alter it's behavior by doing something like...\n\nThis is actually called [dynamic scoping](https://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping) and it's *evil*.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;function ($number) use ($two)&lt;br/&gt;\nAfter the closure is created, I could alter it&amp;#39;s behavior by doing something like...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is actually called &lt;a href=\"https://en.wikipedia.org/wiki/Scope_%28computer_science%29#Dynamic_scoping\"&gt;dynamic scoping&lt;/a&gt; and it&amp;#39;s &lt;em&gt;evil&lt;/em&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p6anq", "flair_text": null, "created": 1350717279.0, "created_utc": 1350713679.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11rg83", "children": [], "author": "kqr", "id": "c6oy4jd", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 6, "body": "As you present them, they are two different approaches to the same problem. They stem from two widely different ideologies in programming: Classes comes from object oriented programming, while closures come from functional programming.\n\nWhether you use classes or closures is up to you, really, but I would recommend consistency. If your project uses lots of OOP, you should go for classes. If your project uses lots of functional programming, you should go for closures.\n\nIn the end, though, it's entirely up to you. You nailed it down pretty well in your post, actually. Classes are \"smarter\" in a way, but closures require less code. What is important to you?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As you present them, they are two different approaches to the same problem. They stem from two widely different ideologies in programming: Classes comes from object oriented programming, while closures come from functional programming.&lt;/p&gt;\n\n&lt;p&gt;Whether you use classes or closures is up to you, really, but I would recommend consistency. If your project uses lots of OOP, you should go for classes. If your project uses lots of functional programming, you should go for closures.&lt;/p&gt;\n\n&lt;p&gt;In the end, though, it&amp;#39;s entirely up to you. You nailed it down pretty well in your post, actually. Classes are &amp;quot;smarter&amp;quot; in a way, but closures require less code. What is important to you?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oy4jd", "flair_text": null, "created": 1350678898.0, "created_utc": 1350675298.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11rg83", "children": [], "author": "gamedeveloper", "id": "c6oy4a0", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 2, "body": "Think of closures as an elegant way of defining a functor, and it may help you out.\n\nYou're unlikely to want to modify a functor after receiving it; the use case for functor reuse after mutation is generally slim and uncommon. Where such a case would needed to be done it's likely you'll have some secondary mechanism to generate a new one.\n\nWhen you're sharing functors and closures what you're often wanting to send off to a receiver is not a 'thing' so much as it is a 'behaviour'. Tossing objects around, mutating them in clients, calling their functor behaviour, et cetera; it's not particularly as elegant as simply wrapping up a closure and sending it along as though it's any other *opaque* function.\n\nAs you note, there's not particularly a strong pro or con to either, but I find that the more I write software in scheme the less I enjoy writing software in C++ or Java. They're just... inelegant. ;)\n\nIn fact, Scheme has given me a much stronger appreciation for C. Go figure.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Think of closures as an elegant way of defining a functor, and it may help you out.&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;re unlikely to want to modify a functor after receiving it; the use case for functor reuse after mutation is generally slim and uncommon. Where such a case would needed to be done it&amp;#39;s likely you&amp;#39;ll have some secondary mechanism to generate a new one.&lt;/p&gt;\n\n&lt;p&gt;When you&amp;#39;re sharing functors and closures what you&amp;#39;re often wanting to send off to a receiver is not a &amp;#39;thing&amp;#39; so much as it is a &amp;#39;behaviour&amp;#39;. Tossing objects around, mutating them in clients, calling their functor behaviour, et cetera; it&amp;#39;s not particularly as elegant as simply wrapping up a closure and sending it along as though it&amp;#39;s any other &lt;em&gt;opaque&lt;/em&gt; function.&lt;/p&gt;\n\n&lt;p&gt;As you note, there&amp;#39;s not particularly a strong pro or con to either, but I find that the more I write software in scheme the less I enjoy writing software in C++ or Java. They&amp;#39;re just... inelegant. ;)&lt;/p&gt;\n\n&lt;p&gt;In fact, Scheme has given me a much stronger appreciation for C. Go figure.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oy4a0", "flair_text": null, "created": 1350678872.0, "created_utc": 1350675272.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11rg83", "children": [], "author": "djnoha", "id": "c6oz0zj", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 2, "body": "When working on a multi-developer project, the advantage of classes is that (in most OO languages) you can more precisely and explicitly define the semantics of your object, especially with regards to the mutability.  Mutable state can get you (or perhaps more likely, your fellow developers) in trouble.  With a class, you can do something like make the getter public, but the setter protected - or even better make the object immutable.\n\nLately I've been working on a project with some other developers who are new to Javascript, and the mutability of data within closures has bitten them repeatedly.  I guess my point is, if you're working with other people who are used to programming in OO languages without closures (e.g., Java) then mutating state in closures can confuse them, because it's undeclared and probably unexpected.  The same thing could be said for mutating closure state within a larger system full of non-mutating closures.  Other people won't expect it; welcome to Bug City.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When working on a multi-developer project, the advantage of classes is that (in most OO languages) you can more precisely and explicitly define the semantics of your object, especially with regards to the mutability.  Mutable state can get you (or perhaps more likely, your fellow developers) in trouble.  With a class, you can do something like make the getter public, but the setter protected - or even better make the object immutable.&lt;/p&gt;\n\n&lt;p&gt;Lately I&amp;#39;ve been working on a project with some other developers who are new to Javascript, and the mutability of data within closures has bitten them repeatedly.  I guess my point is, if you&amp;#39;re working with other people who are used to programming in OO languages without closures (e.g., Java) then mutating state in closures can confuse them, because it&amp;#39;s undeclared and probably unexpected.  The same thing could be said for mutating closure state within a larger system full of non-mutating closures.  Other people won&amp;#39;t expect it; welcome to Bug City.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oz0zj", "flair_text": null, "created": 1350682174.0, "created_utc": 1350678574.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11rg83", "children": [], "author": "adamuchi", "id": "c6ozqtu", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 3, "body": "I'd like to point out that your example is a wonderful reason for using closures over classes if the problem fits either method: your closer example is a fraction as much code, and looks like a much more direct solution.\n\nBoth methods are designed to encapsulate data. I prefer closures because I'm not a big fan of the C++ style of object oriented programming.\n\nFor me, the more complicated the collection of related methods and data must be, the more likely I'll use a class instead of a set of closures.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d like to point out that your example is a wonderful reason for using closures over classes if the problem fits either method: your closer example is a fraction as much code, and looks like a much more direct solution.&lt;/p&gt;\n\n&lt;p&gt;Both methods are designed to encapsulate data. I prefer closures because I&amp;#39;m not a big fan of the C++ style of object oriented programming.&lt;/p&gt;\n\n&lt;p&gt;For me, the more complicated the collection of related methods and data must be, the more likely I&amp;#39;ll use a class instead of a set of closures.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ozqtu", "flair_text": null, "created": 1350684863.0, "created_utc": 1350681263.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11rg83", "children": [], "author": "pacala", "id": "c6p1f29", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 1, "body": "Semantics\n\n- Objects: blocks of code parametrized with values.\n- Closures: blocks of code parametrized with values.\n\nSyntax\n\n- Objects: manually copy ctor arguments into final variables.\n- Closures: lexically capture the environment, requires an environment to be in.\n- Currying: capture the first k arguments, repeatedly if necessary.\n- Dart: classes are functions that bind ctor arguments.\n\nIdeally\n\n- Partially applied functions with named arguments, repeatedly if necessary. Generalizes currying, nice documentation at all call points, but more verbose than most coders can stomach.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Semantics&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Objects: blocks of code parametrized with values.&lt;/li&gt;\n&lt;li&gt;Closures: blocks of code parametrized with values.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Syntax&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Objects: manually copy ctor arguments into final variables.&lt;/li&gt;\n&lt;li&gt;Closures: lexically capture the environment, requires an environment to be in.&lt;/li&gt;\n&lt;li&gt;Currying: capture the first k arguments, repeatedly if necessary.&lt;/li&gt;\n&lt;li&gt;Dart: classes are functions that bind ctor arguments.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Ideally&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Partially applied functions with named arguments, repeatedly if necessary. Generalizes currying, nice documentation at all call points, but more verbose than most coders can stomach.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p1f29", "flair_text": null, "created": 1350691908.0, "created_utc": 1350688308.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11rg83", "children": [], "author": "JL235", "id": "c6p1pho", "parent_id": "t3_11rg83", "score": 0, "approved_by": null, "upvotes": 1, "body": "It ultimately depends on the application domain.\n\nHowever an advantage on top of what others have pointed out, is that it makes it simpler to tack on behaviour. For example lets say we have an 'ajaxGet' method, which performs an ajax request, but is chained off an 'ajax' method. You provide an url, and a callback for when it has completed:\n\n    function ajaxGet( url, onComplete ) {\n        ajax( 'GET', url, onComplete );\n    }\n\nThen if I want to tack logging behaviour onto that, it becomes trivial:\n\n    function ajaxGet( url, onComplete ) {\n        ajax( 'GET', url, function( status, text, xml ) {\n            log( 'GET: ' + url + ', status: ' + status );\n\n            onComplete( status, text, xml );\n        } );\n    }\n\nHere is the real point of this: if I now want to do the reverse, remove my logging function, I can do so easily.\n\nIn OO solutions, especially with static languages like Java, to solve this problem you often get internal middle-man classes being created in system and left in. They are there just in case the developer wanted to add some behaviour in the future. So you are building extra boiler plate when you could just move on to the next task.\n\nClosures often require less code, and in many cases can lower the 'viscosity' of the code (how easy it is to change). If all mutable state is only ever passed in or returned, and so you are never altering variables outside the closure, then it is often close to being fully safe in a single-threaded asynchronous program. For example building a web app that performs work on the result of ajax requests.\n\nNote that there is nothing wrong with OO, and I have one project in particular (a JS based asynchronous compler for a language) which heavily mixes OO and closures. It just all depends on the application domain.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It ultimately depends on the application domain.&lt;/p&gt;\n\n&lt;p&gt;However an advantage on top of what others have pointed out, is that it makes it simpler to tack on behaviour. For example lets say we have an &amp;#39;ajaxGet&amp;#39; method, which performs an ajax request, but is chained off an &amp;#39;ajax&amp;#39; method. You provide an url, and a callback for when it has completed:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function ajaxGet( url, onComplete ) {\n    ajax( &amp;#39;GET&amp;#39;, url, onComplete );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then if I want to tack logging behaviour onto that, it becomes trivial:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function ajaxGet( url, onComplete ) {\n    ajax( &amp;#39;GET&amp;#39;, url, function( status, text, xml ) {\n        log( &amp;#39;GET: &amp;#39; + url + &amp;#39;, status: &amp;#39; + status );\n\n        onComplete( status, text, xml );\n    } );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is the real point of this: if I now want to do the reverse, remove my logging function, I can do so easily.&lt;/p&gt;\n\n&lt;p&gt;In OO solutions, especially with static languages like Java, to solve this problem you often get internal middle-man classes being created in system and left in. They are there just in case the developer wanted to add some behaviour in the future. So you are building extra boiler plate when you could just move on to the next task.&lt;/p&gt;\n\n&lt;p&gt;Closures often require less code, and in many cases can lower the &amp;#39;viscosity&amp;#39; of the code (how easy it is to change). If all mutable state is only ever passed in or returned, and so you are never altering variables outside the closure, then it is often close to being fully safe in a single-threaded asynchronous program. For example building a web app that performs work on the result of ajax requests.&lt;/p&gt;\n\n&lt;p&gt;Note that there is nothing wrong with OO, and I have one project in particular (a JS based asynchronous compler for a language) which heavily mixes OO and closures. It just all depends on the application domain.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p1pho", "flair_text": null, "created": 1350693222.0, "created_utc": 1350689622.0, "num_reports": null}], "score": 38, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 54, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11rg83/closures_vs_classes/", "has_more_comments": false, "name": "t3_11rg83", "created": 1350677621.0, "url": "http://www.reddit.com/r/compsci/comments/11rg83/closures_vs_classes/", "author_flair_text": null, "author": "deadowl", "created_utc": 1350674021.0, "link_flair_text": null, "media": null, "num_reports": null}, "317": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 11, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For a semi-beginner wanting to get a better visual understanding of how all of them play together and when they were released. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "For a semi-beginner wanting to get a better visual understanding of how all of them play together and when they were released. ", "saved": false, "id": "11rfde", "clicked": false, "title": "Is there a diagram anywhere that displays a broad history (with short detail) of most of the major microarchitectures anywhere? ", "num_comments": 1, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11rfde", "children": [], "author": "HaMMeReD", "id": "c6ozuaf", "parent_id": "t3_11rfde", "score": 0, "approved_by": null, "upvotes": 2, "body": "[Wikipedia has a table](http://en.wikipedia.org/wiki/Comparison_of_CPU_architectures#Architectures)\n\nYou can get a comparison there and the year they were released with links to details on pretty much all of them.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Comparison_of_CPU_architectures#Architectures\"&gt;Wikipedia has a table&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can get a comparison there and the year they were released with links to details on pretty much all of them.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ozuaf", "flair_text": null, "created": 1350685246.0, "created_utc": 1350681646.0, "num_reports": null}], "score": 2, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 13, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11rfde/is_there_a_diagram_anywhere_that_displays_a_broad/", "has_more_comments": false, "name": "t3_11rfde", "created": 1350676832.0, "url": "http://www.reddit.com/r/compsci/comments/11rfde/is_there_a_diagram_anywhere_that_displays_a_broad/", "author_flair_text": null, "author": "cyberdoodle", "created_utc": 1350673232.0, "link_flair_text": null, "media": null, "num_reports": null}, "318": {"domain": "gallium.inria.fr", "link_flair_class": null, "banned_by": null, "downvotes": 47, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11olst", "clicked": false, "title": "Happy Ada Lovelace Day - Celebrating important women in CS", "num_comments": 31, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11olst", "children": [], "author": "njhCasper", "id": "c6ojhj7", "parent_id": "t3_11olst", "score": 0, "approved_by": null, "upvotes": 5, "body": "Fantastic (fictional) Ada Lovelace and Charles Babbage [stories!](http://sydneypadua.com/2dgoggles/stories/)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fantastic (fictional) Ada Lovelace and Charles Babbage &lt;a href=\"http://sydneypadua.com/2dgoggles/stories/\"&gt;stories!&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ojhj7", "flair_text": null, "created": 1350605081.0, "created_utc": 1350601481.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_11olst", "children": [], "author": "Gracana", "id": "c6o9l0w", "parent_id": "t3_11olst", "score": 0, "approved_by": null, "upvotes": 25, "body": "With another Ada Lovelace Day passed,  it's a good time to think about women in technology. There are some great success stories, but our field has a long way to go before it is truly accepting of (and welcoming to) women.\n\nWith that in mind, here are a couple articles that will be eye-openers for many.\n\nTess Rinearson's [On Technical Entitlement.](http://tessrinearson.com/blog/?p=400)\n\nand\n\nKatie Cunningham's [Lighten Up.](http://therealkatie.net/blog/2012/mar/21/lighten-up/)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;With another Ada Lovelace Day passed,  it&amp;#39;s a good time to think about women in technology. There are some great success stories, but our field has a long way to go before it is truly accepting of (and welcoming to) women.&lt;/p&gt;\n\n&lt;p&gt;With that in mind, here are a couple articles that will be eye-openers for many.&lt;/p&gt;\n\n&lt;p&gt;Tess Rinearson&amp;#39;s &lt;a href=\"http://tessrinearson.com/blog/?p=400\"&gt;On Technical Entitlement.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;p&gt;Katie Cunningham&amp;#39;s &lt;a href=\"http://therealkatie.net/blog/2012/mar/21/lighten-up/\"&gt;Lighten Up.&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o9l0w", "flair_text": null, "created": 1350568008.0, "created_utc": 1350564408.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11olst", "children": [], "author": "gerusz", "id": "c6oado9", "parent_id": "t3_11olst", "score": 0, "approved_by": null, "upvotes": 9, "body": "Sure, I would give a flower to the girls in my class... if there were any.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sure, I would give a flower to the girls in my class... if there were any.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oado9", "flair_text": null, "created": 1350572396.0, "created_utc": 1350568796.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 13, "link_id": "t3_11olst", "children": [], "author": "nawitus", "id": "c6odgr0", "parent_id": "t3_11olst", "score": 0, "approved_by": null, "upvotes": 13, "body": "She [was not](http://en.wikipedia.org/wiki/Ada_Lovelace#Controversy_over_extent_of_contributions) the first programmer, btw.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;She &lt;a href=\"http://en.wikipedia.org/wiki/Ada_Lovelace#Controversy_over_extent_of_contributions\"&gt;was not&lt;/a&gt; the first programmer, btw.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6odgr0", "flair_text": null, "created": 1350584165.0, "created_utc": 1350580565.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11olst", "children": [], "author": "9kinds", "id": "c6onfuh", "parent_id": "t3_11olst", "score": 0, "approved_by": null, "upvotes": 5, "body": "It's interesting to me, that in a post that supposed to be about celebrating women in tech and encouraging their participation, most of the comments are focused on something else.... debating the merits of one woman's contributions. -_-\n\nedit: typos", "edited": 1350629023.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s interesting to me, that in a post that supposed to be about celebrating women in tech and encouraging their participation, most of the comments are focused on something else.... debating the merits of one woman&amp;#39;s contributions. -_-&lt;/p&gt;\n\n&lt;p&gt;edit: typos&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6onfuh", "flair_text": null, "created": 1350620557.0, "created_utc": 1350616957.0, "num_reports": null}], "score": 163, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 210, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11olst/happy_ada_lovelace_day_celebrating_important/", "has_more_comments": false, "name": "t3_11olst", "created": 1350560134.0, "url": "http://gallium.inria.fr/~scherer/gagallium/ada-lovelace-day-2012/index.html", "author_flair_text": null, "author": "gallais", "created_utc": 1350556534.0, "link_flair_text": null, "media": null, "num_reports": null}, "319": {"domain": "math.ucr.edu", "link_flair_class": null, "banned_by": null, "downvotes": 7, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11p1hm", "clicked": false, "title": "Physics, Topology, Logic and Computation: A Rosetta Stone [pdf]", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11p1hm", "children": [], "author": "cypherx", "id": "c6ockut", "parent_id": "t3_11p1hm", "score": 0, "approved_by": null, "upvotes": 7, "body": "I'm guessing most people won't open a pdf, so here's the tl;dr version: \n\n\n\n| Category Theory | Physics | Topology  | Logic          | Computation |\n|-----------------------|------------|--------------|----------------|------------------|\n| object                 | system  | manifold   | proposition  | data type     |\n| morphism           | process | cobordism | proof          | program      |             \n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m guessing most people won&amp;#39;t open a pdf, so here&amp;#39;s the tl;dr version: &lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Category Theory&lt;/th&gt;\n&lt;th&gt;Physics&lt;/th&gt;\n&lt;th&gt;Topology&lt;/th&gt;\n&lt;th&gt;Logic&lt;/th&gt;\n&lt;th&gt;Computation&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;object&lt;/td&gt;\n&lt;td&gt;system&lt;/td&gt;\n&lt;td&gt;manifold&lt;/td&gt;\n&lt;td&gt;proposition&lt;/td&gt;\n&lt;td&gt;data type&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;morphism&lt;/td&gt;\n&lt;td&gt;process&lt;/td&gt;\n&lt;td&gt;cobordism&lt;/td&gt;\n&lt;td&gt;proof&lt;/td&gt;\n&lt;td&gt;program&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ockut", "flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "created": 1350581134.0, "created_utc": 1350577534.0, "num_reports": null}], "score": 24, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 31, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11p1hm/physics_topology_logic_and_computation_a_rosetta/", "has_more_comments": false, "name": "t3_11p1hm", "created": 1350580788.0, "url": "http://math.ucr.edu/home/baez/rosetta.pdf", "author_flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "author": "cypherx", "created_utc": 1350577188.0, "link_flair_text": null, "media": null, "num_reports": null}, "320": {"domain": "blog.regehr.org", "link_flair_class": null, "banned_by": null, "downvotes": 31, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11n355", "clicked": false, "title": "\"How Did Software Get So Reliable Without Proof?\"", "num_comments": 49, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 11, "link_id": "t3_11n355", "children": [], "author": "Upholder", "id": "c6nx4pn", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 57, "body": "\"Software developers have become adept at the difficult art of building reasonably reliable systems out of unreliable parts. The snag is that often we do not know exactly how we did it.\" \n\n  -- Bjarne Stroustrup, creator of C++", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;quot;Software developers have become adept at the difficult art of building reasonably reliable systems out of unreliable parts. The snag is that often we do not know exactly how we did it.&amp;quot; &lt;/p&gt;\n\n&lt;p&gt;-- Bjarne Stroustrup, creator of C++&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nx4pn", "flair_text": null, "created": 1350505305.0, "created_utc": 1350501705.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 7, "link_id": "t3_11n355", "children": [], "author": "frezik", "id": "c6ny0ox", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 50, "body": "Some part of this is also a side effect of Moore's Law. As computers got faster and more memory, the need for clever, potentially buggy algorithms was reduced.\n\nIf you look at a lot of old games, you'll see many glitches that ultimately come down to having limited memory or CPU. The Minus World in Super Mario Bros. and MissingNo in Pokemon both come down to having code and data structures that are programmed for compactness rather than being well-structured. Also, the Minus World glitch is exploited due to imperfect collision detection, which again comes down to speed and memory. (Technical explanations of each are linked below.) \n\nIt's not just limited to games, either; all software on older machines had to do these tricks sooner or later.\n\nOver time, Moore's Law made those tricks unnecessary. While some might regret that the younger generation of programmers don't know all these neat tricks, the fact is that those tricks were buggy and made the code unclear. Software really is better off without them.\n\nMinus world: http://www.romhacking.net/documents/343/  \nMissingNo: https://keithmaggio.wordpress.com/2010/04/06/game-glitch-analysis-missingno/", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some part of this is also a side effect of Moore&amp;#39;s Law. As computers got faster and more memory, the need for clever, potentially buggy algorithms was reduced.&lt;/p&gt;\n\n&lt;p&gt;If you look at a lot of old games, you&amp;#39;ll see many glitches that ultimately come down to having limited memory or CPU. The Minus World in Super Mario Bros. and MissingNo in Pokemon both come down to having code and data structures that are programmed for compactness rather than being well-structured. Also, the Minus World glitch is exploited due to imperfect collision detection, which again comes down to speed and memory. (Technical explanations of each are linked below.) &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s not just limited to games, either; all software on older machines had to do these tricks sooner or later.&lt;/p&gt;\n\n&lt;p&gt;Over time, Moore&amp;#39;s Law made those tricks unnecessary. While some might regret that the younger generation of programmers don&amp;#39;t know all these neat tricks, the fact is that those tricks were buggy and made the code unclear. Software really is better off without them.&lt;/p&gt;\n\n&lt;p&gt;Minus world: &lt;a href=\"http://www.romhacking.net/documents/343/\"&gt;http://www.romhacking.net/documents/343/&lt;/a&gt;&lt;br/&gt;\nMissingNo: &lt;a href=\"https://keithmaggio.wordpress.com/2010/04/06/game-glitch-analysis-missingno/\"&gt;https://keithmaggio.wordpress.com/2010/04/06/game-glitch-analysis-missingno/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ny0ox", "flair_text": null, "created": 1350508257.0, "created_utc": 1350504657.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11n355", "children": [], "author": "gwern", "id": "c6nxvbj", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 23, "body": "The Hoare paper: http://dl.dropbox.com/u/85192141/1996-hoare.pdf", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The Hoare paper: &lt;a href=\"http://dl.dropbox.com/u/85192141/1996-hoare.pdf\"&gt;http://dl.dropbox.com/u/85192141/1996-hoare.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nxvbj", "flair_text": null, "created": 1350507765.0, "created_utc": 1350504165.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11n355", "children": [], "author": "absump", "id": "c6nwxhe", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 6, "body": "It must be either reliable or unreliable even if you have proof for neither.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It must be either reliable or unreliable even if you have proof for neither.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nwxhe", "flair_text": null, "created": 1350504630.0, "created_utc": 1350501030.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11n355", "children": [], "author": "CommanderDerpington", "id": "c6o7btt", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 2, "body": "Software is only reliable as the programmer.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Software is only reliable as the programmer.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o7btt", "flair_text": null, "created": 1350546745.0, "created_utc": 1350543145.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11n355", "children": [], "author": "grayvedigga", "id": "c6o89r5", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 3, "body": "The same way bridges, aeroplanes and medicine happened.  What makes software so special?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The same way bridges, aeroplanes and medicine happened.  What makes software so special?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o89r5", "flair_text": null, "created": 1350555550.0, "created_utc": 1350551950.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 25, "link_id": "t3_11n355", "children": [], "author": "programmar", "id": "c6nwh72", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 34, "body": "Software is reliable?  Since when?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Software is reliable?  Since when?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nwh72", "flair_text": null, "created": 1350503106.0, "created_utc": 1350499506.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_11n355", "children": [], "author": "dist0rtedwave", "id": "c6nwuxr", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 14, "body": "Ah good old Tony Hoarse. I think that is a name that a professor interested in \"formally verifying the absence of some kinds of bugs\" shouldn't be getting wrong.\n\nYou could maybe make an argument that some software is \"mostly reliable\" My windows machine doesn't turn its self off on its own much for example. A lot of that is because drivers are simple enough that they can be formally verified.\n\nEqually important is that windows has been \"tested\" by millions of users for years and years now. Most of the really nasty bugs have shown up enough times for developers to find and fix them. Windows obviously doesn't belong in a discussion about critical software though.\n\nWhat happens when testing your software puts a machine worth a few million dollars at risk? You can do a lot of simulations, but it can be hard to predict the response to every possible real world input. This is where a case for more formal verification can be made. The cost of funding an entire team to spend 5 years verifying software can pay for itself instantly if it finds a bug that might cause a single fighter jet to crash. From personal experience, such a team will generally find a few of these bugs, even in simple software.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah good old Tony Hoarse. I think that is a name that a professor interested in &amp;quot;formally verifying the absence of some kinds of bugs&amp;quot; shouldn&amp;#39;t be getting wrong.&lt;/p&gt;\n\n&lt;p&gt;You could maybe make an argument that some software is &amp;quot;mostly reliable&amp;quot; My windows machine doesn&amp;#39;t turn its self off on its own much for example. A lot of that is because drivers are simple enough that they can be formally verified.&lt;/p&gt;\n\n&lt;p&gt;Equally important is that windows has been &amp;quot;tested&amp;quot; by millions of users for years and years now. Most of the really nasty bugs have shown up enough times for developers to find and fix them. Windows obviously doesn&amp;#39;t belong in a discussion about critical software though.&lt;/p&gt;\n\n&lt;p&gt;What happens when testing your software puts a machine worth a few million dollars at risk? You can do a lot of simulations, but it can be hard to predict the response to every possible real world input. This is where a case for more formal verification can be made. The cost of funding an entire team to spend 5 years verifying software can pay for itself instantly if it finds a bug that might cause a single fighter jet to crash. From personal experience, such a team will generally find a few of these bugs, even in simple software.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nwuxr", "flair_text": null, "created": 1350504391.0, "created_utc": 1350500791.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11n355", "children": [], "author": "jhaluska", "id": "c6o05tm", "parent_id": "t3_11n355", "score": 0, "approved_by": null, "upvotes": 1, "body": "My thinking is that we just have a wider selection of software to choose from and reliable software is a huge selection criteria.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My thinking is that we just have a wider selection of software to choose from and reliable software is a huge selection criteria.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o05tm", "flair_text": null, "created": 1350515635.0, "created_utc": 1350512035.0, "num_reports": null}], "score": 108, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 139, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11n355/how_did_software_get_so_reliable_without_proof/", "has_more_comments": false, "name": "t3_11n355", "created": 1350500511.0, "url": "http://blog.regehr.org/archives/820", "author_flair_text": null, "author": "gwern", "created_utc": 1350496911.0, "link_flair_text": null, "media": null, "num_reports": null}, "321": {"domain": "playingwithpointers.com", "link_flair_class": null, "banned_by": null, "downvotes": 4, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11nu0b", "clicked": false, "title": "Peeking inside LuaJIT ", "num_comments": 0, "comments": [], "score": 7, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 11, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11nu0b/peeking_inside_luajit/", "has_more_comments": false, "name": "t3_11nu0b", "created": 1350523960.0, "url": "http://playingwithpointers.com/archives/1010", "author_flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "author": "cypherx", "created_utc": 1350520360.0, "link_flair_text": null, "media": null, "num_reports": null}, "322": {"domain": "rise4fun.com", "link_flair_class": null, "banned_by": null, "downvotes": 4, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11o3nm", "clicked": false, "title": "Koka: Javascript-like syntax, but with a powerful side-effect tracking type system ", "num_comments": 0, "comments": [], "score": 2, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 6, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11o3nm/koka_javascriptlike_syntax_but_with_a_powerful/", "has_more_comments": false, "name": "t3_11o3nm", "created": 1350532386.0, "url": "http://www.rise4fun.com/koka/tutorial", "author_flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "author": "cypherx", "created_utc": 1350528786.0, "link_flair_text": null, "media": null, "num_reports": null}, "323": {"domain": "neuron.eng.wayne.edu", "link_flair_class": null, "banned_by": null, "downvotes": 13, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11mfb9", "clicked": false, "title": "Fundamentals of Artificial Neural Networks", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11mfb9", "children": [], "author": "[deleted]", "id": "c6nry3v", "parent_id": "t3_11mfb9", "score": 0, "approved_by": null, "upvotes": 1, "body": "[deleted]", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nry3v", "flair_text": null, "created": 1350486561.0, "created_utc": 1350482961.0, "num_reports": null}], "score": 25, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 38, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11mfb9/fundamentals_of_artificial_neural_networks/", "has_more_comments": false, "name": "t3_11mfb9", "created": 1350469690.0, "url": "http://neuron.eng.wayne.edu/tarek/MITbook/t_contents.html", "author_flair_text": null, "author": "cratylus", "created_utc": 1350466090.0, "link_flair_text": null, "media": null, "num_reports": null}, "324": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 2, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I would like to read up on automatically identifying a location given a map of the region, which is inherently a computer vision/machine learning problem. I am assuming the process is done by looking for state/region boundaries, then comparing it to a known database. I also assume that the coloring of the region could be useful as well.&lt;/p&gt;\n\n&lt;p&gt;Can anyone point to towards some of the seminal works so I can get started on reading up? Searching for automatic map recognition leads to a lot of stuff related to AI or diffusion maps, so any hints at keywords would also be appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I would like to read up on automatically identifying a location given a map of the region, which is inherently a computer vision/machine learning problem. I am assuming the process is done by looking for state/region boundaries, then comparing it to a known database. I also assume that the coloring of the region could be useful as well.\n\nCan anyone point to towards some of the seminal works so I can get started on reading up? Searching for automatic map recognition leads to a lot of stuff related to AI or diffusion maps, so any hints at keywords would also be appreciated.", "saved": false, "id": "11n8fz", "clicked": false, "title": "Looking for papers on automatically identifying state/region maps.", "num_comments": 5, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11n8fz", "children": [], "author": "cypherx", "id": "c6o2huc", "parent_id": "t3_11n8fz", "score": 0, "approved_by": null, "upvotes": 3, "body": "Are the maps you'll be looking all at a certain scale or might you have to deal with both a city map and a continent-scale map? \n\nI imagine the simplest thing to do would be to parse the landmark/city names, look up candidate coordinates for each one, and then filter the results (to discard outliers). ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Are the maps you&amp;#39;ll be looking all at a certain scale or might you have to deal with both a city map and a continent-scale map? &lt;/p&gt;\n\n&lt;p&gt;I imagine the simplest thing to do would be to parse the landmark/city names, look up candidate coordinates for each one, and then filter the results (to discard outliers). &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o2huc", "flair_text": "(\u03bbx.x x) (\u03bbx.x x)", "created": 1350524887.0, "created_utc": 1350521287.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11n8fz", "children": [], "author": "BlameKanada", "id": "c6o6rmq", "parent_id": "t3_11n8fz", "score": 0, "approved_by": null, "upvotes": 3, "body": "There are things called SIFT features that are invariant to affine transformations, I believe. I think you can extract these features and run them through a classifier. Of course you will need to train it first. I have seen papers that do this for recognizing objects in images. Seems like your map problem is similar.\n\nFor papers, check out this page. Tons of them to get you started.  Http://cs.utexas.edu/%7Ecv-fall2012/schedule.html", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are things called SIFT features that are invariant to affine transformations, I believe. I think you can extract these features and run them through a classifier. Of course you will need to train it first. I have seen papers that do this for recognizing objects in images. Seems like your map problem is similar.&lt;/p&gt;\n\n&lt;p&gt;For papers, check out this page. Tons of them to get you started.  &lt;a href=\"Http://cs.utexas.edu/%7Ecv-fall2012/schedule.html\"&gt;Http://cs.utexas.edu/%7Ecv-fall2012/schedule.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o6rmq", "flair_text": null, "created": 1350543196.0, "created_utc": 1350539596.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11n8fz", "children": [], "author": "ilikecomputahs", "id": "c6ocbkl", "parent_id": "t3_11n8fz", "score": 0, "approved_by": null, "upvotes": 1, "body": "Do the maps have textual elements (i.e. town/city labels)? ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do the maps have textual elements (i.e. town/city labels)? &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ocbkl", "flair_text": null, "created": 1350580231.0, "created_utc": 1350576631.0, "num_reports": null}], "score": 1, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 3, "hidden": false, "thumbnail": "", "edited": false, "modhash": "ojprrtst39c20d3a2b51f6d7f7af4940e274225aaa82b0341a", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11n8fz/looking_for_papers_on_automatically_identifying/", "has_more_comments": false, "name": "t3_11n8fz", "created": 1350505135.0, "url": "http://www.reddit.com/r/compsci/comments/11n8fz/looking_for_papers_on_automatically_identifying/", "author_flair_text": null, "author": "zionsrogue", "created_utc": 1350501535.0, "link_flair_text": null, "media": null, "num_reports": null}, "325": {"domain": "kickstarter.com", "link_flair_class": null, "banned_by": null, "downvotes": 2, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11m46v", "clicked": false, "title": "Cheap Supercomputer ", "num_comments": 13, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11m46v", "children": [], "author": "cjt09", "id": "c6o408z", "parent_id": "t3_11m46v", "score": 0, "approved_by": null, "upvotes": 7, "body": "I'm struggling to figure out the point of this project. From what I can tell, this project basically pairs up a cheap CPU with their version of a GPU. There's nothing really new about this, and realistically one of the larger issues isn't really the hardware, but rather trying to figure out software that parallelizes well. Besides, cloud computing has already made great strides in making supercomputing services far more available than they have ever been in the past.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m struggling to figure out the point of this project. From what I can tell, this project basically pairs up a cheap CPU with their version of a GPU. There&amp;#39;s nothing really new about this, and realistically one of the larger issues isn&amp;#39;t really the hardware, but rather trying to figure out software that parallelizes well. Besides, cloud computing has already made great strides in making supercomputing services far more available than they have ever been in the past.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o408z", "flair_text": null, "created": 1350530826.0, "created_utc": 1350527226.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11m46v", "children": [], "author": "JAPH", "id": "c6peqoc", "parent_id": "t3_11m46v", "score": 0, "approved_by": null, "upvotes": 3, "body": "Gotta love their justification for calling this a \"supercomputer\":\n\n&gt; The current $99 board aren't considered supercomputers by 2012 standards, but a cluster of 10 Parallella boards would have been considered a supercomputer 10 years ago.\n\nAnd my desktop would have been considered a supercomputer ten years before that.  You can't really call something a supercomputer because it would have been considered a supercomputer at some point in history.\n\nThat aside, it looks like an interesting project even though I don't really see what it offers over GPGPU- and FPGA- based solutions.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Gotta love their justification for calling this a &amp;quot;supercomputer&amp;quot;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;The current $99 board aren&amp;#39;t considered supercomputers by 2012 standards, but a cluster of 10 Parallella boards would have been considered a supercomputer 10 years ago.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And my desktop would have been considered a supercomputer ten years before that.  You can&amp;#39;t really call something a supercomputer because it would have been considered a supercomputer at some point in history.&lt;/p&gt;\n\n&lt;p&gt;That aside, it looks like an interesting project even though I don&amp;#39;t really see what it offers over GPGPU- and FPGA- based solutions.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6peqoc", "flair_text": null, "created": 1350773961.0, "created_utc": 1350770361.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11m46v", "children": [], "author": "canhekickit", "id": "c6o2t24", "parent_id": "t3_11m46v", "score": 0, "approved_by": null, "upvotes": 2, "body": "Here is a graph of what the project has raised:\n\n                                                     G|750K\n                                                      |\n                                                      |\n                                                      |\n                                                      |\n                                                      |500K\n                                                      |\n                                 ooooo                |\n                          oooooooo                    |\n                      ooooo                           |250K\n                 ooooo                                |\n           ooooooo                                    |\n      oooooo                                          |\n     oo                                               |\n    oo                                                |0\n    --------------------------------------------------\n    9/249/30      10/6     10/12    10/17     10/23\n\n[Click to see full graph](http://canhekick.it/projects/adapteva/parallella-a-supercomputer-for-everyone)\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is a graph of what the project has raised:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                                                 G|750K\n                                                  |\n                                                  |\n                                                  |\n                                                  |\n                                                  |500K\n                                                  |\n                             ooooo                |\n                      oooooooo                    |\n                  ooooo                           |250K\n             ooooo                                |\n       ooooooo                                    |\n  oooooo                                          |\n oo                                               |\noo                                                |0\n--------------------------------------------------\n9/249/30      10/6     10/12    10/17     10/23\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://canhekick.it/projects/adapteva/parallella-a-supercomputer-for-everyone\"&gt;Click to see full graph&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o2t24", "flair_text": null, "created": 1350526152.0, "created_utc": 1350522552.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11m46v", "children": [], "author": "rozap", "id": "c6q13dz", "parent_id": "t3_11m46v", "score": 0, "approved_by": null, "upvotes": 1, "body": "I think my 8 core computer that I paid $400 is pretty cheap and pretty super, but that doesn't mean I am always able to write code that takes advantage of more than one core. I foresee the same thing here. \n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think my 8 core computer that I paid $400 is pretty cheap and pretty super, but that doesn&amp;#39;t mean I am always able to write code that takes advantage of more than one core. I foresee the same thing here. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6q13dz", "flair_text": null, "created": 1350889958.0, "created_utc": 1350886358.0, "num_reports": null}], "score": 9, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 11, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {"content": "&lt;iframe frameborder=\"0\" height=\"360\" src=\"http://www.kickstarter.com/projects/adapteva/parallella-a-supercomputer-for-everyone/widget/video.html\" width=\"480\" border=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;", "width": 480, "scrolling": false, "height": 360}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11m46v/cheap_supercomputer/", "has_more_comments": false, "name": "t3_11m46v", "created": 1350451828.0, "url": "http://www.kickstarter.com/projects/adapteva/parallella-a-supercomputer-for-everyone", "author_flair_text": null, "author": "turnersr", "created_utc": 1350448228.0, "link_flair_text": null, "media": {"type": "kickstarter.com", "oembed": {"provider_url": "http://www.kickstarter.com/", "description": "Adapteva is raising funds for Parallella: A Supercomputer For Everyone on Kickstarter! The Parallella project will make parallel computing accessible to everyone.", "title": "Parallella: A Supercomputer For Everyone", "author_name": "Adapteva", "height": 360, "width": 480, "html": "&lt;iframe frameborder=\"0\" height=\"360\" src=\"http://www.kickstarter.com/projects/adapteva/parallella-a-supercomputer-for-everyone/widget/video.html\" width=\"480\" border=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;", "thumbnail_width": 560, "version": "1.0", "provider_name": "Kickstarter", "thumbnail_url": "https://s3.amazonaws.com/ksr/projects/287173/photo-full.jpg?1348776477", "type": "rich", "thumbnail_height": 420, "author_url": "http://www.kickstarter.com/profile/adapteva"}}, "num_reports": null}, "326": {"domain": "computer.org", "link_flair_class": null, "banned_by": null, "downvotes": 6, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11mbi7", "clicked": false, "title": "Testing Scientific Programs", "num_comments": 0, "comments": [], "score": 2, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 8, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11mbi7/testing_scientific_programs/", "has_more_comments": false, "name": "t3_11mbi7", "created": 1350461521.0, "url": "http://www.computer.org/portal/web/computingnow/content?g=53319&amp;type=article&amp;urlTitle=testing-scientific-programs", "author_flair_text": null, "author": "thexavier", "created_utc": 1350457921.0, "link_flair_text": null, "media": null, "num_reports": null}, "327": {"domain": "dspace.mit.edu", "link_flair_class": null, "banned_by": null, "downvotes": 5, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11lkkm", "clicked": false, "title": "The Art of the Propagator", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11lkkm", "children": [], "author": "andreasw", "id": "c6niwsw", "parent_id": "t3_11lkkm", "score": 0, "approved_by": null, "upvotes": 1, "body": "See also Alexey Radul's phd thesis: http://web.mit.edu/~axch/www/phd-thesis.pdf", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;See also Alexey Radul&amp;#39;s phd thesis: &lt;a href=\"http://web.mit.edu/%7Eaxch/www/phd-thesis.pdf\"&gt;http://web.mit.edu/~axch/www/phd-thesis.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6niwsw", "flair_text": null, "created": 1350434390.0, "created_utc": 1350430790.0, "num_reports": null}], "score": 4, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 9, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11lkkm/the_art_of_the_propagator/", "has_more_comments": false, "name": "t3_11lkkm", "created": 1350434351.0, "url": "http://dspace.mit.edu/handle/1721.1/44215", "author_flair_text": null, "author": "andreasw", "created_utc": 1350430751.0, "link_flair_text": null, "media": null, "num_reports": null}, "328": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 33, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am a sophomore currently, and I feel that after 2 years of computer science in high school, and taking only one class that deals with programming so far, I am so far inadequately trained in actual programming. Don&amp;#39;t get me wrong, I am excited to learn about computer theory, but when it comes to making actual programs with languages that involve things that would solve real world applications, rather than small little programs involving single algorithms and such, or also learning a good amount of languages to get me prepared for life outside college, I am worried not enough focus will go into it. I realize I should simply spend more time on my own time programming to get better, but it would be nice to see that my degree puts more effort into helping me learn some programming languages very well to train me for after college.&lt;/p&gt;\n\n&lt;p&gt;EDIT: Thank you all very much for the responses! A lot of very good information here that I will have to pass on to fellow students that wonder the same as well.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am a sophomore currently, and I feel that after 2 years of computer science in high school, and taking only one class that deals with programming so far, I am so far inadequately trained in actual programming. Don't get me wrong, I am excited to learn about computer theory, but when it comes to making actual programs with languages that involve things that would solve real world applications, rather than small little programs involving single algorithms and such, or also learning a good amount of languages to get me prepared for life outside college, I am worried not enough focus will go into it. I realize I should simply spend more time on my own time programming to get better, but it would be nice to see that my degree puts more effort into helping me learn some programming languages very well to train me for after college.\n\nEDIT: Thank you all very much for the responses! A lot of very good information here that I will have to pass on to fellow students that wonder the same as well.", "saved": false, "id": "11k2gd", "clicked": false, "title": "People who have a BS in Computer Science: how much of the degree plan involves actual programming?", "num_comments": 124, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 15, "link_id": "t3_11k2gd", "children": [], "author": "khedoros", "id": "c6n5wje", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 126, "body": "....And you aren't writing your own projects? A university isn't a trade school, and a CS degree isn't software engineering.\n\nEither get an internship, or at least start a project on your own! Think of programming as being like art. You have different tools and different media you can work in. There are different techniques you can apply, but you need to learn when and how to apply them, and you need to practice, practice, practice.\n\nBut seriously, if someone told you to expect a CS degree to teach you how to program well, someone told you wrong. I had classmates that couldn't program their ways out of paper bags. Myself, I chose some programming heavy electives: a couple courses on C++, a computer networking class with a lot of programming projects, and some hands-on AI and robotics courses with plenty of projects. In all of those cases, I could've gone for more theoretical classes.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;....And you aren&amp;#39;t writing your own projects? A university isn&amp;#39;t a trade school, and a CS degree isn&amp;#39;t software engineering.&lt;/p&gt;\n\n&lt;p&gt;Either get an internship, or at least start a project on your own! Think of programming as being like art. You have different tools and different media you can work in. There are different techniques you can apply, but you need to learn when and how to apply them, and you need to practice, practice, practice.&lt;/p&gt;\n\n&lt;p&gt;But seriously, if someone told you to expect a CS degree to teach you how to program well, someone told you wrong. I had classmates that couldn&amp;#39;t program their ways out of paper bags. Myself, I chose some programming heavy electives: a couple courses on C++, a computer networking class with a lot of programming projects, and some hands-on AI and robotics courses with plenty of projects. In all of those cases, I could&amp;#39;ve gone for more theoretical classes.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n5wje", "flair_text": null, "created": 1350373019.0, "created_utc": 1350369419.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11k2gd", "children": [], "author": "samarkandz", "id": "c6n6lrl", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 35, "body": "I wish my university focused more on theory and less on programming which to be fair, I could have picked up on my own (theory on the other hand I would have to know about to learn about which I don't).\n\nAlso, I am sure employers love when students have been taught all that design patterns, software development methodologies and so on dullness, but - can they pay for it if they want me to learn that? Does it really have to be a _core_ module? It has exactly nothing to do with computers or computation - it's sheer business processes.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wish my university focused more on theory and less on programming which to be fair, I could have picked up on my own (theory on the other hand I would have to know about to learn about which I don&amp;#39;t).&lt;/p&gt;\n\n&lt;p&gt;Also, I am sure employers love when students have been taught all that design patterns, software development methodologies and so on dullness, but - can they pay for it if they want me to learn that? Does it really have to be a &lt;em&gt;core&lt;/em&gt; module? It has exactly nothing to do with computers or computation - it&amp;#39;s sheer business processes.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6lrl", "flair_text": null, "created": 1350378157.0, "created_utc": 1350374557.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "Eridrus", "id": "c6n5yb7", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 12, "body": "This is going to vary a lot between schools, but only 3 of my computer science courses had no programming component.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is going to vary a lot between schools, but only 3 of my computer science courses had no programming component.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n5yb7", "flair_text": null, "created": 1350373336.0, "created_utc": 1350369736.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_11k2gd", "children": [], "author": "JimRoepcke", "id": "c6n5zpa", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 38, "body": "The big lie of computer science departments is getting you to think they train programmers. They train computer scientists. Computer scientists do a lot of programming but they also do a lot of abstract mathematics and writing. If you just want to be a programmer, you don't need a degree, just experience. If you really want a degree in programming, find a software engineering degree like at UVic.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The big lie of computer science departments is getting you to think they train programmers. They train computer scientists. Computer scientists do a lot of programming but they also do a lot of abstract mathematics and writing. If you just want to be a programmer, you don&amp;#39;t need a degree, just experience. If you really want a degree in programming, find a software engineering degree like at UVic.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n5zpa", "flair_text": null, "created": 1350373588.0, "created_utc": 1350369988.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Rumel57", "id": "c6n5qe8", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 4, "body": "Junior in college and most of my classes don't involve much programming. The ones that do involve programming usually make it worth very little of your grade. I would recommend trying hard to get an internship. I got one last year and this year and have learned everything valuable to my future career because of it. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Junior in college and most of my classes don&amp;#39;t involve much programming. The ones that do involve programming usually make it worth very little of your grade. I would recommend trying hard to get an internship. I got one last year and this year and have learned everything valuable to my future career because of it. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n5qe8", "flair_text": null, "created": 1350371929.0, "created_utc": 1350368329.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "DesertSong", "id": "c6n608e", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 4, "body": "I transferred to a pretty good school from a community college for a major involving CS.  I'll be straight with you though.  I programmed a lot more in community college.  Though I hear a lot of hackathon events going on around campus so maybe that's something you'd like to get involved with.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I transferred to a pretty good school from a community college for a major involving CS.  I&amp;#39;ll be straight with you though.  I programmed a lot more in community college.  Though I hear a lot of hackathon events going on around campus so maybe that&amp;#39;s something you&amp;#39;d like to get involved with.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n608e", "flair_text": null, "created": 1350373683.0, "created_utc": 1350370083.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "larrynom", "id": "c6n65lg", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 4, "body": "So far my courses have mostly been covering the concepts, OOP, parallel processing, data structures, algorithms, networks and even project development. We have done a fair bit of java and as well as some c, c++, bash/shell script and even some assembly but all that was mostly just a way to teach the concepts.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So far my courses have mostly been covering the concepts, OOP, parallel processing, data structures, algorithms, networks and even project development. We have done a fair bit of java and as well as some c, c++, bash/shell script and even some assembly but all that was mostly just a way to teach the concepts.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n65lg", "flair_text": null, "created": 1350374705.0, "created_utc": 1350371105.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "com2kid", "id": "c6n76kq", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 5, "body": "Learning fundamentals, such as the common patterns that complex software systems are built out of, how OSs are put together, and other fun stuff like that, is more important than just straight programming.\n\nLikewise, understanding the current abstractions we use for memory (heap, stack, static allocations), what the different levels in the memory hierarchy are (various levels of CPU cache, RAM, Disk), how CPU caches work, what branch prediction is, and other fun stuff, also comes in handy.\n\nA CS degree isn't about teaching you how to program, it is about teaching you about the fundamentals of computations as well as the practical implications of implementing those ideals in the real world. Once you truly understand those, you can program at a much higher level than someone who is just stringing case statements and loops along.\n\nEdit: I should also note, a large part of what a college education is about (or at least supposed to be about!) is critical and analytical thinking skills. Being able to break a problem down into sub problems, recognize patterns of what you have dealt with before, and learning a number of *different* techniques for problem solving.\n\nAn implication of this is that you should pay just as much attention to how you pick your elective classes as you do the classes for your degree. As an example, an class on painting will teach you about positive and negative space, something that is useful in many ways throughout your career. From ensuring your  code is readable to designing positive user experiences. \n\nA class on GIS will show you how different data structure are actually used in the real world, and how another highly technical field makes use of technology.\n\nEconomics will literally teach you an entire new mind set for approaching problems. \n\nA persuasive writing course will teach you how to intelligently present your ideas to others, helping smooth communications along and ensuring that your ideas get their fair share of consideration when technical decisions are being made.\n\nCollege is not about learning how to program. College is about learning to be a well rounded person who can solve a wide variety of problems using a wide variety of skills.\n\nOf course as with anything else in life, you get out what you put into it. \n\nOn a purely practical level, being a well rounded person with a variety of interests opens up a wide variety of job prospects for you. Being able to hold an intelligent discussion on a wide variety of topics makes you extremely valuable. The second software hits the real world, someone has to interface with people of other disciplines. Having respect for, and some understanding of, those other disciplines will make life far easier when that time comes.", "edited": 1350426672.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Learning fundamentals, such as the common patterns that complex software systems are built out of, how OSs are put together, and other fun stuff like that, is more important than just straight programming.&lt;/p&gt;\n\n&lt;p&gt;Likewise, understanding the current abstractions we use for memory (heap, stack, static allocations), what the different levels in the memory hierarchy are (various levels of CPU cache, RAM, Disk), how CPU caches work, what branch prediction is, and other fun stuff, also comes in handy.&lt;/p&gt;\n\n&lt;p&gt;A CS degree isn&amp;#39;t about teaching you how to program, it is about teaching you about the fundamentals of computations as well as the practical implications of implementing those ideals in the real world. Once you truly understand those, you can program at a much higher level than someone who is just stringing case statements and loops along.&lt;/p&gt;\n\n&lt;p&gt;Edit: I should also note, a large part of what a college education is about (or at least supposed to be about!) is critical and analytical thinking skills. Being able to break a problem down into sub problems, recognize patterns of what you have dealt with before, and learning a number of &lt;em&gt;different&lt;/em&gt; techniques for problem solving.&lt;/p&gt;\n\n&lt;p&gt;An implication of this is that you should pay just as much attention to how you pick your elective classes as you do the classes for your degree. As an example, an class on painting will teach you about positive and negative space, something that is useful in many ways throughout your career. From ensuring your  code is readable to designing positive user experiences. &lt;/p&gt;\n\n&lt;p&gt;A class on GIS will show you how different data structure are actually used in the real world, and how another highly technical field makes use of technology.&lt;/p&gt;\n\n&lt;p&gt;Economics will literally teach you an entire new mind set for approaching problems. &lt;/p&gt;\n\n&lt;p&gt;A persuasive writing course will teach you how to intelligently present your ideas to others, helping smooth communications along and ensuring that your ideas get their fair share of consideration when technical decisions are being made.&lt;/p&gt;\n\n&lt;p&gt;College is not about learning how to program. College is about learning to be a well rounded person who can solve a wide variety of problems using a wide variety of skills.&lt;/p&gt;\n\n&lt;p&gt;Of course as with anything else in life, you get out what you put into it. &lt;/p&gt;\n\n&lt;p&gt;On a purely practical level, being a well rounded person with a variety of interests opens up a wide variety of job prospects for you. Being able to hold an intelligent discussion on a wide variety of topics makes you extremely valuable. The second software hits the real world, someone has to interface with people of other disciplines. Having respect for, and some understanding of, those other disciplines will make life far easier when that time comes.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n76kq", "flair_text": null, "created": 1350384014.0, "created_utc": 1350380414.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "zeekar", "id": "c6nnhif", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 5, "body": "You don't get a BS in Computer Science to learn to program.  You can learn to program without a university.  \n\nYou especially don't get a BS in CS to learn any particular programming *languages* (or systems or IDEs or..).  It was beat into our heads over and over that we were learning how computers - and programming systems for them - work, and the details of any particular language or environment were transient and mostly irrelevant.  (One professor used to always say \"Don't sweat the semis\", and often got syntax wrong when writing code on the blackboard.) \n\nWe used Pascal in our intro class, Lisp in our AI class, Modula-2 in our operating systems class, Ada (!) in our introduction to object-oriented design, Smalltalk in our UI class... and then there was the survey course, which covered a different language every week.  Our assembly course was in VAX 11/780, not something more practical like 386 - yet our hardware architecture class (build your own computer on a breadboard) was based on the Motorola 68000.  And they didn't teach us 68000 assembly other than to point us at references, since we understood after the VAX class \"how assembly works\" even though the instruction sets were completely different (*e.g.* no one-instruction differential-equation solver on the 68k).  \n\nIn our file system and graphics classes, I took the option of using C just so I would get familiar with it, but it wasn't required and there was no class in which they taught us C. Yet that was the only language I used in college that has really had any practical value in my career.  (I did briefly have to use Fortran professionally, and I audited a Fortran class, but that wasn't offered by the CS department - it was part of the EE curriculum.)  \n\nWe had to learn these languages well enough to complete the assignments, but we didn't have time to become experts in them.\n\nMany of the programming classes used tools created especially for the class by the instructor.  Our compilers class used a custom parser generator created by the professor, for instance - no LEX or YACC for us.  By the time my now-wife started the same major, they'd stopped using Pascal in the introduction to programming class in favor of a completely made-up language - one designed intentionally to be difficult to write a compiler for, so the students would have to write code on paper and get it right without the benefit of an automatic syntax checker.  (That was the one class where they sweated the semicolons; after that, they stopped worrying about it so much.)  She did use Java in a course, which would have been practical - had she not wound up doing Windows programming, despite not having a lick of C++ or Visual Basic or anything like that in school.\n\nAnd, of course, many of our classes had no programming at all; automata theory certainly didn't.  I had a class on RDBMS theory that didn't include a drop of SQL!\n\n No, the value of my degree, beyond the increased employability right out of school, lay in my acquisition of a deep understanding of what's going on under the covers, all the way down to the bare metal.  Which is a long way down these days. \n\n", "edited": 1350908431.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You don&amp;#39;t get a BS in Computer Science to learn to program.  You can learn to program without a university.  &lt;/p&gt;\n\n&lt;p&gt;You especially don&amp;#39;t get a BS in CS to learn any particular programming &lt;em&gt;languages&lt;/em&gt; (or systems or IDEs or..).  It was beat into our heads over and over that we were learning how computers - and programming systems for them - work, and the details of any particular language or environment were transient and mostly irrelevant.  (One professor used to always say &amp;quot;Don&amp;#39;t sweat the semis&amp;quot;, and often got syntax wrong when writing code on the blackboard.) &lt;/p&gt;\n\n&lt;p&gt;We used Pascal in our intro class, Lisp in our AI class, Modula-2 in our operating systems class, Ada (!) in our introduction to object-oriented design, Smalltalk in our UI class... and then there was the survey course, which covered a different language every week.  Our assembly course was in VAX 11/780, not something more practical like 386 - yet our hardware architecture class (build your own computer on a breadboard) was based on the Motorola 68000.  And they didn&amp;#39;t teach us 68000 assembly other than to point us at references, since we understood after the VAX class &amp;quot;how assembly works&amp;quot; even though the instruction sets were completely different (&lt;em&gt;e.g.&lt;/em&gt; no one-instruction differential-equation solver on the 68k).  &lt;/p&gt;\n\n&lt;p&gt;In our file system and graphics classes, I took the option of using C just so I would get familiar with it, but it wasn&amp;#39;t required and there was no class in which they taught us C. Yet that was the only language I used in college that has really had any practical value in my career.  (I did briefly have to use Fortran professionally, and I audited a Fortran class, but that wasn&amp;#39;t offered by the CS department - it was part of the EE curriculum.)  &lt;/p&gt;\n\n&lt;p&gt;We had to learn these languages well enough to complete the assignments, but we didn&amp;#39;t have time to become experts in them.&lt;/p&gt;\n\n&lt;p&gt;Many of the programming classes used tools created especially for the class by the instructor.  Our compilers class used a custom parser generator created by the professor, for instance - no LEX or YACC for us.  By the time my now-wife started the same major, they&amp;#39;d stopped using Pascal in the introduction to programming class in favor of a completely made-up language - one designed intentionally to be difficult to write a compiler for, so the students would have to write code on paper and get it right without the benefit of an automatic syntax checker.  (That was the one class where they sweated the semicolons; after that, they stopped worrying about it so much.)  She did use Java in a course, which would have been practical - had she not wound up doing Windows programming, despite not having a lick of C++ or Visual Basic or anything like that in school.&lt;/p&gt;\n\n&lt;p&gt;And, of course, many of our classes had no programming at all; automata theory certainly didn&amp;#39;t.  I had a class on RDBMS theory that didn&amp;#39;t include a drop of SQL!&lt;/p&gt;\n\n&lt;p&gt;No, the value of my degree, beyond the increased employability right out of school, lay in my acquisition of a deep understanding of what&amp;#39;s going on under the covers, all the way down to the bare metal.  Which is a long way down these days. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nnhif", "flair_text": null, "created": 1350452755.0, "created_utc": 1350449155.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "tom808", "id": "c6nc7eh", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 3, "body": "&gt;Computers are to computer scientists what telescopes are to astronomers.\n&gt;\n\nI sometimes wish that I had studied software engineering which would probably put me in a better place to get a 'generic' programming job when I graduate. I think I would miss some of the interesting CS only stuff though e.g. networks, AI, software architectures.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Computers are to computer scientists what telescopes are to astronomers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I sometimes wish that I had studied software engineering which would probably put me in a better place to get a &amp;#39;generic&amp;#39; programming job when I graduate. I think I would miss some of the interesting CS only stuff though e.g. networks, AI, software architectures.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nc7eh", "flair_text": null, "created": 1350411184.0, "created_utc": 1350407584.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "pcs600", "id": "c6n6hgf", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 3, "body": "CS major turned programmer here.\nI recommend looking at job listings and seeing what tools companies want you to learn. \nMy degree also involved little real-world programming and skills I acquired on my own helped a lot.\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CS major turned programmer here.\nI recommend looking at job listings and seeing what tools companies want you to learn. \nMy degree also involved little real-world programming and skills I acquired on my own helped a lot.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6hgf", "flair_text": null, "created": 1350377168.0, "created_utc": 1350373568.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "jeffwong", "id": "c6n6ovw", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 3, "body": "Take classes with projects. \n\nUsually a software engineering or user-interface course will involve some heavy programming and a tangible project that is pretty gratifying. \n\nYou can't count on your degree to give you the experience in a specific language or API, though you SHOULD use university CS to give yourself experience in various styles of programming (like implementing programming languages, or user interface programming). Different languages or APIs or certain narrow skills (like optimization for power or games) you should do on your own.\n\nI never implemented a programming language outside of school \n\nOne thing they don't teach well is metacognition: how to be brave, how to relax, how to debug, the metaphysics of your problem at any given moment (known unknowns vs. unknown unknowns). \n\nBut nowadays, there is so much to read and learn from online. I want to say things are easier now, but instead I'll just say that I expect graduates of this decade to be smarter and better than us elders!\n\nGood luck!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take classes with projects. &lt;/p&gt;\n\n&lt;p&gt;Usually a software engineering or user-interface course will involve some heavy programming and a tangible project that is pretty gratifying. &lt;/p&gt;\n\n&lt;p&gt;You can&amp;#39;t count on your degree to give you the experience in a specific language or API, though you SHOULD use university CS to give yourself experience in various styles of programming (like implementing programming languages, or user interface programming). Different languages or APIs or certain narrow skills (like optimization for power or games) you should do on your own.&lt;/p&gt;\n\n&lt;p&gt;I never implemented a programming language outside of school &lt;/p&gt;\n\n&lt;p&gt;One thing they don&amp;#39;t teach well is metacognition: how to be brave, how to relax, how to debug, the metaphysics of your problem at any given moment (known unknowns vs. unknown unknowns). &lt;/p&gt;\n\n&lt;p&gt;But nowadays, there is so much to read and learn from online. I want to say things are easier now, but instead I&amp;#39;ll just say that I expect graduates of this decade to be smarter and better than us elders!&lt;/p&gt;\n\n&lt;p&gt;Good luck!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6ovw", "flair_text": null, "created": 1350378925.0, "created_utc": 1350375325.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "reimg", "id": "c6n72hy", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "The university I went to recently consolidated the theory and practical subjects that make up a computer science major.\n\nProgramming is taught explicitly in the first year, you also do some basic maths or subjects not related to your degree - for breadth. Algorithms, data structures, logic theory and more advanced programming (OOP) are taught in the second year.\n\nThe final year consists of preparation for the software engineering masters (a project and its management) and slightly more theoretical subjects to finish out the degree or do honours/research with (how operating systems, databases, networks work and the basics of IR and AI).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The university I went to recently consolidated the theory and practical subjects that make up a computer science major.&lt;/p&gt;\n\n&lt;p&gt;Programming is taught explicitly in the first year, you also do some basic maths or subjects not related to your degree - for breadth. Algorithms, data structures, logic theory and more advanced programming (OOP) are taught in the second year.&lt;/p&gt;\n\n&lt;p&gt;The final year consists of preparation for the software engineering masters (a project and its management) and slightly more theoretical subjects to finish out the degree or do honours/research with (how operating systems, databases, networks work and the basics of IR and AI).&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n72hy", "flair_text": null, "created": 1350382748.0, "created_utc": 1350379148.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "pandanomic", "id": "c6n72kn", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Wait, so cypherx, this kind of post *is* relevant?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wait, so cypherx, this kind of post &lt;em&gt;is&lt;/em&gt; relevant?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n72kn", "flair_text": null, "created": 1350382775.0, "created_utc": 1350379175.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Bjorkbat", "id": "c6n9iye", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Well, if you want to be a writer, you should do a lot of writing, and maybe get a degree in English, but the latter will merely tell you the \"correct\" way to write and let you in on a few secrets as to how the professionals did it.  Otherwise, if you want to write, you should write.\n\nLikewise, if you want to be a programmer, then you should just do a lot of programming, and maybe get a degree in Computer Science, but the latter will merely tell you the \"correct\" way to program, and let you in on a few secrets as to how the professionals did it.  Otherwise, if you want to write, you should write.\n\nSure, I still program for grades, same as how English majors still write for grades, but they write essays and we write relatively short blocks of code to demonstrate that we actually know (theoretically) what we're doing.\n\nSo, if this really bothers you then you should go out and write a novel.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, if you want to be a writer, you should do a lot of writing, and maybe get a degree in English, but the latter will merely tell you the &amp;quot;correct&amp;quot; way to write and let you in on a few secrets as to how the professionals did it.  Otherwise, if you want to write, you should write.&lt;/p&gt;\n\n&lt;p&gt;Likewise, if you want to be a programmer, then you should just do a lot of programming, and maybe get a degree in Computer Science, but the latter will merely tell you the &amp;quot;correct&amp;quot; way to program, and let you in on a few secrets as to how the professionals did it.  Otherwise, if you want to write, you should write.&lt;/p&gt;\n\n&lt;p&gt;Sure, I still program for grades, same as how English majors still write for grades, but they write essays and we write relatively short blocks of code to demonstrate that we actually know (theoretically) what we&amp;#39;re doing.&lt;/p&gt;\n\n&lt;p&gt;So, if this really bothers you then you should go out and write a novel.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n9iye", "flair_text": null, "created": 1350401238.0, "created_utc": 1350397638.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "itsSparkky", "id": "c6nc6et", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Grad 2 years ago, BSC in Compsci.\n\nProgramming was to compsci like spelling was to english, Arithmetic to Calculus, reading music to playing music. It was just expected that you knew how to do it, your proficiency in it was helpful, but it was assumed you'd got that figured out or at least working before hand.\n\nAnd just like in the english word some people can just spell, others need a dictionary and a spell checker to get the work done... Its easier if you have the background knowledge.\n\nFirst year I had 2 intro programming courses in Java.\n\nSecond year I had a course that touched on Assembly, Scheme, and Prolog, as well as an introduction to SQL and databases. This database course was also to get people up to speed on the academic terminology and relational algebra.\n\nAfter that I used Java, C#, C, C++, php, Scheme, Assembly, Javascript, SQL in classes and it was just assumed I'd learn any languages I didn't know. I rmb spending a lot of time in the lab wrapping my head around pointers in C for example, but I never had a class on it.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Grad 2 years ago, BSC in Compsci.&lt;/p&gt;\n\n&lt;p&gt;Programming was to compsci like spelling was to english, Arithmetic to Calculus, reading music to playing music. It was just expected that you knew how to do it, your proficiency in it was helpful, but it was assumed you&amp;#39;d got that figured out or at least working before hand.&lt;/p&gt;\n\n&lt;p&gt;And just like in the english word some people can just spell, others need a dictionary and a spell checker to get the work done... Its easier if you have the background knowledge.&lt;/p&gt;\n\n&lt;p&gt;First year I had 2 intro programming courses in Java.&lt;/p&gt;\n\n&lt;p&gt;Second year I had a course that touched on Assembly, Scheme, and Prolog, as well as an introduction to SQL and databases. This database course was also to get people up to speed on the academic terminology and relational algebra.&lt;/p&gt;\n\n&lt;p&gt;After that I used Java, C#, C, C++, php, Scheme, Assembly, Javascript, SQL in classes and it was just assumed I&amp;#39;d learn any languages I didn&amp;#39;t know. I rmb spending a lot of time in the lab wrapping my head around pointers in C for example, but I never had a class on it.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nc6et", "flair_text": null, "created": 1350411086.0, "created_utc": 1350407486.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Kennertron", "id": "c6nepeo", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "In the first year of the CS program I went through, they didn't even let you write code in a \"real\" language. Everything was in a type of pseudocode. This was to teach you that *the language doesn't matter,* which was something I rather enjoyed, even if the pseudocode part was a PITA.\n\nIn the 2nd year, they let you use whatever language you wanted to where they had a compiler/interpreter available on the UNIX workstations. So you could use C/C++, Java, Python, PHP, Perl, etc etc. In this case, they were giving you something to design an algorithm for, and the language didn't matter, just the output.\n\nAfter that, we got other stuff, like discrete math, compiler/assembler design, computer architecture, and even a \"languages\" class that taught things such as Prolog and ML and discussed history of procedural vs functional programming. The upper-level data structures classes were all in Java, and the Operating Systems class was in C. The database class was in whichever you preferred, C/C++ or Java. But the language *still* didn't matter.\n\nThe program and courses were designed such that programming languages were just a vehicle for the *concepts* they were teaching. Do you know the concept behind a linked list and where it would be used? How about a command parser? How to implement a relational key system for a database? What about an arithmetic compressor/decompressor?\n\nGood... pick a language and learn the syntax. Now you can *implement* it.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In the first year of the CS program I went through, they didn&amp;#39;t even let you write code in a &amp;quot;real&amp;quot; language. Everything was in a type of pseudocode. This was to teach you that &lt;em&gt;the language doesn&amp;#39;t matter,&lt;/em&gt; which was something I rather enjoyed, even if the pseudocode part was a PITA.&lt;/p&gt;\n\n&lt;p&gt;In the 2nd year, they let you use whatever language you wanted to where they had a compiler/interpreter available on the UNIX workstations. So you could use C/C++, Java, Python, PHP, Perl, etc etc. In this case, they were giving you something to design an algorithm for, and the language didn&amp;#39;t matter, just the output.&lt;/p&gt;\n\n&lt;p&gt;After that, we got other stuff, like discrete math, compiler/assembler design, computer architecture, and even a &amp;quot;languages&amp;quot; class that taught things such as Prolog and ML and discussed history of procedural vs functional programming. The upper-level data structures classes were all in Java, and the Operating Systems class was in C. The database class was in whichever you preferred, C/C++ or Java. But the language &lt;em&gt;still&lt;/em&gt; didn&amp;#39;t matter.&lt;/p&gt;\n\n&lt;p&gt;The program and courses were designed such that programming languages were just a vehicle for the &lt;em&gt;concepts&lt;/em&gt; they were teaching. Do you know the concept behind a linked list and where it would be used? How about a command parser? How to implement a relational key system for a database? What about an arithmetic compressor/decompressor?&lt;/p&gt;\n\n&lt;p&gt;Good... pick a language and learn the syntax. Now you can &lt;em&gt;implement&lt;/em&gt; it.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nepeo", "flair_text": null, "created": 1350419517.0, "created_utc": 1350415917.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "superhash", "id": "c6nfdxg", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Nearly all of my classes involved programming, but none of them taught it. Towards the end of my degree I picked some heavy programming electives such as Computer Vision, Autonomous Multi-Agent Systems(robotics), OOP, and Software Engineering.\n\nAbsolute best decision I could have made, I basically had the perfect skillset for the job I was looking for(high frequency trading). In depth knowledge of theory, confidence in several languages(C, C++, and Java), and completed projects that I could use as code samples. \n\nI had exactly one interview before I graduated and was working fulltime the day after my last final exam. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nearly all of my classes involved programming, but none of them taught it. Towards the end of my degree I picked some heavy programming electives such as Computer Vision, Autonomous Multi-Agent Systems(robotics), OOP, and Software Engineering.&lt;/p&gt;\n\n&lt;p&gt;Absolute best decision I could have made, I basically had the perfect skillset for the job I was looking for(high frequency trading). In depth knowledge of theory, confidence in several languages(C, C++, and Java), and completed projects that I could use as code samples. &lt;/p&gt;\n\n&lt;p&gt;I had exactly one interview before I graduated and was working fulltime the day after my last final exam. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nfdxg", "flair_text": null, "created": 1350421739.0, "created_utc": 1350418139.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "cheese_wizard", "id": "c6nicd3", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "I wish my instructors did not teach any programming.  Why?  Because their approach and style and knowledge was woefully outdated.  The sciency stuff though, was still relevant.  \n\nExample of bad programming from teacher (C++):  \nint doSomethingWithConstString( std:string str ) { ... }  \n\nversus the 'right' way:  \nint doSomethingWithConstString( const std::string&amp; str ) { .. }", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wish my instructors did not teach any programming.  Why?  Because their approach and style and knowledge was woefully outdated.  The sciency stuff though, was still relevant.  &lt;/p&gt;\n\n&lt;p&gt;Example of bad programming from teacher (C++):&lt;br/&gt;\nint doSomethingWithConstString( std:string str ) { ... }  &lt;/p&gt;\n\n&lt;p&gt;versus the &amp;#39;right&amp;#39; way:&lt;br/&gt;\nint doSomethingWithConstString( const std::string&amp;amp; str ) { .. }&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nicd3", "flair_text": null, "created": 1350432144.0, "created_utc": 1350428544.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "glhanes", "id": "c6njrnf", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Theory of computation classes do prepare you for programming, but in a less obvious way. I was complaining that my university prepared students too poorly for real life programming scenarios when one particular theory-oriented classmate stated that people who learn the theory and do well will be good programmers, and people who don't do well with theory won't be good programmers regardless of their other courses.\n\nThis isn't necessarily true, but I think the concept is fundamentally strong and has been pretty congruent with my observations. Computer programming is a dynamic activity. There isn't a set of rules to learn that cover solving every problem. The intrinsic dynamism of software engineering is compounded by the fact that you will almost certainly NOT learn about the technologies you end up using in your job.\n\nLearning how to program is a necessary fundamental, yes, but you'll be a much more valuable engineer if you learn how to be a problem solver.\n\nPlus, on a more practical level, big software takes a long, long time to develop. It's really just not feasible for a group of amateur programmers with no experience dealing with big codebases to make large software that works. The biggest thing I ever worked on in college was a plugin based media player, and that took 7 people with diverse backgrounds a semester (squeezed between other course obligations) to make relatively bug-free.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Theory of computation classes do prepare you for programming, but in a less obvious way. I was complaining that my university prepared students too poorly for real life programming scenarios when one particular theory-oriented classmate stated that people who learn the theory and do well will be good programmers, and people who don&amp;#39;t do well with theory won&amp;#39;t be good programmers regardless of their other courses.&lt;/p&gt;\n\n&lt;p&gt;This isn&amp;#39;t necessarily true, but I think the concept is fundamentally strong and has been pretty congruent with my observations. Computer programming is a dynamic activity. There isn&amp;#39;t a set of rules to learn that cover solving every problem. The intrinsic dynamism of software engineering is compounded by the fact that you will almost certainly NOT learn about the technologies you end up using in your job.&lt;/p&gt;\n\n&lt;p&gt;Learning how to program is a necessary fundamental, yes, but you&amp;#39;ll be a much more valuable engineer if you learn how to be a problem solver.&lt;/p&gt;\n\n&lt;p&gt;Plus, on a more practical level, big software takes a long, long time to develop. It&amp;#39;s really just not feasible for a group of amateur programmers with no experience dealing with big codebases to make large software that works. The biggest thing I ever worked on in college was a plugin based media player, and that took 7 people with diverse backgrounds a semester (squeezed between other course obligations) to make relatively bug-free.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njrnf", "flair_text": null, "created": 1350437784.0, "created_utc": 1350434184.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "mikethepwnstar", "id": "c6n68wp", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Other than advice already given about internships, if you're having a hard time understanding a concept in one of your more theoretical courses, make a goal to implement it yourself in code\n\nEDIT: [This link](http://blog.smartbear.com/software-quality/bid/230121/math-nerds-vs-code-monkeys-should-computer-science-classes-be-more-practical) posted on this subreddit seems a bit relevant", "edited": 1350372225.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Other than advice already given about internships, if you&amp;#39;re having a hard time understanding a concept in one of your more theoretical courses, make a goal to implement it yourself in code&lt;/p&gt;\n\n&lt;p&gt;EDIT: &lt;a href=\"http://blog.smartbear.com/software-quality/bid/230121/math-nerds-vs-code-monkeys-should-computer-science-classes-be-more-practical\"&gt;This link&lt;/a&gt; posted on this subreddit seems a bit relevant&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n68wp", "flair_text": null, "created": 1350375361.0, "created_utc": 1350371761.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "simplyderp", "id": "c6n69d2", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "I'm taking a first semester CS lower division course (of a series of three) and we have programming assignments, labs, and discussion sections every week along with four projects throughout the semester. We did go into \"theory\" stuff like higher order functions and implementation of objects using functions, but at the same time there is an emphasis on writing good, re-usable code. It's still not enough. Thankfully, the clubs host hackathons, workshops, and coding challenges to supplement our classroom experience with practical knowledge.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m taking a first semester CS lower division course (of a series of three) and we have programming assignments, labs, and discussion sections every week along with four projects throughout the semester. We did go into &amp;quot;theory&amp;quot; stuff like higher order functions and implementation of objects using functions, but at the same time there is an emphasis on writing good, re-usable code. It&amp;#39;s still not enough. Thankfully, the clubs host hackathons, workshops, and coding challenges to supplement our classroom experience with practical knowledge.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n69d2", "flair_text": null, "created": 1350375455.0, "created_utc": 1350371855.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "xeonoex", "id": "c6n6x5k", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "My school's computer science program is accredited by ABET (and one more program), which requires both the theoretical and practical parts of the course to be taught. This means that we learn the material in lecture but have to put it to use in code on or own time, for a grade. It also is the reason why we need to take 6 - 7 math courses.\n\nI've programmed for most of my classes, but you will probably learn a lot more practical knowledge from the junior and senior level courses.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My school&amp;#39;s computer science program is accredited by ABET (and one more program), which requires both the theoretical and practical parts of the course to be taught. This means that we learn the material in lecture but have to put it to use in code on or own time, for a grade. It also is the reason why we need to take 6 - 7 math courses.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve programmed for most of my classes, but you will probably learn a lot more practical knowledge from the junior and senior level courses.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6x5k", "flair_text": null, "created": 1350381143.0, "created_utc": 1350377543.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "MachaHack", "id": "c6n6yh7", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Varies by course. Mine is maybe 30-40% programming, which is apparently quite high compared to some other courses. The rest is electronics, maths, theory and then some business/enterprisey organisational BS.\n\nMight be different in the US, but here at least there's no programming knowledge expected going into the course, so you'll already ahead of the rest of your class. If it's anything like my course, your first semester programming will be trivial - teaching you stuff like loops, functions/methods and so on. Also, a lot of colleges are quite slow on catching up with progress, so expect Java to be quite possibly brought up as the pinnacle of programming :(", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Varies by course. Mine is maybe 30-40% programming, which is apparently quite high compared to some other courses. The rest is electronics, maths, theory and then some business/enterprisey organisational BS.&lt;/p&gt;\n\n&lt;p&gt;Might be different in the US, but here at least there&amp;#39;s no programming knowledge expected going into the course, so you&amp;#39;ll already ahead of the rest of your class. If it&amp;#39;s anything like my course, your first semester programming will be trivial - teaching you stuff like loops, functions/methods and so on. Also, a lot of colleges are quite slow on catching up with progress, so expect Java to be quite possibly brought up as the pinnacle of programming :(&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6yh7", "flair_text": null, "created": 1350381525.0, "created_utc": 1350377925.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Require_More_Mineral", "id": "c6n77ib", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "These guys have it pretty much right.  If you want to work on bigger projects to feel more prepared, get an internship/coop, work on something on your own, or join some student org that does such projects (if your school has any).  In all honesty, though, I know a pretty good number of people that have graduated with CS, no internship, same programming experiences as the rest of us, and they do just fine in their jobs.  If you get out into the professional world, and are willing to work hard, you'll learn what you need to quickly.\n\nOf all the people I know and have known while at university, only a handful, regardless of major, actually have a good amount of classes directly preparing them for jobs.  They all have to pick up on the difference between school and work, same as we do.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;These guys have it pretty much right.  If you want to work on bigger projects to feel more prepared, get an internship/coop, work on something on your own, or join some student org that does such projects (if your school has any).  In all honesty, though, I know a pretty good number of people that have graduated with CS, no internship, same programming experiences as the rest of us, and they do just fine in their jobs.  If you get out into the professional world, and are willing to work hard, you&amp;#39;ll learn what you need to quickly.&lt;/p&gt;\n\n&lt;p&gt;Of all the people I know and have known while at university, only a handful, regardless of major, actually have a good amount of classes directly preparing them for jobs.  They all have to pick up on the difference between school and work, same as we do.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n77ib", "flair_text": null, "created": 1350384326.0, "created_utc": 1350380726.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "mind-odyssey", "id": "c6n7fiz", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Most of what I learnt in university wasn't through contact hours. Whether that was programming or theory, the contact hours are are a scarce resource and not sufficient to convey more than a superficial understanding of any subject.\n\nAll is not lost though. Since, as others have mentioned, programming is a mostly experience based skill, and is perfectly suited to self study. At the risk of sounding cliche, get involved in open source. You don't need to be submitting patches, reading the code and tailoring it to solve new problems will suffice while you learn the trade. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Most of what I learnt in university wasn&amp;#39;t through contact hours. Whether that was programming or theory, the contact hours are are a scarce resource and not sufficient to convey more than a superficial understanding of any subject.&lt;/p&gt;\n\n&lt;p&gt;All is not lost though. Since, as others have mentioned, programming is a mostly experience based skill, and is perfectly suited to self study. At the risk of sounding cliche, get involved in open source. You don&amp;#39;t need to be submitting patches, reading the code and tailoring it to solve new problems will suffice while you learn the trade. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n7fiz", "flair_text": null, "created": 1350386890.0, "created_utc": 1350383290.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "60secs", "id": "c6n7ujz", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "To prepare for industry, learn on your own time: verison control, unit testing, basic design patterns, programming by contract, an ide for your language of choice. Do small projects on your own. Use open source projects as libraries for your own projects and read the source code to understand how they work. School does not prepare you for industry, only you can.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;To prepare for industry, learn on your own time: verison control, unit testing, basic design patterns, programming by contract, an ide for your language of choice. Do small projects on your own. Use open source projects as libraries for your own projects and read the source code to understand how they work. School does not prepare you for industry, only you can.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n7ujz", "flair_text": null, "created": 1350391029.0, "created_utc": 1350387429.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Law_Student", "id": "c6n83d0", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "CS degrees are split up roughly between math classes and CS classes.  The math classes will have no coding, but in nearly every CS class you'll have coding projects, so don't worry about getting lots of experience.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CS degrees are split up roughly between math classes and CS classes.  The math classes will have no coding, but in nearly every CS class you&amp;#39;ll have coding projects, so don&amp;#39;t worry about getting lots of experience.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n83d0", "flair_text": null, "created": 1350393062.0, "created_utc": 1350389462.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "idolmind86", "id": "c6n8856", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "At my school I would say it was around 40% programming and 60% theory/math.  And then, the programming projects generally reinforced the theoretical stuff (algorithms, compilers, assembly, etc.).  That's not to say I didn't learn how to program.  \n\nOff the top of my head, I had two semesters of OO programming and then tons of theory. Then an algorithms class that was pretty heavy on programming.  Finally, senior year most classes although theoretical, had a significant programming assignment associated with them.  Mix in a shitload of math and some technical writing &amp; ethics and there you go.\n\nMy program was so heavily math based we were not allowed to minor in math, because via the CS major, we acquired enough credits to claim a math minor had we majored in something else.\n\nAFAIK, CS has never been a \"learn how to program\" major, it has been a \"learn the science of computers\" major.  \n\nIn my professional experience, I see a lot of young CS graduates who come from programs that focus more on programming, and less on theory. In my opinion they are generally less well-rounded and adapt to changing environments less easily.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At my school I would say it was around 40% programming and 60% theory/math.  And then, the programming projects generally reinforced the theoretical stuff (algorithms, compilers, assembly, etc.).  That&amp;#39;s not to say I didn&amp;#39;t learn how to program.  &lt;/p&gt;\n\n&lt;p&gt;Off the top of my head, I had two semesters of OO programming and then tons of theory. Then an algorithms class that was pretty heavy on programming.  Finally, senior year most classes although theoretical, had a significant programming assignment associated with them.  Mix in a shitload of math and some technical writing &amp;amp; ethics and there you go.&lt;/p&gt;\n\n&lt;p&gt;My program was so heavily math based we were not allowed to minor in math, because via the CS major, we acquired enough credits to claim a math minor had we majored in something else.&lt;/p&gt;\n\n&lt;p&gt;AFAIK, CS has never been a &amp;quot;learn how to program&amp;quot; major, it has been a &amp;quot;learn the science of computers&amp;quot; major.  &lt;/p&gt;\n\n&lt;p&gt;In my professional experience, I see a lot of young CS graduates who come from programs that focus more on programming, and less on theory. In my opinion they are generally less well-rounded and adapt to changing environments less easily.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n8856", "flair_text": null, "created": 1350394045.0, "created_utc": 1350390445.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "upstreamsalmon", "id": "c6n8pwg", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Personal projects are the way to go.  Start beefing up your github account.  Also, get involved with some open source projects.  Since the source code is freely available, you can learn some pretty cool methods of doing things.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Personal projects are the way to go.  Start beefing up your github account.  Also, get involved with some open source projects.  Since the source code is freely available, you can learn some pretty cool methods of doing things.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n8pwg", "flair_text": null, "created": 1350397203.0, "created_utc": 1350393603.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "pbl24", "id": "c6n8tv0", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Very little. In most cases, programming is used as a means to the end, not the end in itself. You normally use programming to accomplish some task or help you understand something more completely. When I was an undergraduate, I had a single course that (sort of) focused on programming (and it wasn't even 100% focused): Object-Oriented Concepts with Java. We were learning the theory behind object oriented programming while learning Java. Most other courses focused on theory with assignments that sometimes involved programming to solve.\n\nPro tip: don't go to school to learn programming. Programming languages and tools rarely stand the test of time, and it would be impossible to structure a curriculum around technology. Instead, they tend to focus on theory and concepts; things you can apply irrespective of technology. Programming, in and of itself, isn't the difficult part. It's just a matter of picking up syntaxes and nuances; it's the semantics and problem solving of programming that make it difficult. My advice to you is: start working on projects on the side. You don't have to hack on the Linux kernel to become proficient. Just find something interesting, and get to hacking. Do this and read code. You'll soon learn that your code sucks, and there is much better code out there. You learn. Rinse and repeat.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very little. In most cases, programming is used as a means to the end, not the end in itself. You normally use programming to accomplish some task or help you understand something more completely. When I was an undergraduate, I had a single course that (sort of) focused on programming (and it wasn&amp;#39;t even 100% focused): Object-Oriented Concepts with Java. We were learning the theory behind object oriented programming while learning Java. Most other courses focused on theory with assignments that sometimes involved programming to solve.&lt;/p&gt;\n\n&lt;p&gt;Pro tip: don&amp;#39;t go to school to learn programming. Programming languages and tools rarely stand the test of time, and it would be impossible to structure a curriculum around technology. Instead, they tend to focus on theory and concepts; things you can apply irrespective of technology. Programming, in and of itself, isn&amp;#39;t the difficult part. It&amp;#39;s just a matter of picking up syntaxes and nuances; it&amp;#39;s the semantics and problem solving of programming that make it difficult. My advice to you is: start working on projects on the side. You don&amp;#39;t have to hack on the Linux kernel to become proficient. Just find something interesting, and get to hacking. Do this and read code. You&amp;#39;ll soon learn that your code sucks, and there is much better code out there. You learn. Rinse and repeat.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n8tv0", "flair_text": null, "created": 1350397857.0, "created_utc": 1350394257.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "clrokr", "id": "c6n8yoi", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Ours involved Java, Scheme and Prolog for diversity. That's about it. There was a small bit about assembly, but no specific architecture. The most technical thing was synthesizing a logic function to a circuit by hand. There was some VHDL (this was in Germany), but again just scratching the surface.\nMost of your time will be about algorithms and data structures in general, also a lot of software engineering.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ours involved Java, Scheme and Prolog for diversity. That&amp;#39;s about it. There was a small bit about assembly, but no specific architecture. The most technical thing was synthesizing a logic function to a circuit by hand. There was some VHDL (this was in Germany), but again just scratching the surface.\nMost of your time will be about algorithms and data structures in general, also a lot of software engineering.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n8yoi", "flair_text": null, "created": 1350398576.0, "created_utc": 1350394976.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "dist0rtedwave", "id": "c6n93sm", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "It seems like it varies a lot from school to school. I had plenty of programming at my school and I really don't feel like I missed out on the theory side. I think they can complement each other well.\n\nI do have a quick question for people\n\nWhat department/college does your CS department fall under and how much programming does it have. I wonder if that can be used as a general guideline. I suspect engineering CS departments tend to be more programming based.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It seems like it varies a lot from school to school. I had plenty of programming at my school and I really don&amp;#39;t feel like I missed out on the theory side. I think they can complement each other well.&lt;/p&gt;\n\n&lt;p&gt;I do have a quick question for people&lt;/p&gt;\n\n&lt;p&gt;What department/college does your CS department fall under and how much programming does it have. I wonder if that can be used as a general guideline. I suspect engineering CS departments tend to be more programming based.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n93sm", "flair_text": null, "created": 1350399306.0, "created_utc": 1350395706.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "TyrZaraki", "id": "c6nbwfi", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "I'm a senior about to graduate with a CS degree. Honestly about 2/3 of my classes had some sort of programming in it. But only about 4 classes were actually about programming.\n\nYou need to spend time on your own learning it as well. \n\nFor example I want to dive into mobile and game development so I've taken what I've learned in my CS classes and am applying it to software engineering.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a senior about to graduate with a CS degree. Honestly about 2/3 of my classes had some sort of programming in it. But only about 4 classes were actually about programming.&lt;/p&gt;\n\n&lt;p&gt;You need to spend time on your own learning it as well. &lt;/p&gt;\n\n&lt;p&gt;For example I want to dive into mobile and game development so I&amp;#39;ve taken what I&amp;#39;ve learned in my CS classes and am applying it to software engineering.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nbwfi", "flair_text": null, "created": 1350410143.0, "created_utc": 1350406543.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "minozake", "id": "c6nbyzd", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "My university can't seem to decide if it wants the curriculum to be theoretical or practical (and they keep changing the curriculum around to figure out what's best).  The first two years is all Java, because that's what the companies want--code monkeys that can do Java.  The last two are pretty open, but they focus on software team management and teamwork-oriented courses like software engineering and object-oriented analysis and design.  It feels like the school is a reflection of OOP is the magical silver bullet to everyone's programming woes, and is thus not really a good computer science department.  On top of that, I'm in the mindset that to excel at programming, thus problem solving, you need to be able to solve problems.  The best way to do that is modelling things mathematically.  Hence why I changed into a mathematics major but learn the (dreadfully easy) computer science on the side.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My university can&amp;#39;t seem to decide if it wants the curriculum to be theoretical or practical (and they keep changing the curriculum around to figure out what&amp;#39;s best).  The first two years is all Java, because that&amp;#39;s what the companies want--code monkeys that can do Java.  The last two are pretty open, but they focus on software team management and teamwork-oriented courses like software engineering and object-oriented analysis and design.  It feels like the school is a reflection of OOP is the magical silver bullet to everyone&amp;#39;s programming woes, and is thus not really a good computer science department.  On top of that, I&amp;#39;m in the mindset that to excel at programming, thus problem solving, you need to be able to solve problems.  The best way to do that is modelling things mathematically.  Hence why I changed into a mathematics major but learn the (dreadfully easy) computer science on the side.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nbyzd", "flair_text": null, "created": 1350410384.0, "created_utc": 1350406784.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "MPIS", "id": "c6nc8dn", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "[the best undergraduate curriculum, for reference](http://www.csd.cs.cmu.edu/education/bscs/currreq_12.html).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.csd.cs.cmu.edu/education/bscs/currreq_12.html\"&gt;the best undergraduate curriculum, for reference&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nc8dn", "flair_text": null, "created": 1350411282.0, "created_utc": 1350407682.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "pamplemouse", "id": "c6ndsxu", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "compilers, os, database, programming language theory, robotics. We wrote code in all those classes. But we had only one class freshman year that taught a language. Most already knew it, so only a few people took the class to catch up. \n\nAlso, I've heard of schools that teach data structures by *using* the C++ libraries. That is a shit education. You should learn by *writing* those libraries. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;compilers, os, database, programming language theory, robotics. We wrote code in all those classes. But we had only one class freshman year that taught a language. Most already knew it, so only a few people took the class to catch up. &lt;/p&gt;\n\n&lt;p&gt;Also, I&amp;#39;ve heard of schools that teach data structures by &lt;em&gt;using&lt;/em&gt; the C++ libraries. That is a shit education. You should learn by &lt;em&gt;writing&lt;/em&gt; those libraries. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ndsxu", "flair_text": null, "created": 1350416530.0, "created_utc": 1350412930.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Im_100percent_human", "id": "c6ne6wk", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Anyone can program. If you are interested in computer science, you should be focusing on the skills to solve problems, skills like algorithms, complexity and computational theory.. If you want to just program, be prepared to be disappointed, because your job will go the the developing world.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Anyone can program. If you are interested in computer science, you should be focusing on the skills to solve problems, skills like algorithms, complexity and computational theory.. If you want to just program, be prepared to be disappointed, because your job will go the the developing world.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ne6wk", "flair_text": null, "created": 1350417785.0, "created_utc": 1350414185.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "galipan", "id": "c6nebne", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "At my university it's a very nice mix of both. On the one hand I'm learning design patterns, regular languages and automata, and data structures but other classes make use of them. This might be because my concentration is in video game development, though. It seems as though the gaming industry requires programmers that do both well. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At my university it&amp;#39;s a very nice mix of both. On the one hand I&amp;#39;m learning design patterns, regular languages and automata, and data structures but other classes make use of them. This might be because my concentration is in video game development, though. It seems as though the gaming industry requires programmers that do both well. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nebne", "flair_text": null, "created": 1350418230.0, "created_utc": 1350414630.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "ciaran036", "id": "c6nf42b", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "I'd say at least half... but most CS degrees still revolve classes around programming, even if there isn't much practical application. \n\nMy own university has started a new Software Engineering degree, which promises more actual programming and less CS theory. I don't know if this is true of any other university but I would like to think it was. \n\nI also noticed that similar computing courses were offering more programming classes, in response to demand from employers. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d say at least half... but most CS degrees still revolve classes around programming, even if there isn&amp;#39;t much practical application. &lt;/p&gt;\n\n&lt;p&gt;My own university has started a new Software Engineering degree, which promises more actual programming and less CS theory. I don&amp;#39;t know if this is true of any other university but I would like to think it was. &lt;/p&gt;\n\n&lt;p&gt;I also noticed that similar computing courses were offering more programming classes, in response to demand from employers. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nf42b", "flair_text": null, "created": 1350420860.0, "created_utc": 1350417260.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "CantCatchMeUnawares", "id": "c6nf523", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "You can pick up the languages as you work. It's much more important to have the fundamentals of computer theory in your back pocket. I've meet many who argue this point. None of them got a degree or learned computer theory. When it comes down to \"thinking outside the box,\" I have the tools to outperform them every time.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can pick up the languages as you work. It&amp;#39;s much more important to have the fundamentals of computer theory in your back pocket. I&amp;#39;ve meet many who argue this point. None of them got a degree or learned computer theory. When it comes down to &amp;quot;thinking outside the box,&amp;quot; I have the tools to outperform them every time.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nf523", "flair_text": null, "created": 1350420947.0, "created_utc": 1350417347.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "rkenned", "id": "c6nfe7f", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Once you learn the basics, learning new languages and tools are easy.  Don't get hung up on the fact that you don't know Spring, Hibernate, rails, etc...  \n\nThe two things that were hardest for me to grasp were as follows.\n\n1.  Real code has to be maintained and your goal in writing it should be reuse.  In college, almost every assignment has nothing to do with any code you've already written, so you're constantly starting over from scratch.  Therefore you never really focus on making readable code and good high level design decisions.  You only care that you meet the requirements of your assignment.  That doesn't fly in the real world.  \n\n2.  College assignments are at most a couple thousand lines of code.  College professors like to stress how important certain abstractions are, but it is hard to see when you're intimately familiar with every LOC in a codebase.  When you make the switch to working on multiple projects that are each over 100K LOC, it is becomes very difficult at first.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Once you learn the basics, learning new languages and tools are easy.  Don&amp;#39;t get hung up on the fact that you don&amp;#39;t know Spring, Hibernate, rails, etc...  &lt;/p&gt;\n\n&lt;p&gt;The two things that were hardest for me to grasp were as follows.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Real code has to be maintained and your goal in writing it should be reuse.  In college, almost every assignment has nothing to do with any code you&amp;#39;ve already written, so you&amp;#39;re constantly starting over from scratch.  Therefore you never really focus on making readable code and good high level design decisions.  You only care that you meet the requirements of your assignment.  That doesn&amp;#39;t fly in the real world.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;College assignments are at most a couple thousand lines of code.  College professors like to stress how important certain abstractions are, but it is hard to see when you&amp;#39;re intimately familiar with every LOC in a codebase.  When you make the switch to working on multiple projects that are each over 100K LOC, it is becomes very difficult at first.  &lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nfe7f", "flair_text": null, "created": 1350421764.0, "created_utc": 1350418164.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "5outh", "id": "c6nftt3", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "My CS program is pretty open-ended in this regard. We've got 39 hours of upper-level electives to fill in order to graduate, so we're able to sort of pick and choose what we think is most important. I've chosen to litter my schedule with abstract mathematics courses because I think they're actually more important than the programming-heavy ones.\n\nPersonally, I have no trouble with picking up programming languages. I learned my first one (Groovy) during a full-time internship and it got me up to speed. Once you get the ideas down, though, learning new languages isn't very hard. It's basically just a matter of learning new syntax for ideas you already know and getting to know a couple of key concepts (going from Java to C and learning about pointers is an example).\n\nWith that said, I think the theory is infinitely more important. Technology changes. You may program in several different languages when you get out of college, but they all have the theory in common. If you know how quicksort works, you'll be able to implement it in whatever programming language you want. Syntax, on the other hand, is in no way universal.\n\nBut, you should definitely pick up a programming language on your own. There are plenty out there and you'll do just fine if you are genuinely interested in learning programming. Think about the theory that you learn about in school and try to implement some of that stuff. That's what will make you a better programmer (AND thinker, this is important).\n\nGood luck!\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My CS program is pretty open-ended in this regard. We&amp;#39;ve got 39 hours of upper-level electives to fill in order to graduate, so we&amp;#39;re able to sort of pick and choose what we think is most important. I&amp;#39;ve chosen to litter my schedule with abstract mathematics courses because I think they&amp;#39;re actually more important than the programming-heavy ones.&lt;/p&gt;\n\n&lt;p&gt;Personally, I have no trouble with picking up programming languages. I learned my first one (Groovy) during a full-time internship and it got me up to speed. Once you get the ideas down, though, learning new languages isn&amp;#39;t very hard. It&amp;#39;s basically just a matter of learning new syntax for ideas you already know and getting to know a couple of key concepts (going from Java to C and learning about pointers is an example).&lt;/p&gt;\n\n&lt;p&gt;With that said, I think the theory is infinitely more important. Technology changes. You may program in several different languages when you get out of college, but they all have the theory in common. If you know how quicksort works, you&amp;#39;ll be able to implement it in whatever programming language you want. Syntax, on the other hand, is in no way universal.&lt;/p&gt;\n\n&lt;p&gt;But, you should definitely pick up a programming language on your own. There are plenty out there and you&amp;#39;ll do just fine if you are genuinely interested in learning programming. Think about the theory that you learn about in school and try to implement some of that stuff. That&amp;#39;s what will make you a better programmer (AND thinker, this is important).&lt;/p&gt;\n\n&lt;p&gt;Good luck!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nftt3", "flair_text": null, "created": 1350423171.0, "created_utc": 1350419571.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "Gavcradd", "id": "c6ng19o", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "My CS degree was back in 1998 to 2002, also in the UK...\n\nThe majority of it WAS programming - Java, C, C++, VB, assembly, etc. There were also a fair few maths modules, quite a lot of relational database stuff (in Oracle, SQL stuff), a history of Computing module, a module on the Internet (remember this was back in the late 90s), some stuff on creating GUIs, a module on artificial intelligence, err that's about all I can remember.\n\nThe important thing though is this - I use NONE of what I was taught at Uni. I was already a competent, if novice programmer before I started uni but didn't ever feel the love for Java or C++ (C was nice!). The 3rd year of uni was a sandwich placement, where I worked for a local company for 12 months. I was a glorified help desk techy, but taught myself ASP web programming to solve a few problems. Fast forward the the final year of uni and my large projects were all doe in ASP. I then worked for a little while as a web programmer before moving into teaching.\n\nDon't let anyone tell you what a CS course should be, it needs to be whatever you're interested in. If you want to focus on programming, find a course that does that. If not, find something for you and don't listen to what people say you \"should\" do!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My CS degree was back in 1998 to 2002, also in the UK...&lt;/p&gt;\n\n&lt;p&gt;The majority of it WAS programming - Java, C, C++, VB, assembly, etc. There were also a fair few maths modules, quite a lot of relational database stuff (in Oracle, SQL stuff), a history of Computing module, a module on the Internet (remember this was back in the late 90s), some stuff on creating GUIs, a module on artificial intelligence, err that&amp;#39;s about all I can remember.&lt;/p&gt;\n\n&lt;p&gt;The important thing though is this - I use NONE of what I was taught at Uni. I was already a competent, if novice programmer before I started uni but didn&amp;#39;t ever feel the love for Java or C++ (C was nice!). The 3rd year of uni was a sandwich placement, where I worked for a local company for 12 months. I was a glorified help desk techy, but taught myself ASP web programming to solve a few problems. Fast forward the the final year of uni and my large projects were all doe in ASP. I then worked for a little while as a web programmer before moving into teaching.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t let anyone tell you what a CS course should be, it needs to be whatever you&amp;#39;re interested in. If you want to focus on programming, find a course that does that. If not, find something for you and don&amp;#39;t listen to what people say you &amp;quot;should&amp;quot; do!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ng19o", "flair_text": null, "created": 1350423840.0, "created_utc": 1350420240.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "[deleted]", "id": "c6ng4pl", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Just adding on to what others say. You will never stop learning how to program. There's always some new/better technique, there usually are features in the programming language that you don't know about.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just adding on to what others say. You will never stop learning how to program. There&amp;#39;s always some new/better technique, there usually are features in the programming language that you don&amp;#39;t know about.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ng4pl", "flair_text": null, "created": 1350424153.0, "created_utc": 1350420553.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "gtkevo", "id": "c6nhh9b", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "My experience is that you take a few intro to programming language classes in the Freshman and Sophmore years. The next two years are using one of those languages for projects. Sometimes you will have a class that requires you to use a specific ide like XCode for ios mobile dev or Unity for game dev. \n\nUndergrad for me was very specific to what language you had to use but the focus was more on the implementation of projects.\n\nIn graduate school it was completely different. You come up with a project and then implement it in any way that you want.\n\nThis was my experience. I go to Ga Tech for reference. Hope this was useful!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My experience is that you take a few intro to programming language classes in the Freshman and Sophmore years. The next two years are using one of those languages for projects. Sometimes you will have a class that requires you to use a specific ide like XCode for ios mobile dev or Unity for game dev. &lt;/p&gt;\n\n&lt;p&gt;Undergrad for me was very specific to what language you had to use but the focus was more on the implementation of projects.&lt;/p&gt;\n\n&lt;p&gt;In graduate school it was completely different. You come up with a project and then implement it in any way that you want.&lt;/p&gt;\n\n&lt;p&gt;This was my experience. I go to Ga Tech for reference. Hope this was useful!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nhh9b", "flair_text": null, "created": 1350428809.0, "created_utc": 1350425209.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "screwthat4u", "id": "c6nirkq", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "There are normally a couple language classes, c/c++ or java depending on the school, then you will have algorithms and data structures which should involve programming, digital logic and computer arch didn't have any programming for me, but there were other courses that may/may not be at your school that involve programming: compilers, x86 assembly, operating systems, programming languages, etc -- depending on your electives etc", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are normally a couple language classes, c/c++ or java depending on the school, then you will have algorithms and data structures which should involve programming, digital logic and computer arch didn&amp;#39;t have any programming for me, but there were other courses that may/may not be at your school that involve programming: compilers, x86 assembly, operating systems, programming languages, etc -- depending on your electives etc&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nirkq", "flair_text": null, "created": 1350433829.0, "created_utc": 1350430229.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "spevak", "id": "c6njd4j", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "You really shouldn't worry about \"learning a good amount of languages.\" Once you have a solid understanding of certain important concepts in programming- program flow, data structures, commonly used algorithms, different programming paradigms, etc. - it will take a very short time to pick up a new language (no more than a week or two).  Also, you won't need a course to learn the new languages, you'll be able to figure it out from online documentation.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You really shouldn&amp;#39;t worry about &amp;quot;learning a good amount of languages.&amp;quot; Once you have a solid understanding of certain important concepts in programming- program flow, data structures, commonly used algorithms, different programming paradigms, etc. - it will take a very short time to pick up a new language (no more than a week or two).  Also, you won&amp;#39;t need a course to learn the new languages, you&amp;#39;ll be able to figure it out from online documentation.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njd4j", "flair_text": null, "created": 1350436180.0, "created_utc": 1350432580.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Rokhmal112358", "id": "c6njeyn", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "I have a BS in computer science from UTSA. Once I completed my core classes, I never had a semester where I was doing no programming in at least one of my classes. The curriculum was basically each semester you took at least one programming course with programming assignments and labs weekly and a few major projects. The electives and secondary classes tended to have programming projects and tried to relate theoretical problems to coding. I ended up with a strong knowledge of Linux systems, scripting, perl, C/C++ and java. With this knowledge I can pick up another language by writing a few programs over a week, and have done so with python, batch and VBS.\n\nI should mention that I was fortunate to find an internship with a defense contractor the summer before I graduated. I was able to get an elective credit for this internship. I was given a huge opportunity to apply my knowledge and learn how the industry works. I ended up being offered a job as soon as I finished my degree and have been there about 2 years now. \n\nSeeking an internship gives you experience, contacts and knowledge that you just can't find from a university class. Also, just put yourself out there. Join programming or CS clubs/societies/competitions. Some to look out for: ACM, Computer Security club/assn, Upsilon Pi Epsilon, ccdc. Experience can be gained from all of these.\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have a BS in computer science from UTSA. Once I completed my core classes, I never had a semester where I was doing no programming in at least one of my classes. The curriculum was basically each semester you took at least one programming course with programming assignments and labs weekly and a few major projects. The electives and secondary classes tended to have programming projects and tried to relate theoretical problems to coding. I ended up with a strong knowledge of Linux systems, scripting, perl, C/C++ and java. With this knowledge I can pick up another language by writing a few programs over a week, and have done so with python, batch and VBS.&lt;/p&gt;\n\n&lt;p&gt;I should mention that I was fortunate to find an internship with a defense contractor the summer before I graduated. I was able to get an elective credit for this internship. I was given a huge opportunity to apply my knowledge and learn how the industry works. I ended up being offered a job as soon as I finished my degree and have been there about 2 years now. &lt;/p&gt;\n\n&lt;p&gt;Seeking an internship gives you experience, contacts and knowledge that you just can&amp;#39;t find from a university class. Also, just put yourself out there. Join programming or CS clubs/societies/competitions. Some to look out for: ACM, Computer Security club/assn, Upsilon Pi Epsilon, ccdc. Experience can be gained from all of these.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njeyn", "flair_text": null, "created": 1350436388.0, "created_utc": 1350432788.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11k2gd", "children": [], "author": "ponchedeburro", "id": "c6njgjq", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 5, "body": "We had a lot of programming. But it was mostly the weekly handins which should show we could do something practical with the theory we learned.\n\nOur bachelor project was to write a compiler for a subset of Java.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;We had a lot of programming. But it was mostly the weekly handins which should show we could do something practical with the theory we learned.&lt;/p&gt;\n\n&lt;p&gt;Our bachelor project was to write a compiler for a subset of Java.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njgjq", "flair_text": null, "created": 1350436564.0, "created_utc": 1350432964.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "pencildiet", "id": "c6njog4", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Get involved in projects, work with groups that are as diverse as possible, and if not that then a diverse selection of groups.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Get involved in projects, work with groups that are as diverse as possible, and if not that then a diverse selection of groups.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njog4", "flair_text": null, "created": 1350437430.0, "created_utc": 1350433830.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "TehGogglesDoNothing", "id": "c6nlwi3", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "&gt; I am excited to learn about computer theory, but when it comes to making actual programs with languages that involve things that would solve real world applications, rather than small little programs involving single algorithms and such, or also learning a good amount of languages to get me prepared for life outside college, I am worried not enough focus will go into it.\n\nI'll go ahead and tell you, they probably won't put a lot of focus into programming for job training.  However, once you accept that all big problems are really just a group of small problems, it becomes much easier.  Keep trying to learn more about things that interest you and try to find an internship or two.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I am excited to learn about computer theory, but when it comes to making actual programs with languages that involve things that would solve real world applications, rather than small little programs involving single algorithms and such, or also learning a good amount of languages to get me prepared for life outside college, I am worried not enough focus will go into it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;ll go ahead and tell you, they probably won&amp;#39;t put a lot of focus into programming for job training.  However, once you accept that all big problems are really just a group of small problems, it becomes much easier.  Keep trying to learn more about things that interest you and try to find an internship or two.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nlwi3", "flair_text": null, "created": 1350446010.0, "created_utc": 1350442410.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "spacelibby", "id": "c6nmi4d", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Ok seriously?  I can't remember a single CS course in college that didn't involve programming.  We were taught theory, but we pretty much always had to demonstrate the theory with programs.\n\nIf your school isn't making you program I'd start doing your own projects.  As far as languages go, once you know the basics of programming languages picking new ones up isn't that hard.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ok seriously?  I can&amp;#39;t remember a single CS course in college that didn&amp;#39;t involve programming.  We were taught theory, but we pretty much always had to demonstrate the theory with programs.&lt;/p&gt;\n\n&lt;p&gt;If your school isn&amp;#39;t making you program I&amp;#39;d start doing your own projects.  As far as languages go, once you know the basics of programming languages picking new ones up isn&amp;#39;t that hard.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nmi4d", "flair_text": null, "created": 1350448456.0, "created_utc": 1350444856.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "spitzanator", "id": "c6nn2pq", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "At the end of the day, the programming itself isn't the difficult part of being a professional in computer science. Understanding how the systems and algorithms work, and depending on what you're doing exactly, the math behind it all is a lot of what you end up working on.  And if you really understand what's going on, you can make smart architectural and programming decisions that end up saving piles of time relative to knowing all the ins and outs of a particular language.\n\nThat said, if you want to program more, there's no one stopping you.  Just go do it!  And if you need a class, there are a bunch online.  The Scala course on Coursera has been pretty interesting over the last few weeks, for example: https://www.coursera.org/course/progfun", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At the end of the day, the programming itself isn&amp;#39;t the difficult part of being a professional in computer science. Understanding how the systems and algorithms work, and depending on what you&amp;#39;re doing exactly, the math behind it all is a lot of what you end up working on.  And if you really understand what&amp;#39;s going on, you can make smart architectural and programming decisions that end up saving piles of time relative to knowing all the ins and outs of a particular language.&lt;/p&gt;\n\n&lt;p&gt;That said, if you want to program more, there&amp;#39;s no one stopping you.  Just go do it!  And if you need a class, there are a bunch online.  The Scala course on Coursera has been pretty interesting over the last few weeks, for example: &lt;a href=\"https://www.coursera.org/course/progfun\"&gt;https://www.coursera.org/course/progfun&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nn2pq", "flair_text": null, "created": 1350450874.0, "created_utc": 1350447274.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "qihqi", "id": "c6nn9cc", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "As little as you want, or as much as you want. \nThe required CS curriculum for me is 4 upperlevel CS course,\nyou can only do theorical courses or only practical ones. I did OS, algo, OOP, and Game and I feel pretty well trained in programming. I didnt do any personal projects by that time.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As little as you want, or as much as you want. \nThe required CS curriculum for me is 4 upperlevel CS course,\nyou can only do theorical courses or only practical ones. I did OS, algo, OOP, and Game and I feel pretty well trained in programming. I didnt do any personal projects by that time.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nn9cc", "flair_text": null, "created": 1350451697.0, "created_utc": 1350448097.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "phoresy", "id": "c6nnvjj", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Honestly not a lot and this is a good thing.\n\nProgramming is to Computer Science as spelling is to writing Poetry.\n\nIt is a basic and somewhat trivial skill that you are expected to have picked up by the third semester.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Honestly not a lot and this is a good thing.&lt;/p&gt;\n\n&lt;p&gt;Programming is to Computer Science as spelling is to writing Poetry.&lt;/p&gt;\n\n&lt;p&gt;It is a basic and somewhat trivial skill that you are expected to have picked up by the third semester.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nnvjj", "flair_text": null, "created": 1350454698.0, "created_utc": 1350451098.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "abedavis", "id": "c6novt8", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Different schools are going to have very different approaches here. I have a B.S. from Stanford and am working on my PhD at MIT, so I can only speak to those two schools. At Stanford we did a lot of programming, and a lot of it was in groups. There was a real focus on putting theory into practice. At MIT there is less of this, but in exchange students seem to have a bit more background in math and electrical engineering.\n\nAt both schools I think there is a lot of freedom to make your education more theoretical or more applied by choosing different classes. It's probably good to think about what you want to be doing when you graduate and pick your courses based on what will best help you accomplish the goals you set.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Different schools are going to have very different approaches here. I have a B.S. from Stanford and am working on my PhD at MIT, so I can only speak to those two schools. At Stanford we did a lot of programming, and a lot of it was in groups. There was a real focus on putting theory into practice. At MIT there is less of this, but in exchange students seem to have a bit more background in math and electrical engineering.&lt;/p&gt;\n\n&lt;p&gt;At both schools I think there is a lot of freedom to make your education more theoretical or more applied by choosing different classes. It&amp;#39;s probably good to think about what you want to be doing when you graduate and pick your courses based on what will best help you accomplish the goals you set.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6novt8", "flair_text": null, "created": 1350460899.0, "created_utc": 1350457299.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "swishsky", "id": "c6nzr9n", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "Let me guess, are you in community college?\n\nI'm in my third year of college. \n\nThe first year I went to a high end university, and I learned so much about computer science in just a quarter.\n\nThe past two years I have been going to a community college, and I haven't learned much. Overall, I have taken probably taken four computer science classes (C++, 2 Java, Fundamentals, Data structures next semester) but I still feel very inadequate when it comes to practical applications. Why? I never had a job or an internship.\n\nIf you are already in university, you should be actively searching for internships. It should be fairly easy at a university. If you are in CC,  wait until you transfer to a university or attend job fairs.\n\nEither way, you should be doing your own projects. I learned this the hard way, but I still have only a few projects up my sleeve. These projects are not only to put on your resume, but they are probably the main method of learning how to deal with practical coding applications besides getting a job. The trick is looking for projects that are just out of your range, so you can improve and learn more while you build it. I'm just waiting to transfer out though so I can get more experience at a university.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Let me guess, are you in community college?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m in my third year of college. &lt;/p&gt;\n\n&lt;p&gt;The first year I went to a high end university, and I learned so much about computer science in just a quarter.&lt;/p&gt;\n\n&lt;p&gt;The past two years I have been going to a community college, and I haven&amp;#39;t learned much. Overall, I have taken probably taken four computer science classes (C++, 2 Java, Fundamentals, Data structures next semester) but I still feel very inadequate when it comes to practical applications. Why? I never had a job or an internship.&lt;/p&gt;\n\n&lt;p&gt;If you are already in university, you should be actively searching for internships. It should be fairly easy at a university. If you are in CC,  wait until you transfer to a university or attend job fairs.&lt;/p&gt;\n\n&lt;p&gt;Either way, you should be doing your own projects. I learned this the hard way, but I still have only a few projects up my sleeve. These projects are not only to put on your resume, but they are probably the main method of learning how to deal with practical coding applications besides getting a job. The trick is looking for projects that are just out of your range, so you can improve and learn more while you build it. I&amp;#39;m just waiting to transfer out though so I can get more experience at a university.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nzr9n", "flair_text": null, "created": 1350514171.0, "created_utc": 1350510571.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "Baikley", "id": "c6oj9ew", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "from what I can tell it really depends on the school and it depends on the person. if you have awesome discipline you may not need school (a community college would be sufficient to get up to speed in math--up to linear algebra if you want), physics if you want, can learn some other programming concepts, and then just study whatever interests you very inexpensively. if you can get into a really good school then I'd suggest going to college, if not then maybe not. (as a transfer if you think that is best--it is certainly cheaper!)\n\n[here](http://www.usnews.com/education/worlds-best-universities-rankings/best-universities-computer-science) is one ranking. my school is so far down so I don't like this ranking :( lol but here it is anyways", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;from what I can tell it really depends on the school and it depends on the person. if you have awesome discipline you may not need school (a community college would be sufficient to get up to speed in math--up to linear algebra if you want), physics if you want, can learn some other programming concepts, and then just study whatever interests you very inexpensively. if you can get into a really good school then I&amp;#39;d suggest going to college, if not then maybe not. (as a transfer if you think that is best--it is certainly cheaper!)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.usnews.com/education/worlds-best-universities-rankings/best-universities-computer-science\"&gt;here&lt;/a&gt; is one ranking. my school is so far down so I don&amp;#39;t like this ranking :( lol but here it is anyways&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oj9ew", "flair_text": null, "created": 1350604196.0, "created_utc": 1350600596.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "Bedrovelsen", "id": "c6p65sm", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "I did 2 years at a technical school and got a Diploma in Computer Systems, All but 3 classes over the two year delt with computers, mostly programming, but networking and hardware as well. It was really awesome. They have an agreement with the local uni by which me and a few others from the technical school transfered into 3rd year at the uni, I have done a bit more than a year of courses there and will be done my Bsc next aprilish. Compared to the tech school, the uni is very very sub standard with the amount of computer science classes you take as part of a degree, however there are many I have gotten to take that are very interesting, altho not really important in industry as far as knowledge. I think the technical school gave me a very awesome background in how everything works together, projects, and more 'job' stuff, and the uni is simply refining my skills mostly as a programmer. I can't think of how much less I would know if I had done all 4 years at the uni rather then a diploma from the tech school first.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I did 2 years at a technical school and got a Diploma in Computer Systems, All but 3 classes over the two year delt with computers, mostly programming, but networking and hardware as well. It was really awesome. They have an agreement with the local uni by which me and a few others from the technical school transfered into 3rd year at the uni, I have done a bit more than a year of courses there and will be done my Bsc next aprilish. Compared to the tech school, the uni is very very sub standard with the amount of computer science classes you take as part of a degree, however there are many I have gotten to take that are very interesting, altho not really important in industry as far as knowledge. I think the technical school gave me a very awesome background in how everything works together, projects, and more &amp;#39;job&amp;#39; stuff, and the uni is simply refining my skills mostly as a programmer. I can&amp;#39;t think of how much less I would know if I had done all 4 years at the uni rather then a diploma from the tech school first.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6p65sm", "flair_text": null, "created": 1350716252.0, "created_utc": 1350712652.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k2gd", "children": [], "author": "j03", "id": "c6vzy1j", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Hardly Any. For my course, you **NEED** to program outside of the course if you want to impress any sort of potential employer. Students need to know this. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hardly Any. For my course, you &lt;strong&gt;NEED&lt;/strong&gt; to program outside of the course if you want to impress any sort of potential employer. Students need to know this. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6vzy1j", "flair_text": null, "created": 1351991896.0, "created_utc": 1351988296.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "CS_Sr", "id": "c6n61sr", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 3, "body": "Graduating in December.\n\nIf you're a fist-semester sophomore, I would expect to have at least a couple of courses that are programming intensive this semester and then next 2 semesters with a haevy programming courseload. End of junior year and through senior year, I would expect the number of courses that are heavily programming based to be ~2, but in your other classes lots of small modelling projects (heavy theory based courses). This is of course dependent on how you schedule your courses, since the technical electives vary in programming intensity.\n\nAll being considered, the balance between programming and theory you get from your formal education will depend on your college.\n\nIf you are looking for more (interesting) programming projects, look for internships, set-up and use github/sourceforge/etc..., undergrad research, or get involved in open-source software (even helping with documentation is a help).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Graduating in December.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re a fist-semester sophomore, I would expect to have at least a couple of courses that are programming intensive this semester and then next 2 semesters with a haevy programming courseload. End of junior year and through senior year, I would expect the number of courses that are heavily programming based to be ~2, but in your other classes lots of small modelling projects (heavy theory based courses). This is of course dependent on how you schedule your courses, since the technical electives vary in programming intensity.&lt;/p&gt;\n\n&lt;p&gt;All being considered, the balance between programming and theory you get from your formal education will depend on your college.&lt;/p&gt;\n\n&lt;p&gt;If you are looking for more (interesting) programming projects, look for internships, set-up and use github/sourceforge/etc..., undergrad research, or get involved in open-source software (even helping with documentation is a help).&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n61sr", "flair_text": null, "created": 1350373960.0, "created_utc": 1350370360.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "ryancohen", "id": "c6n7lfy", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 3, "body": "I'm also a sophomore, and currently taking CS I. I'm surprised, we code everyday..", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m also a sophomore, and currently taking CS I. I&amp;#39;m surprised, we code everyday..&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n7lfy", "flair_text": null, "created": 1350388655.0, "created_utc": 1350385055.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11k2gd", "children": [], "author": "funbrigade", "id": "c6n6kgr", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 7, "body": "As a fourth year CSE major I can confirm I do a lot of substantial programming.  It's hard for me to really see someone call themselves a \"computer scientist\" if they lack the ability to program.  Otherwise they're just someone who can't prove they know how to implement an algorithm they read about on wikipedia or something.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As a fourth year CSE major I can confirm I do a lot of substantial programming.  It&amp;#39;s hard for me to really see someone call themselves a &amp;quot;computer scientist&amp;quot; if they lack the ability to program.  Otherwise they&amp;#39;re just someone who can&amp;#39;t prove they know how to implement an algorithm they read about on wikipedia or something.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n6kgr", "flair_text": null, "created": 1350377846.0, "created_utc": 1350374246.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "[deleted]", "id": "c6needb", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "[deleted]", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6needb", "flair_text": null, "created": 1350418483.0, "created_utc": 1350414883.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11k2gd", "children": [], "author": "All_the_Science", "id": "c6n8oyw", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 1, "body": "This may not be the general case, but in the University that I attend, the first two years of CS were just simple little programs like you have been making. But in the third year the amount of programming that students are expected to do has increased dramatically. I know quite a few people that spend upwords of 10 hours a day in the lab working on their projects.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This may not be the general case, but in the University that I attend, the first two years of CS were just simple little programs like you have been making. But in the third year the amount of programming that students are expected to do has increased dramatically. I know quite a few people that spend upwords of 10 hours a day in the lab working on their projects.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n8oyw", "flair_text": null, "created": 1350397051.0, "created_utc": 1350393451.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "adremeaux", "id": "c6nilmw", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "I'd say probably 10 of our 16 required courses involved meaningful programming. Not of those actually got us ready for the real world, though.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d say probably 10 of our 16 required courses involved meaningful programming. Not of those actually got us ready for the real world, though.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nilmw", "flair_text": null, "created": 1350433193.0, "created_utc": 1350429593.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "0xfoobar", "id": "c6nljyh", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "First and foremost, the main focus of an undergraduate CS program in any university is to prepare the future PhD degree candidates.  It's NOT a degree you pursue for four years and find a job as a programmer.  If your goal is to hit the job market and tag the \"programmer\" title to your name, go to a trade school and learn the technology/programming language of the day.  I have seen my share of spaghetti codes called programs by people who proudly tag the title \"Programmer\", \"Developer\", \"Software Engineer\" to their email signature and business cards. They are all from the trade schools and no-name universities/colleges.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First and foremost, the main focus of an undergraduate CS program in any university is to prepare the future PhD degree candidates.  It&amp;#39;s NOT a degree you pursue for four years and find a job as a programmer.  If your goal is to hit the job market and tag the &amp;quot;programmer&amp;quot; title to your name, go to a trade school and learn the technology/programming language of the day.  I have seen my share of spaghetti codes called programs by people who proudly tag the title &amp;quot;Programmer&amp;quot;, &amp;quot;Developer&amp;quot;, &amp;quot;Software Engineer&amp;quot; to their email signature and business cards. They are all from the trade schools and no-name universities/colleges.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nljyh", "flair_text": null, "created": 1350444354.0, "created_utc": 1350440754.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11k2gd", "children": [], "author": "SiliconGuy", "id": "c6nr1ld", "parent_id": "t3_11k2gd", "score": 0, "approved_by": null, "upvotes": 2, "body": "Programming is too easy to justify a university degree in it. Learn it on your own.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Programming is too easy to justify a university degree in it. Learn it on your own.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nr1ld", "flair_text": null, "created": 1350481798.0, "created_utc": 1350478198.0, "num_reports": null}], "score": 61, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 94, "hidden": false, "thumbnail": "", "edited": 1350961857.0, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11k2gd/people_who_have_a_bs_in_computer_science_how_much/", "has_more_comments": false, "name": "t3_11k2gd", "created": 1350368987.0, "url": "http://www.reddit.com/r/compsci/comments/11k2gd/people_who_have_a_bs_in_computer_science_how_much/", "author_flair_text": null, "author": "Silver_Stang", "created_utc": 1350365387.0, "link_flair_text": null, "media": null, "num_reports": null}, "329": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 11, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have the following homework question: Explain why the following is not a legal Turing machine:\nM= &amp;quot;The input is a polynomial over variables x1, x2, ..., xk.\n1. Try all possible settings of x1,...,xk to integer values.\n2. Evaluate p on all of these settings.\n3. If any of these settings evaluate to 0, accept. Otherwise, reject.&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;My answer is: The above machine needs all possible integers to be provided in the input to perform the computation. Because these have not been supplied, this is not a valid Turing machine.&lt;/p&gt;\n\n&lt;p&gt;Is this correct?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have the following homework question: Explain why the following is not a legal Turing machine:\nM= \"The input is a polynomial over variables x1, x2, ..., xk.\n1. Try all possible settings of x1,...,xk to integer values.\n2. Evaluate p on all of these settings.\n3. If any of these settings evaluate to 0, accept. Otherwise, reject.\"\n\nMy answer is: The above machine needs all possible integers to be provided in the input to perform the computation. Because these have not been supplied, this is not a valid Turing machine.\n\nIs this correct?", "saved": false, "id": "11lb0x", "clicked": false, "title": "Question on Turing machine homework.", "num_comments": 27, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11lb0x", "children": [], "author": "orium_", "id": "c6ni148", "parent_id": "t3_11lb0x", "score": 0, "approved_by": null, "upvotes": 13, "body": "The integers don't have to be given as input. You can generate them. The problem here is different: Finding a integer solution for a polynomial equation of arbitrary degree is turing-indecidable (i.e. no turing machine can be built that can decide if an arbitrary polynomial equation has a solution over the integer values).\n\nIn particular the given procedure will not know when to stop and reject. It is guaranteed to terminate if it there is a solution, but if no solution exists this procedure will run forever (and the turing machine never halts.)\n\nSee [Diophantine equation](http://en.wikipedia.org/wiki/Diophantine_equation) and [Hilbert's 10th problem](http://en.wikipedia.org/wiki/Hilbert%27s_tenth_problem)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The integers don&amp;#39;t have to be given as input. You can generate them. The problem here is different: Finding a integer solution for a polynomial equation of arbitrary degree is turing-indecidable (i.e. no turing machine can be built that can decide if an arbitrary polynomial equation has a solution over the integer values).&lt;/p&gt;\n\n&lt;p&gt;In particular the given procedure will not know when to stop and reject. It is guaranteed to terminate if it there is a solution, but if no solution exists this procedure will run forever (and the turing machine never halts.)&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=\"http://en.wikipedia.org/wiki/Diophantine_equation\"&gt;Diophantine equation&lt;/a&gt; and &lt;a href=\"http://en.wikipedia.org/wiki/Hilbert%27s_tenth_problem\"&gt;Hilbert&amp;#39;s 10th problem&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ni148", "flair_text": null, "created": 1350430916.0, "created_utc": 1350427316.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11lb0x", "children": [], "author": "Workaphobia", "id": "c6nl987", "parent_id": "t3_11lb0x", "score": 0, "approved_by": null, "upvotes": 1, "body": "Think of a Turing machine as a computer program. Does a computer program that does what you've described need to have every possible integer in the input? No, because it has the instructions \"try all the integers\" built into it. It doesn't need a list of all integers any more than it would if its task was to print out \"1, 2, 3, 4, ...\".", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Think of a Turing machine as a computer program. Does a computer program that does what you&amp;#39;ve described need to have every possible integer in the input? No, because it has the instructions &amp;quot;try all the integers&amp;quot; built into it. It doesn&amp;#39;t need a list of all integers any more than it would if its task was to print out &amp;quot;1, 2, 3, 4, ...&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nl987", "flair_text": null, "created": 1350443371.0, "created_utc": 1350439771.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11lb0x", "children": [], "author": "gorillamania", "id": "c6nmier", "parent_id": "t3_11lb0x", "score": 0, "approved_by": null, "upvotes": 2, "body": "Are you a real person?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Are you a real person?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nmier", "flair_text": null, "created": 1350448489.0, "created_utc": 1350444889.0, "num_reports": null}], "score": 1, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 12, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11lb0x/question_on_turing_machine_homework/", "has_more_comments": false, "name": "t3_11lb0x", "created": 1350425977.0, "url": "http://www.reddit.com/r/compsci/comments/11lb0x/question_on_turing_machine_homework/", "author_flair_text": null, "author": "leif_erikson503", "created_utc": 1350422377.0, "link_flair_text": null, "media": null, "num_reports": null}, "330": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 7, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Not sure if this is the right subreddit. it&amp;#39;s a combination of maths, and programming so I guess it fits.&lt;br/&gt;\nI need to square the adjacency matrix of a undirected graph as one of the steps for calculating the number of cycles of a certain length in the graph.&lt;br/&gt;\nI know the naive method for calculating the product of 2 matrices which is O( n&lt;sup&gt;3&lt;/sup&gt; )&lt;br/&gt;\nI also know there are other methods for doing it that bring the exponent down a bit more.&lt;br/&gt;\nAre there any methods of speeding this up given that:&lt;br/&gt;\nI will be working with adjacency matrices of up to 6000x6000 so the big-O of the algorithm is probably going to be significant than scalar (is that the right term?) multipliers.&lt;br/&gt;\nI will be working with undirected graph adjacency matrices so the matrix will be the same as its transpose.&lt;br/&gt;\ni.e. A = A&lt;sup&gt;t&lt;/sup&gt;&lt;br/&gt;\nAlso would since it is an adjacency matrix I will be dealing with 1s and 0s so instead of multiplying and adding it to a count would it be faster to increment a count iff both values are 1?  this would allow me to also to represent the initial matrix as with an array of booleans instead of ints so even faster because of that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Not sure if this is the right subreddit. it's a combination of maths, and programming so I guess it fits.  \nI need to square the adjacency matrix of a undirected graph as one of the steps for calculating the number of cycles of a certain length in the graph.  \nI know the naive method for calculating the product of 2 matrices which is O( n^3 )  \nI also know there are other methods for doing it that bring the exponent down a bit more.  \nAre there any methods of speeding this up given that:  \nI will be working with adjacency matrices of up to 6000x6000 so the big-O of the algorithm is probably going to be significant than scalar (is that the right term?) multipliers.  \nI will be working with undirected graph adjacency matrices so the matrix will be the same as its transpose.  \ni.e. A = A^t  \nAlso would since it is an adjacency matrix I will be dealing with 1s and 0s so instead of multiplying and adding it to a count would it be faster to increment a count iff both values are 1?  this would allow me to also to represent the initial matrix as with an array of booleans instead of ints so even faster because of that?\n", "saved": false, "id": "11k919", "clicked": false, "title": "Efficient algorithms for finding the square of a matrix that is its own transpose.", "num_comments": 9, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11k919", "children": [], "author": "rjw57", "id": "c6n7ogn", "parent_id": "t3_11k919", "score": 0, "approved_by": null, "upvotes": 11, "body": "The naive method of calculating B = A^2 is:\n\nB\\_{ij} = \\sum\\_{k} A\\_{ik} A\\_{kj}\n\nSince A\\_{ab} == A\\_{ba} (as stated above) then:\n\nB\\_{ij} = \\sum\\_{k} A\\_{ki} A\\_{kj}\n\nor\n\nB\\_{ij} = a_i \\cdot a_j\n\nwhere a_k is the k-th column of A.\n\nIf A is a matrix composed of only ones and zeros then:\n\nB\\_{ij} = bitCount(a_i &amp; a_j)\n\nwhere bitCount(n) returns the number of bits set in the number n, &amp; is bitwise AND and we have represented the k-th column of A as a binary number, a_k.\n\nThis is still O(n^3) but suggests some optimisations:\n\n1. B\\_{ij} = B\\_{ji} and so one need only calculate half the output.\n2. Bitwise AND is fast on a CPU and so store the matrix A as a set of machine words per column. Calculate B\\_{ij} by by bitwise anding each corresponding word of the columns a\\_i and a\\_j and summing the bitCount-s.\n3. If the matrix is sparse one might be able to shortcut the bitCount by testing if either column or the bitwise AND is zero.\n4. The value of B\\_{ij} can never be greater than the number of rows in A, so if you have A being 6000 x 6000, a 16-bit integer will suffice.\n\nNone of this has affected the order of the algorithm but it has shown where some optimisation may be found which could reduce the constant of proportionality appropriately.\n\nSome back of envelope calculations:\n\n* Storage of A = 6000 * 6000 / 8 = 274MB. Big but not stupid. If you exploit the symmetry, it will be 137MB.\n* The algorithm above is embarrassingly parallel in B and does not modify A. Since modern GPUs have memory far &gt;137MB, I'd suggest implementing it on one.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The naive method of calculating B = A&lt;sup&gt;2&lt;/sup&gt; is:&lt;/p&gt;\n\n&lt;p&gt;B_{ij} = \\sum_{k} A_{ik} A_{kj}&lt;/p&gt;\n\n&lt;p&gt;Since A_{ab} == A_{ba} (as stated above) then:&lt;/p&gt;\n\n&lt;p&gt;B_{ij} = \\sum_{k} A_{ki} A_{kj}&lt;/p&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;p&gt;B_{ij} = a_i \\cdot a_j&lt;/p&gt;\n\n&lt;p&gt;where a_k is the k-th column of A.&lt;/p&gt;\n\n&lt;p&gt;If A is a matrix composed of only ones and zeros then:&lt;/p&gt;\n\n&lt;p&gt;B_{ij} = bitCount(a_i &amp;amp; a_j)&lt;/p&gt;\n\n&lt;p&gt;where bitCount(n) returns the number of bits set in the number n, &amp;amp; is bitwise AND and we have represented the k-th column of A as a binary number, a_k.&lt;/p&gt;\n\n&lt;p&gt;This is still O(n&lt;sup&gt;3)&lt;/sup&gt; but suggests some optimisations:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;B_{ij} = B_{ji} and so one need only calculate half the output.&lt;/li&gt;\n&lt;li&gt;Bitwise AND is fast on a CPU and so store the matrix A as a set of machine words per column. Calculate B_{ij} by by bitwise anding each corresponding word of the columns a_i and a_j and summing the bitCount-s.&lt;/li&gt;\n&lt;li&gt;If the matrix is sparse one might be able to shortcut the bitCount by testing if either column or the bitwise AND is zero.&lt;/li&gt;\n&lt;li&gt;The value of B_{ij} can never be greater than the number of rows in A, so if you have A being 6000 x 6000, a 16-bit integer will suffice.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;None of this has affected the order of the algorithm but it has shown where some optimisation may be found which could reduce the constant of proportionality appropriately.&lt;/p&gt;\n\n&lt;p&gt;Some back of envelope calculations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Storage of A = 6000 * 6000 / 8 = 274MB. Big but not stupid. If you exploit the symmetry, it will be 137MB.&lt;/li&gt;\n&lt;li&gt;The algorithm above is embarrassingly parallel in B and does not modify A. Since modern GPUs have memory far &amp;gt;137MB, I&amp;#39;d suggest implementing it on one.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n7ogn", "flair_text": null, "created": 1350389481.0, "created_utc": 1350385881.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11k919", "children": [], "author": "agmatine", "id": "c6njb2q", "parent_id": "t3_11k919", "score": 0, "approved_by": null, "upvotes": 1, "body": "Strassen's algorithm?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Strassen&amp;#39;s algorithm?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6njb2q", "flair_text": null, "created": 1350435950.0, "created_utc": 1350432350.0, "num_reports": null}], "score": 11, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 18, "hidden": false, "thumbnail": "", "edited": 1350378407.0, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11k919/efficient_algorithms_for_finding_the_square_of_a/", "has_more_comments": false, "name": "t3_11k919", "created": 1350381105.0, "url": "http://www.reddit.com/r/compsci/comments/11k919/efficient_algorithms_for_finding_the_square_of_a/", "author_flair_text": null, "author": "larrynom", "created_utc": 1350377505.0, "link_flair_text": null, "media": null, "num_reports": null}, "331": {"domain": "nobelprize.org", "link_flair_class": null, "banned_by": null, "downvotes": 35, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11iiim", "clicked": false, "title": "The Nobel Prize in Economics given to Roth and Shapley for there work in game theory (e.g. stable matching problem)", "num_comments": 17, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 8, "link_id": "t3_11iiim", "children": [], "author": "MestR", "id": "c6mrz6h", "parent_id": "t3_11iiim", "score": 0, "approved_by": null, "upvotes": 25, "body": "&gt;for *there* work", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;for &lt;em&gt;there&lt;/em&gt; work&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mrz6h", "flair_text": null, "created": 1350320450.0, "created_utc": 1350316850.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11iiim", "children": [], "author": "bo1024", "id": "c6n171n", "parent_id": "t3_11iiim", "score": 0, "approved_by": null, "upvotes": 5, "body": "This is awesome news for CS as well: first, a lot of this research is actually hot and happening right now, not just 20-30 years ago; second, a lot of it is being done on the CS and algorithms side, looking for things like online stable matching, the effect of altruistic donors in kidney exchanges, dealing with couples in the med school residency matching program, and probably a lot more!\n\nThis is so close to CS that we could almost share it with Economics in my view (biased).", "edited": 1350349838.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is awesome news for CS as well: first, a lot of this research is actually hot and happening right now, not just 20-30 years ago; second, a lot of it is being done on the CS and algorithms side, looking for things like online stable matching, the effect of altruistic donors in kidney exchanges, dealing with couples in the med school residency matching program, and probably a lot more!&lt;/p&gt;\n\n&lt;p&gt;This is so close to CS that we could almost share it with Economics in my view (biased).&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n171n", "flair_text": null, "created": 1350353257.0, "created_utc": 1350349657.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11iiim", "children": [], "author": "ShadowVariable", "id": "c6mueof", "parent_id": "t3_11iiim", "score": 0, "approved_by": null, "upvotes": 8, "body": "Why isn't there a nobel prize in computer science yet?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why isn&amp;#39;t there a nobel prize in computer science yet?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mueof", "flair_text": null, "created": 1350329269.0, "created_utc": 1350325669.0, "num_reports": null}], "score": 32, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 67, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11iiim/the_nobel_prize_in_economics_given_to_roth_and/", "has_more_comments": false, "name": "t3_11iiim", "created": 1350317886.0, "url": "http://www.nobelprize.org/nobel_prizes/economics/laureates/2012/#", "author_flair_text": null, "author": "markgraydk", "created_utc": 1350314286.0, "link_flair_text": null, "media": null, "num_reports": null}, "332": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 9, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writing some custom software for a client that will be gathering a large amount of data.  We are only sampling at 240 Hz/CH which is nice, however we have 400 channels of data, which put us sampling at 96 kHz over a 36 hour period.  For a grand total of 12,441,600,000,000 samples (double precision).  We are trying to figure out the best way to store this data and be able to easily access and review the data in future analysis with MatLab. So far, we have been thinking of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;csv files that are split every 5 minutes&lt;/li&gt;\n&lt;li&gt;mySQL database&lt;/li&gt;\n&lt;li&gt;TDMS&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;m leaning toward the database, however We&amp;#39;ll still have to be very clever when it comes to the db architecture. The only real restriction however, is that the laptop being used will not have any internet access and all data will need to be stored locally.&lt;/p&gt;\n\n&lt;p&gt;[EDIT] I punched in the wrong value into my calculator of 96000 kHz instead of 96 kHz. After 36 hours we will have 12,441,600,000 samples.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am writing some custom software for a client that will be gathering a large amount of data.  We are only sampling at 240 Hz/CH which is nice, however we have 400 channels of data, which put us sampling at 96 kHz over a 36 hour period.  For a grand total of 12,441,600,000,000 samples (double precision).  We are trying to figure out the best way to store this data and be able to easily access and review the data in future analysis with MatLab. So far, we have been thinking of:\n\n* csv files that are split every 5 minutes\n* mySQL database\n* TDMS\n\nI'm leaning toward the database, however We'll still have to be very clever when it comes to the db architecture. The only real restriction however, is that the laptop being used will not have any internet access and all data will need to be stored locally.\n\n[EDIT] I punched in the wrong value into my calculator of 96000 kHz instead of 96 kHz. After 36 hours we will have 12,441,600,000 samples.", "saved": false, "id": "11imsg", "clicked": false, "title": "Question: What is best practice for storing very large data sets?", "num_comments": 18, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11imsg", "children": [], "author": "more_exercise", "id": "c6mtbcy", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 9, "body": "You plan to fit 90 TB onto a single laptop?\n\nAnd that's just the raw bytes of 12,441,600,000,000  8 byte samples.\n\nThe string encoding needed to store those numbers in a CSV would make it closer to 100-140 TB depending on how precise you want them to be.  It will be far worse with XML (*shudder*).\n\nHave you checked out the [HDF](http://en.wikipedia.org/wiki/Hierarchical_Data_Format) format?  MATLAB [supports it](http://www.mathworks.com/help/matlab/ref/hdf5.html), and it is a format designed specifically for scientific data.  \n\nHDF is accessible from all of your standard languages (C/C++/Java/python) and you shouldn't have any trouble finding compatible libraries for your language of choice.\n\nBut seriously, &gt;90TB on a laptop??", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You plan to fit 90 TB onto a single laptop?&lt;/p&gt;\n\n&lt;p&gt;And that&amp;#39;s just the raw bytes of 12,441,600,000,000  8 byte samples.&lt;/p&gt;\n\n&lt;p&gt;The string encoding needed to store those numbers in a CSV would make it closer to 100-140 TB depending on how precise you want them to be.  It will be far worse with XML (&lt;em&gt;shudder&lt;/em&gt;).&lt;/p&gt;\n\n&lt;p&gt;Have you checked out the &lt;a href=\"http://en.wikipedia.org/wiki/Hierarchical_Data_Format\"&gt;HDF&lt;/a&gt; format?  MATLAB &lt;a href=\"http://www.mathworks.com/help/matlab/ref/hdf5.html\"&gt;supports it&lt;/a&gt;, and it is a format designed specifically for scientific data.  &lt;/p&gt;\n\n&lt;p&gt;HDF is accessible from all of your standard languages (C/C++/Java/python) and you shouldn&amp;#39;t have any trouble finding compatible libraries for your language of choice.&lt;/p&gt;\n\n&lt;p&gt;But seriously, &amp;gt;90TB on a laptop??&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mtbcy", "flair_text": null, "created": 1350325485.0, "created_utc": 1350321885.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11imsg", "children": [], "author": "753861429-951843627", "id": "c6mt93y", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 3, "body": "Are you sure about that number? 12 trillion double precision floating point numbers (according to IEEE 75x^1) would be about 90 terabytes. I don't think the format used to store that amount of data has much impact on ease of retrieval or processing speed. Even if you actually stored only 1 byte no-precision characters, that would still be 11 terabytes or so. \n\n\n\n1: Don't remember the exact number of the standard.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Are you sure about that number? 12 trillion double precision floating point numbers (according to IEEE 75x&lt;sup&gt;1)&lt;/sup&gt; would be about 90 terabytes. I don&amp;#39;t think the format used to store that amount of data has much impact on ease of retrieval or processing speed. Even if you actually stored only 1 byte no-precision characters, that would still be 11 terabytes or so. &lt;/p&gt;\n\n&lt;p&gt;1: Don&amp;#39;t remember the exact number of the standard.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mt93y", "flair_text": null, "created": 1350325265.0, "created_utc": 1350321665.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11imsg", "children": [], "author": "jeffus", "id": "c6msl71", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 3, "body": "You should look into Apache HBase; I think it would fit your needs well, although you might have to write some code to get things into/out of MatLab (someone might have already done this)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You should look into Apache HBase; I think it would fit your needs well, although you might have to write some code to get things into/out of MatLab (someone might have already done this)&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6msl71", "flair_text": null, "created": 1350322798.0, "created_utc": 1350319198.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11imsg", "children": [], "author": "ptek", "id": "c6myhlk", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 2, "body": "At work, I deal with roughly the same amount of samples for our application. Although we have the samples gathered over a period of several years.\n\nWhat we've been successful with was a CSV file per day. The only trouble with that is, that if the structure changes in the middle of gathering the data, its difficult to actually reformat the files. Since You will probably not be gathering the data over the years, it might be not that big problem for You. Reading and parsing the CSV data can be done in chunks - thus minimising the amount of memory one has to have available for the calculations.\n\nYou can also have a look at MonetDB. The Database is being advertised as a column-oriented store which is tuned for accessing big amounts of sequentially stored data.\n\nAlso, in our case MySQL crashed and destroyed the data amount of which exceeded 80-90GB. We used InnoDB Storage engine at the beginning.", "edited": 1350342106.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At work, I deal with roughly the same amount of samples for our application. Although we have the samples gathered over a period of several years.&lt;/p&gt;\n\n&lt;p&gt;What we&amp;#39;ve been successful with was a CSV file per day. The only trouble with that is, that if the structure changes in the middle of gathering the data, its difficult to actually reformat the files. Since You will probably not be gathering the data over the years, it might be not that big problem for You. Reading and parsing the CSV data can be done in chunks - thus minimising the amount of memory one has to have available for the calculations.&lt;/p&gt;\n\n&lt;p&gt;You can also have a look at MonetDB. The Database is being advertised as a column-oriented store which is tuned for accessing big amounts of sequentially stored data.&lt;/p&gt;\n\n&lt;p&gt;Also, in our case MySQL crashed and destroyed the data amount of which exceeded 80-90GB. We used InnoDB Storage engine at the beginning.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6myhlk", "flair_text": null, "created": 1350343001.0, "created_utc": 1350339401.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11imsg", "children": [], "author": "whoMEvernot", "id": "c6nzgpb", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 1, "body": "How will it be indexed, channel and time?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How will it be indexed, channel and time?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nzgpb", "flair_text": null, "created": 1350513136.0, "created_utc": 1350509536.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11imsg", "children": [], "author": "SupersonicSpitfire", "id": "c6oahju", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 1, "body": "Have you considered SQlite? ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Have you considered SQlite? &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oahju", "flair_text": null, "created": 1350572909.0, "created_utc": 1350569309.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11imsg", "children": [], "author": "ahazred8vt", "id": "c6ph1xc", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 1, "body": "Gridded Binary is a simple, fast, compact, self-documenting data capture format. It saves data purely row-by-row, and allows metadata records.\n http://en.m.wikipedia.org/wiki/GRIB", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Gridded Binary is a simple, fast, compact, self-documenting data capture format. It saves data purely row-by-row, and allows metadata records.\n &lt;a href=\"http://en.m.wikipedia.org/wiki/GRIB\"&gt;http://en.m.wikipedia.org/wiki/GRIB&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ph1xc", "flair_text": null, "created": 1350784716.0, "created_utc": 1350781116.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11imsg", "children": [], "author": "gigitrix", "id": "c6muyk8", "parent_id": "t3_11imsg", "score": 0, "approved_by": null, "upvotes": 1, "body": "Whatever you use, you're going to have to distribute and shard the data across time. Perhaps by hour, perhaps by day or something. If you've got the budget, look into a [Storage Area Network](http://en.wikipedia.org/wiki/Storage_area_network)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Whatever you use, you&amp;#39;re going to have to distribute and shard the data across time. Perhaps by hour, perhaps by day or something. If you&amp;#39;ve got the budget, look into a &lt;a href=\"http://en.wikipedia.org/wiki/Storage_area_network\"&gt;Storage Area Network&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6muyk8", "flair_text": null, "created": 1350331075.0, "created_utc": 1350327475.0, "num_reports": null}], "score": 6, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 15, "hidden": false, "thumbnail": "", "edited": 1350326105.0, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11imsg/question_what_is_best_practice_for_storing_very/", "has_more_comments": false, "name": "t3_11imsg", "created": 1350322132.0, "url": "http://www.reddit.com/r/compsci/comments/11imsg/question_what_is_best_practice_for_storing_very/", "author_flair_text": null, "author": "BusyDoingScience", "created_utc": 1350318532.0, "link_flair_text": null, "media": null, "num_reports": null}, "333": {"domain": "cs.ucf.edu", "link_flair_class": null, "banned_by": null, "downvotes": 10, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11hdfb", "clicked": false, "title": "A nice review article about advances in dataflow programming languages.", "num_comments": 1, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11hdfb", "children": [], "author": "gwern", "id": "c6ml6ej", "parent_id": "t3_11hdfb", "score": 0, "approved_by": null, "upvotes": 7, "body": "From March 2004, &gt;8 years ago?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;From March 2004, &amp;gt;8 years ago?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ml6ej", "flair_text": null, "created": 1350274683.0, "created_utc": 1350271083.0, "num_reports": null}], "score": 25, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 35, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11hdfb/a_nice_review_article_about_advances_in_dataflow/", "has_more_comments": false, "name": "t3_11hdfb", "created": 1350259014.0, "url": "http://www.cs.ucf.edu/~dcm/Teaching/COT4810-Spring2011/Literature/DataFlowProgrammingLanguages.pdf", "author_flair_text": null, "author": "qkdhfjdjdhd", "created_utc": 1350255414.0, "link_flair_text": null, "media": null, "num_reports": null}, "334": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 11, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m taking a Data Structures and Analysis course online and would love some recommendations for online video lecture. Thanks in advanced. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm taking a Data Structures and Analysis course online and would love some recommendations for online video lecture. Thanks in advanced. ", "saved": false, "id": "11h6oe", "clicked": false, "title": "Data Structures and Analysis Video Lectures?", "num_comments": 4, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11h6oe", "children": [], "author": "davidthefat", "id": "c6mgczv", "parent_id": "t3_11h6oe", "score": 0, "approved_by": null, "upvotes": 6, "body": "[MIT OCW](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/\"&gt;MIT OCW&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mgczv", "flair_text": null, "created": 1350255581.0, "created_utc": 1350251981.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11h6oe", "children": [], "author": "disfunct", "id": "c6mhroc", "parent_id": "t3_11h6oe", "score": 0, "approved_by": null, "upvotes": 7, "body": "[Coursea - Algorithms I](https://www.coursera.org/course/algs4partI)\n  \n[Coursea - Algorithms II](https://www.coursera.org/course/algs4partII)\n  \n[Coursea - Algorithms: Design and Analysis, Part 1](https://www.coursera.org/course/algo)\n  \n[Udacity - Algorithms (hands on)](http://www.udacity.com/overview/Course/cs215/CourseRev/1)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.coursera.org/course/algs4partI\"&gt;Coursea - Algorithms I&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.coursera.org/course/algs4partII\"&gt;Coursea - Algorithms II&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.coursera.org/course/algo\"&gt;Coursea - Algorithms: Design and Analysis, Part 1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.udacity.com/overview/Course/cs215/CourseRev/1\"&gt;Udacity - Algorithms (hands on)&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mhroc", "flair_text": null, "created": 1350261248.0, "created_utc": 1350257648.0, "num_reports": null}], "score": 17, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 28, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11h6oe/data_structures_and_analysis_video_lectures/", "has_more_comments": false, "name": "t3_11h6oe", "created": 1350252044.0, "url": "http://www.reddit.com/r/compsci/comments/11h6oe/data_structures_and_analysis_video_lectures/", "author_flair_text": null, "author": "baltimoresports", "created_utc": 1350248444.0, "link_flair_text": null, "media": null, "num_reports": null}, "335": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 3, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For my background knowledge: I&amp;#39;m a third year undergrad studying math and computer science, if that helps. Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "For my background knowledge: I'm a third year undergrad studying math and computer science, if that helps. Thanks!", "saved": false, "id": "11i3ev", "clicked": false, "title": "How does the Detect Language part of Google translate work?", "num_comments": 7, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11i3ev", "children": [], "author": "CreepyOctopus", "id": "c6n849s", "parent_id": "t3_11i3ev", "score": 0, "approved_by": null, "upvotes": 5, "body": "Not sure how they do it, but here's one approach that might work.\n\nFirst, narrow down the possible languages to a few by looking at the character set. Just build a list of all unique characters in the text, and compare to known lists of possible characters for each language. This will already give a fairly good subset of languages.\n\nThen look at letter and bigram frequencies, also easy to find and known in advance for languages. Where English has a lot of \"th\", German would have a lot of \"ch\", for example. This lets you assign higher probabilities to some languages.\n\nNext look through the text to see if it has words that are among the most common in some language. A real dictionary check is slow, so what I'd do would be just to have a list of some 20 most common words in each language, and search for them.\n\nI would guess that these three factors, probably with some weights added, would make for accurate detection a lot of the time. Definitely not the best method, better ones would be more sophisticated, but for a quick-and-often-accurate method, that should suffice.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not sure how they do it, but here&amp;#39;s one approach that might work.&lt;/p&gt;\n\n&lt;p&gt;First, narrow down the possible languages to a few by looking at the character set. Just build a list of all unique characters in the text, and compare to known lists of possible characters for each language. This will already give a fairly good subset of languages.&lt;/p&gt;\n\n&lt;p&gt;Then look at letter and bigram frequencies, also easy to find and known in advance for languages. Where English has a lot of &amp;quot;th&amp;quot;, German would have a lot of &amp;quot;ch&amp;quot;, for example. This lets you assign higher probabilities to some languages.&lt;/p&gt;\n\n&lt;p&gt;Next look through the text to see if it has words that are among the most common in some language. A real dictionary check is slow, so what I&amp;#39;d do would be just to have a list of some 20 most common words in each language, and search for them.&lt;/p&gt;\n\n&lt;p&gt;I would guess that these three factors, probably with some weights added, would make for accurate detection a lot of the time. Definitely not the best method, better ones would be more sophisticated, but for a quick-and-often-accurate method, that should suffice.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n849s", "flair_text": null, "created": 1350393256.0, "created_utc": 1350389656.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11i3ev", "children": [], "author": "shostyscholar", "id": "c6n3rsu", "parent_id": "t3_11i3ev", "score": 0, "approved_by": null, "upvotes": 3, "body": "I'm guessing the first thing they do is look at the character set.  That will make some choices for them.  Really the key is to find the distinctive features to language X and look for it.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m guessing the first thing they do is look at the character set.  That will make some choices for them.  Really the key is to find the distinctive features to language X and look for it.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6n3rsu", "flair_text": null, "created": 1350362545.0, "created_utc": 1350358945.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11i3ev", "children": [], "author": "mapM_", "id": "c6nbuod", "parent_id": "t3_11i3ev", "score": 0, "approved_by": null, "upvotes": 1, "body": "After considering some simple criteria like suggested in other comments, my approach would be to look up all the longer words from a text in the dictionaries of all languages Google has. If you use a bloom filter or a similar construct, this would be fast and accurate without requiring a lot of space. You can then combine the results from several or all words in the text.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After considering some simple criteria like suggested in other comments, my approach would be to look up all the longer words from a text in the dictionaries of all languages Google has. If you use a bloom filter or a similar construct, this would be fast and accurate without requiring a lot of space. You can then combine the results from several or all words in the text.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nbuod", "flair_text": null, "created": 1350409980.0, "created_utc": 1350406380.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11i3ev", "children": [], "author": "BrianTheCoder", "id": "c6ngv73", "parent_id": "t3_11i3ev", "score": 0, "approved_by": null, "upvotes": 1, "body": "Here's a simple implementation. http://www.rubyinside.com/whatlanguage-ruby-language-detection-library-1085.html. Bloomfilters ftw!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s a simple implementation. &lt;a href=\"http://www.rubyinside.com/whatlanguage-ruby-language-detection-library-1085.html\"&gt;http://www.rubyinside.com/whatlanguage-ruby-language-detection-library-1085.html&lt;/a&gt;. Bloomfilters ftw!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ngv73", "flair_text": null, "created": 1350426633.0, "created_utc": 1350423033.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11i3ev", "children": [], "author": "robin-gvx", "id": "c6o29k2", "parent_id": "t3_11i3ev", "score": 0, "approved_by": null, "upvotes": 1, "body": "Surprised no-one mentioned Hidden Markov Models yet: https://en.wikipedia.org/wiki/Hidden_Markov_model", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Surprised no-one mentioned Hidden Markov Models yet: &lt;a href=\"https://en.wikipedia.org/wiki/Hidden_Markov_model\"&gt;https://en.wikipedia.org/wiki/Hidden_Markov_model&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o29k2", "flair_text": null, "created": 1350523941.0, "created_utc": 1350520341.0, "num_reports": null}], "score": 1, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 4, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11i3ev/how_does_the_detect_language_part_of_google/", "has_more_comments": false, "name": "t3_11i3ev", "created": 1350288491.0, "url": "http://www.reddit.com/r/compsci/comments/11i3ev/how_does_the_detect_language_part_of_google/", "author_flair_text": null, "author": "watanabe-san", "created_utc": 1350284891.0, "link_flair_text": null, "media": null, "num_reports": null}, "336": {"domain": "cs.stackexchange.com", "link_flair_class": null, "banned_by": null, "downvotes": 13, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11gkyx", "clicked": false, "title": "Differences and relations between randomized and nondeterministic algorithms", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11gkyx", "children": [], "author": "bo1024", "id": "c6mmde4", "parent_id": "t3_11gkyx", "score": 0, "approved_by": null, "upvotes": 3, "body": "It seems that the wikipedia definition of nondeterminism being quoted is much different than the nondeterminism in the definition of an NFA, PDA, or nondeterministic Turing machine. (That is, it seems to just be defined as \"not deterministic\".)\n\nThat's too bad, as nondeterminism already confuses students enough as it is.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It seems that the wikipedia definition of nondeterminism being quoted is much different than the nondeterminism in the definition of an NFA, PDA, or nondeterministic Turing machine. (That is, it seems to just be defined as &amp;quot;not deterministic&amp;quot;.)&lt;/p&gt;\n\n&lt;p&gt;That&amp;#39;s too bad, as nondeterminism already confuses students enough as it is.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mmde4", "flair_text": null, "created": 1350279790.0, "created_utc": 1350276190.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11gkyx", "children": [], "author": "svsvsvs", "id": "c6meku9", "parent_id": "t3_11gkyx", "score": 0, "approved_by": null, "upvotes": 7, "body": "Think of computation as a flow chart (that allows for variables) rather than a code-based program. In both randomized and nondeterministic computation, some of the nodes in the chart contain multiple outgoing paths.\n\nIn randomized computation, the program randomly chooses which path to take whenever it encounters such a fork, and continues from there until it encounters either an Accept or Reject state (at which point it returns Accept or Reject accordingly). In nondeterministic computation, the program chooses all paths at once, and outputs Accept iff even one such computation path enters such a state. Otherwise, it outputs reject. \n\nNote the asymmetry in the latter case. It's an open problem if the set of problems we can solve in nondeterministic polynomial time is equal to the corresponding set where we switch Accept and Reject around (NP vs. CoNP). We do not run into the same issue when dealing with polynomial space requirements, since NPSPACE = Co-NPSPACE.", "edited": 1350245310.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Think of computation as a flow chart (that allows for variables) rather than a code-based program. In both randomized and nondeterministic computation, some of the nodes in the chart contain multiple outgoing paths.&lt;/p&gt;\n\n&lt;p&gt;In randomized computation, the program randomly chooses which path to take whenever it encounters such a fork, and continues from there until it encounters either an Accept or Reject state (at which point it returns Accept or Reject accordingly). In nondeterministic computation, the program chooses all paths at once, and outputs Accept iff even one such computation path enters such a state. Otherwise, it outputs reject. &lt;/p&gt;\n\n&lt;p&gt;Note the asymmetry in the latter case. It&amp;#39;s an open problem if the set of problems we can solve in nondeterministic polynomial time is equal to the corresponding set where we switch Accept and Reject around (NP vs. CoNP). We do not run into the same issue when dealing with polynomial space requirements, since NPSPACE = Co-NPSPACE.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6meku9", "flair_text": null, "created": 1350248607.0, "created_utc": 1350245007.0, "num_reports": null}], "score": 19, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 32, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11gkyx/differences_and_relations_between_randomized_and/", "has_more_comments": false, "name": "t3_11gkyx", "created": 1350227271.0, "url": "http://cs.stackexchange.com/q/5008/98", "author_flair_text": null, "author": "akerbos", "created_utc": 1350223671.0, "link_flair_text": null, "media": null, "num_reports": null}, "337": {"domain": "cs.columbia.edu", "link_flair_class": null, "banned_by": null, "downvotes": 6, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11gsj6", "clicked": false, "title": "Formal Grammar of English", "num_comments": 12, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11gsj6", "children": [], "author": "Scalawag", "id": "c6mbwzi", "parent_id": "t3_11gsj6", "score": 0, "approved_by": null, "upvotes": 4, "body": "I've been researching for an upcoming attempt at a natural English (or a subset there-of) parser. If anyone has any other interesting or useful resources on the topic, I'd love to see them.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been researching for an upcoming attempt at a natural English (or a subset there-of) parser. If anyone has any other interesting or useful resources on the topic, I&amp;#39;d love to see them.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mbwzi", "flair_text": null, "created": 1350237562.0, "created_utc": 1350233962.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11gsj6", "children": [], "author": "PartyButton", "id": "c6o5ou6", "parent_id": "t3_11gsj6", "score": 0, "approved_by": null, "upvotes": 3, "body": "link is broken", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;link is broken&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6o5ou6", "flair_text": null, "created": 1350537786.0, "created_utc": 1350534186.0, "num_reports": null}], "score": 5, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 11, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11gsj6/formal_grammar_of_english/", "has_more_comments": false, "name": "t3_11gsj6", "created": 1350237477.0, "url": "http://www1.cs.columbia.edu/~julia/jmchapters/ch10.pdf", "author_flair_text": null, "author": "Scalawag", "created_utc": 1350233877.0, "link_flair_text": null, "media": null, "num_reports": null}, "338": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 14, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Pretty open to any suggestions really,but does anybody know of any documentaries that delve in to something specific about computer science or computer science history? I&amp;#39;d be more interested in more intermediate to advanced subject matter, but I guess for the sake of the general population, anything goes.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Pretty open to any suggestions really,but does anybody know of any documentaries that delve in to something specific about computer science or computer science history? I'd be more interested in more intermediate to advanced subject matter, but I guess for the sake of the general population, anything goes.", "saved": false, "id": "11fthb", "clicked": false, "title": "Good documentaries for any specific topics in computer science?", "num_comments": 23, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11fthb", "children": [], "author": "defrost", "id": "c6m5314", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 21, "body": "Here's a mixture of documentaries &amp; sources with some lecture material.    \n   \nIf you're after more advanced material then you should be searching for lectures rather than documentaries.\n\n[Inseparable From Magic: Manufacturing Modern Computer Chips](https://www.youtube.com/watch?v=NGFhc8R_uO4)    \n  \n[ArsDigita University - MIT 2000-2001](http://archive.org/details/arsdigita)   \n   \n[JP Dunning - Destroying Evidence Before Its Evidence](https://www.youtube.com/watch?v=lqBVAcxpwio)   \n   \n[Clifford Stoll - 1995 - Computers &amp; the future](http://video.google.com/videoplay?docid=-666540182028461233)   \n   \n[Adam Curtis' All Watched Over By Machines Of Loving Grace](http://www.bbc.co.uk/programmes/b011rbws)  \n   \n[BBC documentary: History of Computers](https://www.youtube.com/watch?v=NbhbssXWDAE)   \n   \n[CosmoLearning: Computer Science Documentaries](http://www.cosmolearning.com/computer-science/documentaries?sort=views)     \n   \n\n \n\n  \n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s a mixture of documentaries &amp;amp; sources with some lecture material.    &lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re after more advanced material then you should be searching for lectures rather than documentaries.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=NGFhc8R_uO4\"&gt;Inseparable From Magic: Manufacturing Modern Computer Chips&lt;/a&gt;    &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://archive.org/details/arsdigita\"&gt;ArsDigita University - MIT 2000-2001&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=lqBVAcxpwio\"&gt;JP Dunning - Destroying Evidence Before Its Evidence&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://video.google.com/videoplay?docid=-666540182028461233\"&gt;Clifford Stoll - 1995 - Computers &amp;amp; the future&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.bbc.co.uk/programmes/b011rbws\"&gt;Adam Curtis&amp;#39; All Watched Over By Machines Of Loving Grace&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=NbhbssXWDAE\"&gt;BBC documentary: History of Computers&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.cosmolearning.com/computer-science/documentaries?sort=views\"&gt;CosmoLearning: Computer Science Documentaries&lt;/a&gt;     &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m5314", "flair_text": null, "created": 1350189944.0, "created_utc": 1350186344.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11fthb", "children": [], "author": "gotfoobar", "id": "c6m2smg", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 8, "body": "This isn't exactly computer science, but it is a quite interesting documentary about the rise of the open source movement.\n\nhttp://www.revolution-os.com/", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This isn&amp;#39;t exactly computer science, but it is a quite interesting documentary about the rise of the open source movement.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.revolution-os.com/\"&gt;http://www.revolution-os.com/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m2smg", "flair_text": null, "created": 1350180092.0, "created_utc": 1350176492.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11fthb", "children": [], "author": "SamWalsh", "id": "c6maylv", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 3, "body": "[Hackers: Wizards of the Electronic Age](https://www.youtube.com/watch?v=bl_1OybdteY) [1984]\n\nBrilliant documentary featuring Steve Wozniak and many other programmers who created some of the first software / games for public use", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=bl_1OybdteY\"&gt;Hackers: Wizards of the Electronic Age&lt;/a&gt; [1984]&lt;/p&gt;\n\n&lt;p&gt;Brilliant documentary featuring Steve Wozniak and many other programmers who created some of the first software / games for public use&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6maylv", "flair_text": null, "created": 1350233152.0, "created_utc": 1350229552.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11fthb", "children": [], "author": "stordoff", "id": "c6m3upb", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 3, "body": "I can't remember what they were called, but the BBC have made several good documentaries about Bletchley Park, Alan Turing, cryptography etc..", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can&amp;#39;t remember what they were called, but the BBC have made several good documentaries about Bletchley Park, Alan Turing, cryptography etc..&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m3upb", "flair_text": null, "created": 1350184555.0, "created_utc": 1350180955.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11fthb", "children": [], "author": "ethikal", "id": "c6m5ceo", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 2, "body": "i forget what the name was, but it was about origami and computational geometry. very interesting movie nonetheless i think it had the word fold in the name.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;i forget what the name was, but it was about origami and computational geometry. very interesting movie nonetheless i think it had the word fold in the name.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m5ceo", "flair_text": null, "created": 1350191120.0, "created_utc": 1350187520.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11fthb", "children": [], "author": "basetw0", "id": "c6mcw1l", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 3, "body": " \n[BBC - Hunt for AI.](http://youtu.be/KN0kBnvryh4)\n\nI love this documentary. ", "edited": 1350246040.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://youtu.be/KN0kBnvryh4\"&gt;BBC - Hunt for AI.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I love this documentary. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mcw1l", "flair_text": null, "created": 1350241845.0, "created_utc": 1350238245.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11fthb", "children": [], "author": "acolin", "id": "c6m7y52", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 1, "body": "Lectures given at ACM A.M. Turing Centenary Celebration are [online](http://amturing.acm.org/acm_tcc_webcasts.cfm).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lectures given at ACM A.M. Turing Centenary Celebration are &lt;a href=\"http://amturing.acm.org/acm_tcc_webcasts.cfm\"&gt;online&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m7y52", "flair_text": null, "created": 1350205393.0, "created_utc": 1350201793.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11fthb", "children": [], "author": "LeonasL", "id": "c6m98sm", "parent_id": "t3_11fthb", "score": 0, "approved_by": null, "upvotes": 1, "body": "Heres a video about Unix from Bell Labs: http://www.youtube.com/watch?v=tc4ROCJYbm0", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Heres a video about Unix from Bell Labs: &lt;a href=\"http://www.youtube.com/watch?v=tc4ROCJYbm0\"&gt;http://www.youtube.com/watch?v=tc4ROCJYbm0&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m98sm", "flair_text": null, "created": 1350220425.0, "created_utc": 1350216825.0, "num_reports": null}], "score": 56, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 70, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11fthb/good_documentaries_for_any_specific_topics_in/", "has_more_comments": false, "name": "t3_11fthb", "created": 1350179240.0, "url": "http://www.reddit.com/r/compsci/comments/11fthb/good_documentaries_for_any_specific_topics_in/", "author_flair_text": null, "author": "MarshingMyMellow", "created_utc": 1350175640.0, "link_flair_text": null, "media": null, "num_reports": null}, "339": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 1, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone I am a grad student and currently considering to carry out research in the field of OS. Can you guys please tell me some research areas in this field and some topics which are pretty hot these days in them(the areas)? Many thanks :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi everyone I am a grad student and currently considering to carry out research in the field of OS. Can you guys please tell me some research areas in this field and some topics which are pretty hot these days in them(the areas)? Many thanks :)", "saved": false, "id": "11gfwy", "clicked": false, "title": "Areas of research in Operating Systems?", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11gfwy", "children": [], "author": "quidam_vagus", "id": "c6nftcx", "parent_id": "t3_11gfwy", "score": 0, "approved_by": null, "upvotes": 6, "body": "Security is a big one these days.\n\nFormal systems. Provably secure/correct. Isolation of rings. Trusted vs. untrusted code. Implications of architecture decisions on security, and how much you can trust the hardware. Isolation (eg device drivers being isolated from kernel). Risk mitigation techniques (nX/ASLR and others).  MILS vs. MLS. Cross domain systems.\n\nJust some ideas. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Security is a big one these days.&lt;/p&gt;\n\n&lt;p&gt;Formal systems. Provably secure/correct. Isolation of rings. Trusted vs. untrusted code. Implications of architecture decisions on security, and how much you can trust the hardware. Isolation (eg device drivers being isolated from kernel). Risk mitigation techniques (nX/ASLR and others).  MILS vs. MLS. Cross domain systems.&lt;/p&gt;\n\n&lt;p&gt;Just some ideas. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nftcx", "flair_text": null, "created": 1350423129.0, "created_utc": 1350419529.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11gfwy", "children": [], "author": "astong", "id": "c6nq6qy", "parent_id": "t3_11gfwy", "score": 0, "approved_by": null, "upvotes": 4, "body": "Real-time system are also highly studied these days. Several problems appear with multi-processor real-time system (that do not exist, or already resolved with mono-processor).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Real-time system are also highly studied these days. Several problems appear with multi-processor real-time system (that do not exist, or already resolved with mono-processor).&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nq6qy", "flair_text": null, "created": 1350474333.0, "created_utc": 1350470733.0, "num_reports": null}], "score": 4, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 5, "hidden": false, "thumbnail": "", "edited": 1350212068.0, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11gfwy/areas_of_research_in_operating_systems/", "has_more_comments": false, "name": "t3_11gfwy", "created": 1350215455.0, "url": "http://www.reddit.com/r/compsci/comments/11gfwy/areas_of_research_in_operating_systems/", "author_flair_text": null, "author": "aliirz", "created_utc": 1350211855.0, "link_flair_text": null, "media": null, "num_reports": null}, "340": {"domain": "lesswrong.com", "link_flair_class": null, "banned_by": null, "downvotes": 30, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11eh2w", "clicked": false, "title": "An interesting discussion on how the conventional wisdom about the impossibility of inferring causality was overturned by Judea Pearl et al.", "num_comments": 31, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11eh2w", "children": [], "author": "dmwit", "id": "c6lru3n", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 12, "body": "I'm not sure I feel convinced. His argument seems to be that, given three variables, we can sometimes identify some incorrect three-variable causation graphs. If, by the process of elimination, only one three-variable graph is not incorrect, it must be correct. What leaves me unconvinced is that this only considers three-variable graphs.\n\nIf four-variable (or more-variable) graphs are allowed, can we still conclude that all correct graphs have causation edges in the same places the \"correct\" three-variable graph does?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not sure I feel convinced. His argument seems to be that, given three variables, we can sometimes identify some incorrect three-variable causation graphs. If, by the process of elimination, only one three-variable graph is not incorrect, it must be correct. What leaves me unconvinced is that this only considers three-variable graphs.&lt;/p&gt;\n\n&lt;p&gt;If four-variable (or more-variable) graphs are allowed, can we still conclude that all correct graphs have causation edges in the same places the &amp;quot;correct&amp;quot; three-variable graph does?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lru3n", "flair_text": null, "created": 1350111784.0, "created_utc": 1350108184.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11eh2w", "children": [], "author": "ange1obear", "id": "c6lr9tf", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 9, "body": "The comments there say it more eloquently than I could, but this isn't really \"overturning\" conventional wisdom in any sense.  As Yudkowsky puts it, this is \"completely bog-standard Bayesian networks, causal models, and causal diagrams\", most of which began appearing in rudimentary form at least as early as the 18th century.  Assumptions about causality go into the analysis from the start, so all that's really being done is inferring specific characteristics of causality from a more general framework.\n\nOf course, all of that is not to detract from the main points of the article, which are all sensible and useful and so on.  I just mean to say that the headline is a bit misleading.  But I guess that's the point of headlines.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The comments there say it more eloquently than I could, but this isn&amp;#39;t really &amp;quot;overturning&amp;quot; conventional wisdom in any sense.  As Yudkowsky puts it, this is &amp;quot;completely bog-standard Bayesian networks, causal models, and causal diagrams&amp;quot;, most of which began appearing in rudimentary form at least as early as the 18th century.  Assumptions about causality go into the analysis from the start, so all that&amp;#39;s really being done is inferring specific characteristics of causality from a more general framework.&lt;/p&gt;\n\n&lt;p&gt;Of course, all of that is not to detract from the main points of the article, which are all sensible and useful and so on.  I just mean to say that the headline is a bit misleading.  But I guess that&amp;#39;s the point of headlines.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lr9tf", "flair_text": null, "created": 1350108385.0, "created_utc": 1350104785.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11eh2w", "children": [], "author": "berf", "id": "c6lu58b", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 5, "body": "lots of bogosity in this paen to causal modelling.  First, causal modelling was not invented in the 1980's; it goes back at least to Sewall Wright's invention of what he called \"path analysis\", which is today's \"structural equation modelling\".  Second, as dominosci sez, causal inference *assumes* that *all* causal variables have been observed, which is almost always false in non-toy situations.  There is some interesting math in \"causal models\", \"Bayes nets\", and \"graphical models\".  But overturning \"correlation is not causation\" is not what they do.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;lots of bogosity in this paen to causal modelling.  First, causal modelling was not invented in the 1980&amp;#39;s; it goes back at least to Sewall Wright&amp;#39;s invention of what he called &amp;quot;path analysis&amp;quot;, which is today&amp;#39;s &amp;quot;structural equation modelling&amp;quot;.  Second, as dominosci sez, causal inference &lt;em&gt;assumes&lt;/em&gt; that &lt;em&gt;all&lt;/em&gt; causal variables have been observed, which is almost always false in non-toy situations.  There is some interesting math in &amp;quot;causal models&amp;quot;, &amp;quot;Bayes nets&amp;quot;, and &amp;quot;graphical models&amp;quot;.  But overturning &amp;quot;correlation is not causation&amp;quot; is not what they do.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lu58b", "flair_text": null, "created": 1350136810.0, "created_utc": 1350133210.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11eh2w", "children": [], "author": "dominosci", "id": "c6lttx1", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 7, "body": "The author's error is that he has failed to examine the possibility that for any proposed cause and effect he finds through his method it may be that they are both caused by a third - as yet unexamined - event. Thus making them correlated and not joined by any causal link.", "edited": 1350142945.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The author&amp;#39;s error is that he has failed to examine the possibility that for any proposed cause and effect he finds through his method it may be that they are both caused by a third - as yet unexamined - event. Thus making them correlated and not joined by any causal link.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lttx1", "flair_text": null, "created": 1350133259.0, "created_utc": 1350129659.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11eh2w", "children": [], "author": "onelasttime", "id": "c6nxd5j", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 1, "body": "In the Burglar example, to justify the assertion (EARTHQUAKE &amp; ALARM) \u2192 NOT BURGLAR Yudkowsky says : \"I don't need to explain the alarm by a burglar, because the alarm has already been explained by the earthquake. I conclude there was no burglar.\" But that's just poor reasoning: just because the alarm was explained by the earthquake doesn't mean there was no burglar; you could even hypothesize that it would be more likely. Whatever paradox he is referring to I fail to see. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In the Burglar example, to justify the assertion (EARTHQUAKE &amp;amp; ALARM) \u2192 NOT BURGLAR Yudkowsky says : &amp;quot;I don&amp;#39;t need to explain the alarm by a burglar, because the alarm has already been explained by the earthquake. I conclude there was no burglar.&amp;quot; But that&amp;#39;s just poor reasoning: just because the alarm was explained by the earthquake doesn&amp;#39;t mean there was no burglar; you could even hypothesize that it would be more likely. Whatever paradox he is referring to I fail to see. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nxd5j", "flair_text": null, "created": 1350506081.0, "created_utc": 1350502481.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 7, "link_id": "t3_11eh2w", "children": [], "author": "otakucode", "id": "c6lud0o", "parent_id": "t3_11eh2w", "score": 0, "approved_by": null, "upvotes": 3, "body": "And when you find out that the population of people who don't exercise in your culture just so happens to overlap almost perfectly with the people who eat something which radically increases fat retention, and you've passed laws manipulating the lives of people based on your belief that exercise is the key, and you realize 20 years on that you've ruined the lives of millions of actual human beings and vastly increased the suffering in the world by getting lazy and refusing to face the fact that an issue such that involves human biology is flat out too complex to be reliably amenable to such 'reasoning'... what then?\n\nWhat determines 'truth' is always an issue of human suffering.  We have enough history behind us of people ignoring the strictures of logic and trying to paste over the cracks in their argument with good intentions, and there are corpses in our wake.  When we form consensus and accept something as truth, policy gets made around it.  Policy is, at its base, leaving reason behind.  It is the point where we say, as a society, 'this is proven, and if reasonable arguments cannot convince you, we are confident enough in it to use force'.\n\nDue to the restrictions of practicality, and the fact that we often have to act without full information or proof, it is inevitable that we will make mistakes.  I can see no advantage to this inference of causality save for making people who should not be confident in their conclusions confident in them.  If you have strong statistical evidence, why is it not adequate to point that out and also point out that there are possibly confounding factors?  Such an approach would hopefully keep arguments which are not CERTAIN outside the realm of policy and in the realm of personal decision in order to hopefully reduce the overall suffering that can be laid at the door of science being presumptive.\n\nI think a good test of this means of understanding is to apply it to the past.  What conclusions would we have come to had we accepted this in 1900?  Would eugenics be science fact?  Would it have fueled colonialism?  Would it have taken the demographic and social trends of the time and fought against school integration and civil rights?  The standard of truth doesn't change often because its impact is nothing short of monumental.  It shapes whether our institutions jump to conclusions and sweeps aside all the messy 'details' and accepts things like widespread cultural flaws as fundamentally true simply because they are statistically ubiquitous, or whether they are parsimonious and conservative in what they dub 'truth'.  Given the extremely large and rapidly expanding population of people across the globe who engage in no critical thought whatsoever in their life and rely entirely on what is handed to them by those perceived to be in authority or what is simply floating around around them, it is becoming more important that we be as critical and conservative as possible in the intellectual realm.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And when you find out that the population of people who don&amp;#39;t exercise in your culture just so happens to overlap almost perfectly with the people who eat something which radically increases fat retention, and you&amp;#39;ve passed laws manipulating the lives of people based on your belief that exercise is the key, and you realize 20 years on that you&amp;#39;ve ruined the lives of millions of actual human beings and vastly increased the suffering in the world by getting lazy and refusing to face the fact that an issue such that involves human biology is flat out too complex to be reliably amenable to such &amp;#39;reasoning&amp;#39;... what then?&lt;/p&gt;\n\n&lt;p&gt;What determines &amp;#39;truth&amp;#39; is always an issue of human suffering.  We have enough history behind us of people ignoring the strictures of logic and trying to paste over the cracks in their argument with good intentions, and there are corpses in our wake.  When we form consensus and accept something as truth, policy gets made around it.  Policy is, at its base, leaving reason behind.  It is the point where we say, as a society, &amp;#39;this is proven, and if reasonable arguments cannot convince you, we are confident enough in it to use force&amp;#39;.&lt;/p&gt;\n\n&lt;p&gt;Due to the restrictions of practicality, and the fact that we often have to act without full information or proof, it is inevitable that we will make mistakes.  I can see no advantage to this inference of causality save for making people who should not be confident in their conclusions confident in them.  If you have strong statistical evidence, why is it not adequate to point that out and also point out that there are possibly confounding factors?  Such an approach would hopefully keep arguments which are not CERTAIN outside the realm of policy and in the realm of personal decision in order to hopefully reduce the overall suffering that can be laid at the door of science being presumptive.&lt;/p&gt;\n\n&lt;p&gt;I think a good test of this means of understanding is to apply it to the past.  What conclusions would we have come to had we accepted this in 1900?  Would eugenics be science fact?  Would it have fueled colonialism?  Would it have taken the demographic and social trends of the time and fought against school integration and civil rights?  The standard of truth doesn&amp;#39;t change often because its impact is nothing short of monumental.  It shapes whether our institutions jump to conclusions and sweeps aside all the messy &amp;#39;details&amp;#39; and accepts things like widespread cultural flaws as fundamentally true simply because they are statistically ubiquitous, or whether they are parsimonious and conservative in what they dub &amp;#39;truth&amp;#39;.  Given the extremely large and rapidly expanding population of people across the globe who engage in no critical thought whatsoever in their life and rely entirely on what is handed to them by those perceived to be in authority or what is simply floating around around them, it is becoming more important that we be as critical and conservative as possible in the intellectual realm.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lud0o", "flair_text": null, "created": 1350138770.0, "created_utc": 1350135170.0, "num_reports": null}], "score": 52, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 82, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11eh2w/an_interesting_discussion_on_how_the_conventional/", "has_more_comments": false, "name": "t3_11eh2w", "created": 1350105167.0, "url": "http://lesswrong.com/lw/ev3/causal_diagrams_and_causal_models/", "author_flair_text": null, "author": "qkdhfjdjdhd", "created_utc": 1350101567.0, "link_flair_text": null, "media": null, "num_reports": null}, "341": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 22, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11djsh", "clicked": false, "title": "What are some of the reasons you like computer science?", "num_comments": 61, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11djsh", "children": [], "author": "crwcomposer", "id": "c6ll33q", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 15, "body": "You can apply it to almost anything. Do you like physics, biology, chemistry, math, music, robots, or language? Well there's a sub-discipline of Computer Science for you! And many others, too!\n\nAnd until the people in these \"pure\" disciplines learn Computer Science for themselves, you'll be in high demand!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can apply it to almost anything. Do you like physics, biology, chemistry, math, music, robots, or language? Well there&amp;#39;s a sub-discipline of Computer Science for you! And many others, too!&lt;/p&gt;\n\n&lt;p&gt;And until the people in these &amp;quot;pure&amp;quot; disciplines learn Computer Science for themselves, you&amp;#39;ll be in high demand!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ll33q", "flair_text": null, "created": 1350079483.0, "created_utc": 1350075883.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11djsh", "children": [], "author": "Ventanator", "id": "c6li9am", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 46, "body": "Because it teaches me a new way to think. It helps me see that there are better ways to do almost everything. It's hard not to blur the line between coding and computer science for questions like this though, so specifics are hard for me. I really, really like the fact that I can take an everyday problem, throw some CS at it, and have an elegant solution. All by myself. It's just plain fun.\n\nPlus, it puts beer on the table.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Because it teaches me a new way to think. It helps me see that there are better ways to do almost everything. It&amp;#39;s hard not to blur the line between coding and computer science for questions like this though, so specifics are hard for me. I really, really like the fact that I can take an everyday problem, throw some CS at it, and have an elegant solution. All by myself. It&amp;#39;s just plain fun.&lt;/p&gt;\n\n&lt;p&gt;Plus, it puts beer on the table.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6li9am", "flair_text": null, "created": 1350068873.0, "created_utc": 1350065273.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11djsh", "children": [], "author": "WarlordOfTheMidwest", "id": "c6likb1", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 14, "body": "Did my first bachelors in physics, had a bad and abortive gradschool experience, and now I'm doing a second BS/MS in CSE (my school is weird and treats it as engineering).\n\nI've had enough math and logic to choke a horse, what I'm enjoying is actually MAKING things for once.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Did my first bachelors in physics, had a bad and abortive gradschool experience, and now I&amp;#39;m doing a second BS/MS in CSE (my school is weird and treats it as engineering).&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve had enough math and logic to choke a horse, what I&amp;#39;m enjoying is actually MAKING things for once.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6likb1", "flair_text": null, "created": 1350070018.0, "created_utc": 1350066418.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11djsh", "children": [], "author": "mvaganov", "id": "c6lobve", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 14, "body": "It makes me feel like God. I like how Nikola Tesla put it:\n\n&gt; *I do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success... Such emotions make a man forget food, sleep, friends, love, everything.*\n&gt; -Nikola Tesla", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It makes me feel like God. I like how Nikola Tesla put it:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;I do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success... Such emotions make a man forget food, sleep, friends, love, everything.&lt;/em&gt;\n-Nikola Tesla&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lobve", "flair_text": null, "created": 1350093710.0, "created_utc": 1350090110.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11djsh", "children": [], "author": "sillyquiet", "id": "c6liv9f", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 10, "body": "I went back to school to get a compsci degree in the late 90s, right in the middle of the first .com bubble. Like a ton of other people, I did it because that was where the money was. Unlike a ton of other people, I actually had an aptitude for it.\nWhy do I love it?\nYou can take something ephemeral, logical thought, transform that thought into mathematics, and transform that math into bits that accomplish something in the real world. That's magic! It's telekinesis! The transformation of thought-&gt;math-&gt;code-&gt;results, and the challenges associated with that transformation is why I love compsci.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I went back to school to get a compsci degree in the late 90s, right in the middle of the first .com bubble. Like a ton of other people, I did it because that was where the money was. Unlike a ton of other people, I actually had an aptitude for it.\nWhy do I love it?\nYou can take something ephemeral, logical thought, transform that thought into mathematics, and transform that math into bits that accomplish something in the real world. That&amp;#39;s magic! It&amp;#39;s telekinesis! The transformation of thought-&amp;gt;math-&amp;gt;code-&amp;gt;results, and the challenges associated with that transformation is why I love compsci.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6liv9f", "flair_text": null, "created": 1350071158.0, "created_utc": 1350067558.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11djsh", "children": [], "author": "simplyderp", "id": "c6lnnlp", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 18, "body": "I like doing magic.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like doing magic.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lnnlp", "flair_text": null, "created": 1350090488.0, "created_utc": 1350086888.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "chiefkikio", "id": "c6lizkg", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 5, "body": "It's a language for problem solving and I like learning things for a purpose. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a language for problem solving and I like learning things for a purpose. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lizkg", "flair_text": null, "created": 1350071607.0, "created_utc": 1350068007.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "nonconvergent", "id": "c6ll42y", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 5, "body": "I like puzzles, or more over I like finding solutions.  Which is not the same as riddles, brainteasers, or numerical puzzles like sudoku. Those I hate.\n\nI love it for the same reasons I love math...without any of the reasons I hate math.  Although the occassional rote memorization tends to crop up in formal education, and a lot of techniques build on a lot of other techniques.\n\nRight now I'm studying image processing and algorithms and ever day is just \"Wow, if I can do this...then I can do this, this and that!\"", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like puzzles, or more over I like finding solutions.  Which is not the same as riddles, brainteasers, or numerical puzzles like sudoku. Those I hate.&lt;/p&gt;\n\n&lt;p&gt;I love it for the same reasons I love math...without any of the reasons I hate math.  Although the occassional rote memorization tends to crop up in formal education, and a lot of techniques build on a lot of other techniques.&lt;/p&gt;\n\n&lt;p&gt;Right now I&amp;#39;m studying image processing and algorithms and ever day is just &amp;quot;Wow, if I can do this...then I can do this, this and that!&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ll42y", "flair_text": null, "created": 1350079592.0, "created_utc": 1350075992.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "flebron", "id": "c6m8eq8", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 4, "body": "I fell in love with programming because it allowed me to make my own things. Mine, not anyone else's. If the program failed, it was my fault, nobody else's. Likewise, if it succeeded, it was my merit.\nLike a child who makes clay pencilholders for his dad, I was making things with my bare hands, and they didn't look shoddy at all (at least, at the time). They might not have been the greatest, but they were mine.\n\nYears later, fresh out of high school, I was working my first job as a programmer, a web developer specifically, doing PHP. I was surrounded by engineers doing the rest of the website. It wasn't particularly challenging work, but it was programming, and it was still fun. I still had a smile on my face, and would've still worked that job even if they hadn't paid me.\n\nI happened to walk past a coworker, running his own section (which the company called the 'lab'). He was wearing noise cancellation headphones, typing furiously, with a heavy math book (which I now know to be Matrix Computations) beside him. I was surprised, I hadn't seen any particular connection with mathematics and programming. To me, programming was more a craft than a science. \n\nI asked him what he was doing. He showed me: he was making a recommendation system. Users had picked certain things, and we wanted to cluster users, to recommend choices to them based on what similar peers had been choosing. He was doing sparse matrix computations for this (specifically, SVD), because these were 1e9*1e9 matrices.\nI was both shocked and amazed. I had known for years, in the back of my head, that there were these \"magicians\", these people doing things I couldn't imagine doing, not with my high school education at least. Things like compilers, graph algorithms, huge linear algebra problems, machine learning, etc.\nBut now I had seen one of these magicians live, and I could stop him and ask him questions. Specifically, I asked him where he had learned this, and he told me about the concept of Computer Science, and how he had a degree in it.\n\nIt's been a few years from that moment, and I am finishing my Bs.Sc. + Ms.Sc. in Computer Science. I've done an internship at Google and will return there in a few months for a second gig. \nI am still as in love with programming as I was when I was a kid, but I now know a lot more about it, and I find it all the more beautiful because of that.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I fell in love with programming because it allowed me to make my own things. Mine, not anyone else&amp;#39;s. If the program failed, it was my fault, nobody else&amp;#39;s. Likewise, if it succeeded, it was my merit.\nLike a child who makes clay pencilholders for his dad, I was making things with my bare hands, and they didn&amp;#39;t look shoddy at all (at least, at the time). They might not have been the greatest, but they were mine.&lt;/p&gt;\n\n&lt;p&gt;Years later, fresh out of high school, I was working my first job as a programmer, a web developer specifically, doing PHP. I was surrounded by engineers doing the rest of the website. It wasn&amp;#39;t particularly challenging work, but it was programming, and it was still fun. I still had a smile on my face, and would&amp;#39;ve still worked that job even if they hadn&amp;#39;t paid me.&lt;/p&gt;\n\n&lt;p&gt;I happened to walk past a coworker, running his own section (which the company called the &amp;#39;lab&amp;#39;). He was wearing noise cancellation headphones, typing furiously, with a heavy math book (which I now know to be Matrix Computations) beside him. I was surprised, I hadn&amp;#39;t seen any particular connection with mathematics and programming. To me, programming was more a craft than a science. &lt;/p&gt;\n\n&lt;p&gt;I asked him what he was doing. He showed me: he was making a recommendation system. Users had picked certain things, and we wanted to cluster users, to recommend choices to them based on what similar peers had been choosing. He was doing sparse matrix computations for this (specifically, SVD), because these were 1e9*1e9 matrices.\nI was both shocked and amazed. I had known for years, in the back of my head, that there were these &amp;quot;magicians&amp;quot;, these people doing things I couldn&amp;#39;t imagine doing, not with my high school education at least. Things like compilers, graph algorithms, huge linear algebra problems, machine learning, etc.\nBut now I had seen one of these magicians live, and I could stop him and ask him questions. Specifically, I asked him where he had learned this, and he told me about the concept of Computer Science, and how he had a degree in it.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s been a few years from that moment, and I am finishing my Bs.Sc. + Ms.Sc. in Computer Science. I&amp;#39;ve done an internship at Google and will return there in a few months for a second gig. \nI am still as in love with programming as I was when I was a kid, but I now know a lot more about it, and I find it all the more beautiful because of that.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6m8eq8", "flair_text": null, "created": 1350209940.0, "created_utc": 1350206340.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "BariumBlue", "id": "c6ll47m", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 3, "body": "Abstract thoughts that have a very real and very useful significance.\n\nI really like simple, general, and useful thoughts and ideas.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Abstract thoughts that have a very real and very useful significance.&lt;/p&gt;\n\n&lt;p&gt;I really like simple, general, and useful thoughts and ideas.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ll47m", "flair_text": null, "created": 1350079607.0, "created_utc": 1350076007.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "bheklilr", "id": "c6ln1lj", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 3, "body": "The \"magic\" of making a computer do something.  Most people don't know hardly anything about how a computer works, but I know the details, and I know how to give it instructions.  It's like adding a second brain that is really really good at the kinds of problems I'm really bad at (number crunching), so that I can focus on the kinds of problems I'm really good at, like language and image processing.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The &amp;quot;magic&amp;quot; of making a computer do something.  Most people don&amp;#39;t know hardly anything about how a computer works, but I know the details, and I know how to give it instructions.  It&amp;#39;s like adding a second brain that is really really good at the kinds of problems I&amp;#39;m really bad at (number crunching), so that I can focus on the kinds of problems I&amp;#39;m really good at, like language and image processing.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ln1lj", "flair_text": null, "created": 1350087689.0, "created_utc": 1350084089.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "bgeron", "id": "c6lmf4s", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "I like the malleability. Using nothing you can create almost anything, it feels!\n\nThat said, some things are _hard_ to do because of the current programming languages, and each language has advantages over other languages. Let languages evolve further and our programs will be more powerful with simpler code, and less of it. This results in less bugs, happier developers, and happier users.\n\nI'm excited for what I think is possible, and I can't wait until we can make it all real. Unfortunately those languages don't spring into life overnight, but I'd love to contribute.\n\n_(Some things languages are good at: Python looks clean, Haskell programs have no bugs when whey work, C gives you loads of freedom, Erlang is natural for stateful systems, Lisp changes itself to your problem domain.)_", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like the malleability. Using nothing you can create almost anything, it feels!&lt;/p&gt;\n\n&lt;p&gt;That said, some things are &lt;em&gt;hard&lt;/em&gt; to do because of the current programming languages, and each language has advantages over other languages. Let languages evolve further and our programs will be more powerful with simpler code, and less of it. This results in less bugs, happier developers, and happier users.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m excited for what I think is possible, and I can&amp;#39;t wait until we can make it all real. Unfortunately those languages don&amp;#39;t spring into life overnight, but I&amp;#39;d love to contribute.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(Some things languages are good at: Python looks clean, Haskell programs have no bugs when whey work, C gives you loads of freedom, Erlang is natural for stateful systems, Lisp changes itself to your problem domain.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lmf4s", "flair_text": null, "created": 1350084926.0, "created_utc": 1350081326.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "zifnab06", "id": "c6ln2v1", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "I'm really good at it. (Lame answer, I know)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m really good at it. (Lame answer, I know)&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ln2v1", "flair_text": null, "created": 1350087845.0, "created_utc": 1350084245.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "cutiger2085", "id": "c6lpslm", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "I like computer science because it covers so much ground.  You have so many career options, and it isn't that hard to move from one to the next as you progress in your career.  Therefore, you're able to experiment and play around with different aspects so that you can find what you really enjoy and want to spend the rest of your life doing.\n\nI've been a computer programmer for 7 years, and I've gone from coding to lead developer/trainer to project manager.  I leaned a lot on my CS background to help me with all of these positions.  However, I was able to realize, once I left coding and went to management, that management wasn't for me.  I enjoy being in the weeds too much and solving problems every day as my preferred version of work. ", "edited": 1350155951.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like computer science because it covers so much ground.  You have so many career options, and it isn&amp;#39;t that hard to move from one to the next as you progress in your career.  Therefore, you&amp;#39;re able to experiment and play around with different aspects so that you can find what you really enjoy and want to spend the rest of your life doing.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been a computer programmer for 7 years, and I&amp;#39;ve gone from coding to lead developer/trainer to project manager.  I leaned a lot on my CS background to help me with all of these positions.  However, I was able to realize, once I left coding and went to management, that management wasn&amp;#39;t for me.  I enjoy being in the weeds too much and solving problems every day as my preferred version of work. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lpslm", "flair_text": null, "created": 1350100945.0, "created_utc": 1350097345.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "swishsky", "id": "c6nzjg7", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "After programming for a few years now as a student, the main reason I like computer science is \"that feeling\". \n\nYou know dat feel. Dat feel the moment when you solve a logic error, everything seems so clear. Dat feel when your program compiles on the first try. Even dat frustrating feel of finding a syntax error after hours and hours of thinking, I love it because I realize how stupid I *was*... But after I find the answer, I am a tiny bit smarter. I love the complexity of computer science and how non-cs minds can't really comprehend our work because it is so abstract, but probably use our \"works of art\" daily... I like CS because it is an abstract work with very visible results in today's world.\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After programming for a few years now as a student, the main reason I like computer science is &amp;quot;that feeling&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;You know dat feel. Dat feel the moment when you solve a logic error, everything seems so clear. Dat feel when your program compiles on the first try. Even dat frustrating feel of finding a syntax error after hours and hours of thinking, I love it because I realize how stupid I &lt;em&gt;was&lt;/em&gt;... But after I find the answer, I am a tiny bit smarter. I love the complexity of computer science and how non-cs minds can&amp;#39;t really comprehend our work because it is so abstract, but probably use our &amp;quot;works of art&amp;quot; daily... I like CS because it is an abstract work with very visible results in today&amp;#39;s world.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nzjg7", "flair_text": null, "created": 1350513406.0, "created_utc": 1350509806.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11djsh", "children": [], "author": "josephhamilton1", "id": "c6ll1ks", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 5, "body": "My favorite thing is optimization. If you want to get an idea of what computer science is really about read this http://en.wikipedia.org/wiki/Hash_table.\n\nI love that no problem has one golden solution and many factors have to be considered to truly appreciate the scope of any optimization.  I also LOVE arguing about differences in languages, LOL^3.\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My favorite thing is optimization. If you want to get an idea of what computer science is really about read this &lt;a href=\"http://en.wikipedia.org/wiki/Hash_table\"&gt;http://en.wikipedia.org/wiki/Hash_table&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I love that no problem has one golden solution and many factors have to be considered to truly appreciate the scope of any optimization.  I also LOVE arguing about differences in languages, LOL&lt;sup&gt;3.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ll1ks", "flair_text": null, "created": 1350079315.0, "created_utc": 1350075715.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "duwke", "id": "c6lno4e", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 1, "body": "I can work nearly anywhere and at any time, as long as I have an internet connection. If I can work while I travel, I can play once I arrive. Also, an idea can become a business. Your imagination is the only limitation.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can work nearly anywhere and at any time, as long as I have an internet connection. If I can work while I travel, I can play once I arrive. Also, an idea can become a business. Your imagination is the only limitation.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lno4e", "flair_text": null, "created": 1350090555.0, "created_utc": 1350086955.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11djsh", "children": [], "author": "otakucode", "id": "c6lp8ns", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "I honestly believe that the next great step in human knowledge will be the development of a system of understanding and manipulating complex systems, and computer science is likely taking the right stabs in that direction.  Mathematics as it currently stands is inadequate to address complex systems (if you disagree, just let me know how you would go about solving a system of 400 million simultaneous partial differential equations).  In order to understand reality to the point where we can set in motion simple systems which will be robust to environmental changes and operate on both the nanoscale and the macroscopic scale to accomplish a goal, we will need entirely new means of manipulating and thinking about reality.  We are, of course, likely very far off from developing such capability, but computer science is close enough to mathematics to understand its tools but also not so entirely enclosed by it to be restricted by the same limitations (well, in theory).  Even if I never contribute the smallest mote to a future that includes that understanding, I feel the striving will be worth every ounce of effort.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I honestly believe that the next great step in human knowledge will be the development of a system of understanding and manipulating complex systems, and computer science is likely taking the right stabs in that direction.  Mathematics as it currently stands is inadequate to address complex systems (if you disagree, just let me know how you would go about solving a system of 400 million simultaneous partial differential equations).  In order to understand reality to the point where we can set in motion simple systems which will be robust to environmental changes and operate on both the nanoscale and the macroscopic scale to accomplish a goal, we will need entirely new means of manipulating and thinking about reality.  We are, of course, likely very far off from developing such capability, but computer science is close enough to mathematics to understand its tools but also not so entirely enclosed by it to be restricted by the same limitations (well, in theory).  Even if I never contribute the smallest mote to a future that includes that understanding, I feel the striving will be worth every ounce of effort.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lp8ns", "flair_text": null, "created": 1350098240.0, "created_utc": 1350094640.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "lasthope106", "id": "c6lpv9m", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 1, "body": "There are a lot of interesting and hard problems in the field.  And as more and more disciplines start to realize that computation can help them find answers, the set of problems grows even bigger.  I like to solve problems, so I feel I can make a difference no matter what domain I decide to focus on.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are a lot of interesting and hard problems in the field.  And as more and more disciplines start to realize that computation can help them find answers, the set of problems grows even bigger.  I like to solve problems, so I feel I can make a difference no matter what domain I decide to focus on.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lpv9m", "flair_text": null, "created": 1350101311.0, "created_utc": 1350097711.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "enddream", "id": "c6lvylu", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 1, "body": "I love computer science because it makes me a better programmer which enables me to create something out of nothing.       I spent years making music because I love creating but only 1/10000 musicians can make a living at it.* Luckily writing software is just as satisfying and it's much easier to make money. \n\n* 90% of statistics are made up on the spot", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I love computer science because it makes me a better programmer which enables me to create something out of nothing.       I spent years making music because I love creating but only 1/10000 musicians can make a living at it.* Luckily writing software is just as satisfying and it&amp;#39;s much easier to make money. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;90% of statistics are made up on the spot&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lvylu", "flair_text": null, "created": 1350148543.0, "created_utc": 1350144943.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "[deleted]", "id": "c6mjxc2", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 1, "body": "I love it because it is universal. Like a Jack-of-all-trades, you can apply it to many fields and many disiplines. If you are a student you can duel major in bio or chem for working with those systems or you can go into security, information flow, sports, economics, hospital tech, design, languages and many more fields. That is why I like it.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I love it because it is universal. Like a Jack-of-all-trades, you can apply it to many fields and many disiplines. If you are a student you can duel major in bio or chem for working with those systems or you can go into security, information flow, sports, economics, hospital tech, design, languages and many more fields. That is why I like it.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mjxc2", "flair_text": null, "created": 1350269935.0, "created_utc": 1350266335.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11djsh", "children": [], "author": "tassyguy", "id": "c6mskch", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 1, "body": "Well, even after taking AP CompSci for around 2 months, I can now get my way around in thinking like a machine. It's actually pretty interesting, as it's a new way to think about problems. Also, I can use it in any of my other classes, especially my math ones where I have to make equations with 4-6 dimensions and constraints. Being able to make a lot of money off of it is great as well, but honestly that's minor for me.\n\nAlso it's surprisingly fun for me!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, even after taking AP CompSci for around 2 months, I can now get my way around in thinking like a machine. It&amp;#39;s actually pretty interesting, as it&amp;#39;s a new way to think about problems. Also, I can use it in any of my other classes, especially my math ones where I have to make equations with 4-6 dimensions and constraints. Being able to make a lot of money off of it is great as well, but honestly that&amp;#39;s minor for me.&lt;/p&gt;\n\n&lt;p&gt;Also it&amp;#39;s surprisingly fun for me!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mskch", "flair_text": null, "created": 1350322709.0, "created_utc": 1350319109.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11djsh", "children": [], "author": "thekaldar", "id": "c6lmdyi", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "For me, I remember when I was little, and I was at my grandfather's workplace.  He was showing me a floppy disk, and I was amazed at all the wonderful things a computer can do.  Just the absolute power that someone has when you are programming is what I love about computer science.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For me, I remember when I was little, and I was at my grandfather&amp;#39;s workplace.  He was showing me a floppy disk, and I was amazed at all the wonderful things a computer can do.  Just the absolute power that someone has when you are programming is what I love about computer science.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lmdyi", "flair_text": null, "created": 1350084785.0, "created_utc": 1350081185.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11djsh", "children": [], "author": "sixstringartist", "id": "c6lp80w", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 2, "body": "its fun? Why do I like fucking, drinking and playing counter-strike? yea...", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;its fun? Why do I like fucking, drinking and playing counter-strike? yea...&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lp80w", "flair_text": null, "created": 1350098149.0, "created_utc": 1350094549.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 15, "link_id": "t3_11djsh", "children": [], "author": "SpongeBobMadeMeGay", "id": "c6llk4q", "parent_id": "t3_11djsh", "score": 0, "approved_by": null, "upvotes": 8, "body": "Computer science is doing God's work. God gave man such large brains, and the entire universe to mold into his tools. As a computer scientist, you are advancing our species technologically, intellectually, and spiritually. Knowledge is power. You contribute the platforms that empower people, that take down dictators and connect economies and everything in between. This is an important job. The future of our species will be guided by the technology you create today. Go forth. Be bold and be confident in yourself. You've discovered a piece of the meaning of life.\n\n**edit** Welp, I tried to be inspiring. Screw you nerds, I'm going home.", "edited": 1350091623.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Computer science is doing God&amp;#39;s work. God gave man such large brains, and the entire universe to mold into his tools. As a computer scientist, you are advancing our species technologically, intellectually, and spiritually. Knowledge is power. You contribute the platforms that empower people, that take down dictators and connect economies and everything in between. This is an important job. The future of our species will be guided by the technology you create today. Go forth. Be bold and be confident in yourself. You&amp;#39;ve discovered a piece of the meaning of life.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt; Welp, I tried to be inspiring. Screw you nerds, I&amp;#39;m going home.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6llk4q", "flair_text": null, "created": 1350081338.0, "created_utc": 1350077738.0, "num_reports": null}], "score": 19, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 41, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11djsh/what_are_some_of_the_reasons_you_like_computer/", "has_more_comments": false, "name": "t3_11djsh", "created": 1350068454.0, "url": "http://www.reddit.com/r/compsci/comments/11djsh/what_are_some_of_the_reasons_you_like_computer/", "author_flair_text": null, "author": "teddyroo", "created_utc": 1350064854.0, "link_flair_text": null, "media": null, "num_reports": null}, "342": {"domain": "blog.smartbear.com", "link_flair_class": null, "banned_by": null, "downvotes": 45, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "11blht", "clicked": false, "title": "Math Nerds vs. Code Monkeys: Should Computer Science Classes Be More Practical? A look at both sides of the issue.", "num_comments": 137, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11blht", "children": [], "author": "berlinbrown", "id": "c6l3vu4", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 22, "body": "I took CS and Math courses when I was 19 but loved pure programming, I glossed the math details to get my degree.  I didn't really appreciate the math at all.\n\nNow, I come back 10+ years later and love the math and hate the pure programming.  The math and algorithms are where the strong abstract concepts lie.   It is better to look at a problem abstractly than worry about irrelevant details.\n\nWith that said, I think people may absorb more of the practical stuff especially if they are young.  Sometimes you lose people if you just throw pure theory at them.  So I think it takes balance.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I took CS and Math courses when I was 19 but loved pure programming, I glossed the math details to get my degree.  I didn&amp;#39;t really appreciate the math at all.&lt;/p&gt;\n\n&lt;p&gt;Now, I come back 10+ years later and love the math and hate the pure programming.  The math and algorithms are where the strong abstract concepts lie.   It is better to look at a problem abstractly than worry about irrelevant details.&lt;/p&gt;\n\n&lt;p&gt;With that said, I think people may absorb more of the practical stuff especially if they are young.  Sometimes you lose people if you just throw pure theory at them.  So I think it takes balance.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l3vu4", "flair_text": null, "created": 1349995541.0, "created_utc": 1349991941.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 18, "link_id": "t3_11blht", "children": [], "author": "[deleted]", "id": "c6l1cjd", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 94, "body": "CS courses should teach theory.  It would be a complete and total waste for schools to start teaching kids how to write code.  The only way to pick up these skills is by actually going out and doing it.  You can't be lectured into writing good code.\n\nIMO, the ideal curriculum would be almost entirely open-ended projects.  Present the student with the theory and let them figure out how to apply it on their own.  They can get their practical experience that way.", "edited": 1349984083.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CS courses should teach theory.  It would be a complete and total waste for schools to start teaching kids how to write code.  The only way to pick up these skills is by actually going out and doing it.  You can&amp;#39;t be lectured into writing good code.&lt;/p&gt;\n\n&lt;p&gt;IMO, the ideal curriculum would be almost entirely open-ended projects.  Present the student with the theory and let them figure out how to apply it on their own.  They can get their practical experience that way.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l1cjd", "flair_text": null, "created": 1349986841.0, "created_utc": 1349983241.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 9, "link_id": "t3_11blht", "children": [], "author": "martext", "id": "c6l28s2", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 38, "body": "There should be a separate Software Engineering degree.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There should be a separate Software Engineering degree.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l28s2", "flair_text": null, "created": 1349989833.0, "created_utc": 1349986233.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_11blht", "children": [], "author": "5outh", "id": "c6l2tl0", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 25, "body": "I think that CS programs should be 90% theory, with coding incorporated regularly, but only to prove that the students actually know how to implement what they're learning.\n\nA mathematical background is absolutely essential. Learning about different algorithms and various ways of thinking to solve many different types of problems is what makes us good at what we do.\n\nThe knowledge is sort of useless if we can't use it, though, and that's where programming comes in. I think that we should know how different algorithms work, and we should be able to solve these with code. Coding is not difficult; the *ideas* are the hard part, and that's what we should be focused on.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think that CS programs should be 90% theory, with coding incorporated regularly, but only to prove that the students actually know how to implement what they&amp;#39;re learning.&lt;/p&gt;\n\n&lt;p&gt;A mathematical background is absolutely essential. Learning about different algorithms and various ways of thinking to solve many different types of problems is what makes us good at what we do.&lt;/p&gt;\n\n&lt;p&gt;The knowledge is sort of useless if we can&amp;#39;t use it, though, and that&amp;#39;s where programming comes in. I think that we should know how different algorithms work, and we should be able to solve these with code. Coding is not difficult; the &lt;em&gt;ideas&lt;/em&gt; are the hard part, and that&amp;#39;s what we should be focused on.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l2tl0", "flair_text": null, "created": 1349991767.0, "created_utc": 1349988167.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11blht", "children": [], "author": "antihexe", "id": "c6l6vur", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 10, "body": "You know, writing code is easy. Solving problems, understanding algorithms, understanding data structures and how to apply them. These are the important things.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You know, writing code is easy. Solving problems, understanding algorithms, understanding data structures and how to apply them. These are the important things.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l6vur", "flair_text": null, "created": 1350007492.0, "created_utc": 1350003892.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "humanlimbspool", "id": "c6l582h", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 6, "body": "Why can't we have both? I've spent hundreds of hours on programming assignments and hundreds of hours writing proofs.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why can&amp;#39;t we have both? I&amp;#39;ve spent hundreds of hours on programming assignments and hundreds of hours writing proofs.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l582h", "flair_text": null, "created": 1350000756.0, "created_utc": 1349997156.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "hires", "id": "c6l8mcu", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 5, "body": "Computer science is SCIENCE, or alternatively \"math nerds.\" Programming is a TRADE.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Computer science is SCIENCE, or alternatively &amp;quot;math nerds.&amp;quot; Programming is a TRADE.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l8mcu", "flair_text": null, "created": 1350014087.0, "created_utc": 1350010487.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11blht", "children": [], "author": "zelf0gale", "id": "c6l1v8u", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 12, "body": "At my university they had one CS program with two tracks: Graduate school bound and software engineering. A few courses in the junior and senior year were switched depending on which you were taking.\n\nI think this is the correct approach for a 4 year program. Basic understanding during the first two years and either practical or theoretical knowledge depending on the student's desire during the second two years.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At my university they had one CS program with two tracks: Graduate school bound and software engineering. A few courses in the junior and senior year were switched depending on which you were taking.&lt;/p&gt;\n\n&lt;p&gt;I think this is the correct approach for a 4 year program. Basic understanding during the first two years and either practical or theoretical knowledge depending on the student&amp;#39;s desire during the second two years.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l1v8u", "flair_text": null, "created": 1349988575.0, "created_utc": 1349984975.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11blht", "children": [], "author": "Bromskloss", "id": "c6l57xs", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 6, "body": "I view computer science as a branch of mathematics, so if it really is a computer science class it's natural that it is much theoretical. Of course, you should be a good coder *also*. Everyone should. Now then, there is no reason to ever employ a coder who is not good at computer science.\n\nWhile we're at it, we might want to say *computing science* instead, like I believe Dijkstra did, since it's \"no more about computers than astronomy is about telescopes\". It's not really science either, I suppose, but mathematics.", "edited": 1350082002.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I view computer science as a branch of mathematics, so if it really is a computer science class it&amp;#39;s natural that it is much theoretical. Of course, you should be a good coder &lt;em&gt;also&lt;/em&gt;. Everyone should. Now then, there is no reason to ever employ a coder who is not good at computer science.&lt;/p&gt;\n\n&lt;p&gt;While we&amp;#39;re at it, we might want to say &lt;em&gt;computing science&lt;/em&gt; instead, like I believe Dijkstra did, since it&amp;#39;s &amp;quot;no more about computers than astronomy is about telescopes&amp;quot;. It&amp;#39;s not really science either, I suppose, but mathematics.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l57xs", "flair_text": null, "created": 1350000741.0, "created_utc": 1349997141.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11blht", "children": [], "author": "spacelibby", "id": "c6l5mze", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 5, "body": "I'm seeing a lot of posts saying that theory is the way to go here.  Since this is /r/compsci I'm not really surprised.\n\nWhile I agree that theory is important, I think people are arguing the wrong point.  In the article they kept saying that the people coming out of the CS programs don't know how to code, and companies have to spend a lot of time training new hires out of college.  I don't know about the rest of you, but in my first job out of college I was coding on day 2, and I was doing just fine.  If you graduate from a CS program and you don't know how to code, it's a pretty crappy CS program.\n\nSo the problem isn't that students are going into CS programs instead of learning to code.  It's that students are going into crappy CS programs instead of good CS programs.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m seeing a lot of posts saying that theory is the way to go here.  Since this is &lt;a href=\"/r/compsci\"&gt;/r/compsci&lt;/a&gt; I&amp;#39;m not really surprised.&lt;/p&gt;\n\n&lt;p&gt;While I agree that theory is important, I think people are arguing the wrong point.  In the article they kept saying that the people coming out of the CS programs don&amp;#39;t know how to code, and companies have to spend a lot of time training new hires out of college.  I don&amp;#39;t know about the rest of you, but in my first job out of college I was coding on day 2, and I was doing just fine.  If you graduate from a CS program and you don&amp;#39;t know how to code, it&amp;#39;s a pretty crappy CS program.&lt;/p&gt;\n\n&lt;p&gt;So the problem isn&amp;#39;t that students are going into CS programs instead of learning to code.  It&amp;#39;s that students are going into crappy CS programs instead of good CS programs.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l5mze", "flair_text": null, "created": 1350002465.0, "created_utc": 1349998865.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11blht", "children": [], "author": "flaxeater", "id": "c6l7x0r", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 6, "body": "Programming is a craft, it must be learned by doing.  One will also be expected to do most of the learning on their own time.  ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Programming is a craft, it must be learned by doing.  One will also be expected to do most of the learning on their own time.  &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l7x0r", "flair_text": null, "created": 1350011473.0, "created_utc": 1350007873.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11blht", "children": [], "author": "khedoros", "id": "c6l2gpd", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 4, "body": "There should either be two program tracks within the degree or two degrees. Whichever path is taken, two curricula make sense.\n\nMy university didn't officially have a split like that, but there were elective courses that could take you in one direction or the other. I decided that I wanted to work in C++ when I got out of school, so I took a lot of courses that were heavy on using that language. You can't just take arbitrary classes in the major and expect to be well-suited to a particular job; you've got to tailor your degree to achieve the desired results.\n\nAs a separate point, in the higher-level courses, we were given theory lectures, then we were asked to write an implementation of the theory and write reports on what we learned. This strikes me as a good approach. If you're an upperclassman that can't take a text description of a problem and some lecture notes on the math/logic involved and write a program to do it, you don't have any business passing the course.\n\n&gt; Which ~~begs~~ raises the question\n\nThat kind of hurts my opinion of the article.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There should either be two program tracks within the degree or two degrees. Whichever path is taken, two curricula make sense.&lt;/p&gt;\n\n&lt;p&gt;My university didn&amp;#39;t officially have a split like that, but there were elective courses that could take you in one direction or the other. I decided that I wanted to work in C++ when I got out of school, so I took a lot of courses that were heavy on using that language. You can&amp;#39;t just take arbitrary classes in the major and expect to be well-suited to a particular job; you&amp;#39;ve got to tailor your degree to achieve the desired results.&lt;/p&gt;\n\n&lt;p&gt;As a separate point, in the higher-level courses, we were given theory lectures, then we were asked to write an implementation of the theory and write reports on what we learned. This strikes me as a good approach. If you&amp;#39;re an upperclassman that can&amp;#39;t take a text description of a problem and some lecture notes on the math/logic involved and write a program to do it, you don&amp;#39;t have any business passing the course.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Which &lt;del&gt;begs&lt;/del&gt; raises the question&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That kind of hurts my opinion of the article.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l2gpd", "flair_text": null, "created": 1349990564.0, "created_utc": 1349986964.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "dessiccant", "id": "c6l5ztd", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "Computer science classes shouldn't be more practical, but there should be more practical computer science classes. Learning theory is good, it's not for everybody but it's a rare opportunity to dig into material you likely won't deal with in the real world. However, it shouldn't be the only focus of a computer science program, there should be more project classes (or, more effectively, labs or workshops) based around real world software development.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Computer science classes shouldn&amp;#39;t be more practical, but there should be more practical computer science classes. Learning theory is good, it&amp;#39;s not for everybody but it&amp;#39;s a rare opportunity to dig into material you likely won&amp;#39;t deal with in the real world. However, it shouldn&amp;#39;t be the only focus of a computer science program, there should be more project classes (or, more effectively, labs or workshops) based around real world software development.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l5ztd", "flair_text": null, "created": 1350003923.0, "created_utc": 1350000323.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "JL235", "id": "c6l69j9", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "Any undergraduate worth his salt will learn to become a decent programmer (at least by graduate levels), as a side effect of their degree. That isn't to say it's all about programming, it's to say they become good at using the tools they are given.\n\nMany undergraduates are bad programmers simply because they don't program.\n\nHowever, I do feel that CS gets a little wrapped up in it's mental models, cognitive frameworks, and abstract theory used to represent anything.\n\nThere was an American engineer during the 60s, who used engineering models to represent nature, and show how feedback was present through out the natural science. If you burn down a forest, it grows back, due to feedback. This became the defacto view for many scientists at the time.\n\nResearch later, based on collecting vast amounts of minute data in the natural world, showed that to be entirely wrong. The problem is that the abstract models used were too simplistic, and too abstract; they didn't really represent the real world.\n\nI also hate the number of pieces of research I see, which has some really cool ideas, but the implementation sucks. Looks which have their place in Windows 95, and terrible user interfaces. I feel too many academics care too little about the details. Ok, that's not the point of the research, but it does have a real effect.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Any undergraduate worth his salt will learn to become a decent programmer (at least by graduate levels), as a side effect of their degree. That isn&amp;#39;t to say it&amp;#39;s all about programming, it&amp;#39;s to say they become good at using the tools they are given.&lt;/p&gt;\n\n&lt;p&gt;Many undergraduates are bad programmers simply because they don&amp;#39;t program.&lt;/p&gt;\n\n&lt;p&gt;However, I do feel that CS gets a little wrapped up in it&amp;#39;s mental models, cognitive frameworks, and abstract theory used to represent anything.&lt;/p&gt;\n\n&lt;p&gt;There was an American engineer during the 60s, who used engineering models to represent nature, and show how feedback was present through out the natural science. If you burn down a forest, it grows back, due to feedback. This became the defacto view for many scientists at the time.&lt;/p&gt;\n\n&lt;p&gt;Research later, based on collecting vast amounts of minute data in the natural world, showed that to be entirely wrong. The problem is that the abstract models used were too simplistic, and too abstract; they didn&amp;#39;t really represent the real world.&lt;/p&gt;\n\n&lt;p&gt;I also hate the number of pieces of research I see, which has some really cool ideas, but the implementation sucks. Looks which have their place in Windows 95, and terrible user interfaces. I feel too many academics care too little about the details. Ok, that&amp;#39;s not the point of the research, but it does have a real effect.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l69j9", "flair_text": null, "created": 1350005009.0, "created_utc": 1350001409.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "n1c0_ds", "id": "c6lfyhx", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "I have always hated maths because every single math teacher I've had before this semester had trouble giving us a good reason to learn it except that \"it develops problem-solving skills\".\n\nOur current teacher is a young lad with an extensive programming background, and he always shows us how what we're studying pertains to us. He even shows examples, code and real life applications of it.\n\nSo far, it's the best math class I've ever had, not because I'm good (oh hell no!), but because there is at least some sense to it.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have always hated maths because every single math teacher I&amp;#39;ve had before this semester had trouble giving us a good reason to learn it except that &amp;quot;it develops problem-solving skills&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Our current teacher is a young lad with an extensive programming background, and he always shows us how what we&amp;#39;re studying pertains to us. He even shows examples, code and real life applications of it.&lt;/p&gt;\n\n&lt;p&gt;So far, it&amp;#39;s the best math class I&amp;#39;ve ever had, not because I&amp;#39;m good (oh hell no!), but because there is at least some sense to it.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lfyhx", "flair_text": null, "created": 1350060217.0, "created_utc": 1350056617.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "[deleted]", "id": "c6l3s0i", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 1, "body": "[deleted]", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l3s0i", "flair_text": null, "created": 1349995156.0, "created_utc": 1349991556.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11blht", "children": [], "author": "mcandre", "id": "c6l54cy", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "Framing your task in terms of math helps to understand the issue more clearly, and the resulting code is much better and easier to maintain. You don't need Calculus so much, but discrete math, propositional logic, and set theory are incredibly useful, bringing your computer tools closer to the problem in question.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Framing your task in terms of math helps to understand the issue more clearly, and the resulting code is much better and easier to maintain. You don&amp;#39;t need Calculus so much, but discrete math, propositional logic, and set theory are incredibly useful, bringing your computer tools closer to the problem in question.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l54cy", "flair_text": null, "created": 1350000345.0, "created_utc": 1349996745.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11blht", "children": [], "author": "jerkimball", "id": "c6lvcch", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 1, "body": "I studied computer engineering for four years (basically take computer science and electrical engineering and chop off the electives) before dropping out, much to the chagrin of my family...hey, it was the height of the dotcom bubble and the money was just too good to pass up.\n\nDo I regret dropping out? Yeah, to a degree; it would have been nice to have to piece of paper, and I still kick around the idea of seeing if I could complete my requirements.\n\nDisregarding the electrical engineering part and focusing on the computer science, did I learn anything? Specifically, did I learn anything I couldn't/wouldn't have picked up on my own? That's a harder question to answer.\n\nI believe the core CS classes shaped and honed the algorithmic skills I had already developed (I started programming at a *ridiculously* young age, a privilege not available to most), but I'm not convinced it's anything I needed classes to acquire; to be sure, if it wasn't for my extracurricular coding habits, even the course materials would probably not have cemented to nearly the same degree.\n\nWhat my school *did* provide, however, was the jumping off point for my career, in the form of a coop program (paid internship) - it was there I learned the practical application, and ultimately it was because of that experience that I dropped out (the contacts I made during my coop semesters became my first set of clients).\n\nThe electrical engineering courses, jumping back a bit, were another story: that knowledge would have been exponentially more difficult to acquire independently. Ditto with some of the \"exotic\" cs classes: artificial intelligence, operating systems, etc.\n\nOn a more depressing note, at this stage in my career I do a lot of interviewing of new candidates, many fresh out of college, and there is an inexcusable lack of any practical knowledge as a whole; here and there you'll find a diamond in the rough, most often someone who again has a lot of extracurricular projects going on. Data structures and algorithmic theory are essential, but a software engineer they do not make. I agree with other comments on this thread that exposure to a number of different languages is key: even if they become (or are initially) \"dead languages\", the mental processes required to translate thought into code are eminently transferable: knowing one language makes it that much easier to learn another.\n\nMy own personal verdict? I'm glad I went to college.  I was exposed to the theory governing the practice I was already familiar with, which did help guide me down the path of \"doing it the right way\". \n\nThat said, I'm slightly inclined to believe that \"computer science\", as a major, should be abolished; Increasingly, computer science is a field applicable to *every other field* - it should be taught as a minor applied to any other major (like electrical engineering, for example, or math, physics, hell, even literature). This would serve not only the practicality aspect, but also train the neural connectivity to think of any subject matter in terms of computation and problem decomposition: useful skills no matter what you want to be when you grow up.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I studied computer engineering for four years (basically take computer science and electrical engineering and chop off the electives) before dropping out, much to the chagrin of my family...hey, it was the height of the dotcom bubble and the money was just too good to pass up.&lt;/p&gt;\n\n&lt;p&gt;Do I regret dropping out? Yeah, to a degree; it would have been nice to have to piece of paper, and I still kick around the idea of seeing if I could complete my requirements.&lt;/p&gt;\n\n&lt;p&gt;Disregarding the electrical engineering part and focusing on the computer science, did I learn anything? Specifically, did I learn anything I couldn&amp;#39;t/wouldn&amp;#39;t have picked up on my own? That&amp;#39;s a harder question to answer.&lt;/p&gt;\n\n&lt;p&gt;I believe the core CS classes shaped and honed the algorithmic skills I had already developed (I started programming at a &lt;em&gt;ridiculously&lt;/em&gt; young age, a privilege not available to most), but I&amp;#39;m not convinced it&amp;#39;s anything I needed classes to acquire; to be sure, if it wasn&amp;#39;t for my extracurricular coding habits, even the course materials would probably not have cemented to nearly the same degree.&lt;/p&gt;\n\n&lt;p&gt;What my school &lt;em&gt;did&lt;/em&gt; provide, however, was the jumping off point for my career, in the form of a coop program (paid internship) - it was there I learned the practical application, and ultimately it was because of that experience that I dropped out (the contacts I made during my coop semesters became my first set of clients).&lt;/p&gt;\n\n&lt;p&gt;The electrical engineering courses, jumping back a bit, were another story: that knowledge would have been exponentially more difficult to acquire independently. Ditto with some of the &amp;quot;exotic&amp;quot; cs classes: artificial intelligence, operating systems, etc.&lt;/p&gt;\n\n&lt;p&gt;On a more depressing note, at this stage in my career I do a lot of interviewing of new candidates, many fresh out of college, and there is an inexcusable lack of any practical knowledge as a whole; here and there you&amp;#39;ll find a diamond in the rough, most often someone who again has a lot of extracurricular projects going on. Data structures and algorithmic theory are essential, but a software engineer they do not make. I agree with other comments on this thread that exposure to a number of different languages is key: even if they become (or are initially) &amp;quot;dead languages&amp;quot;, the mental processes required to translate thought into code are eminently transferable: knowing one language makes it that much easier to learn another.&lt;/p&gt;\n\n&lt;p&gt;My own personal verdict? I&amp;#39;m glad I went to college.  I was exposed to the theory governing the practice I was already familiar with, which did help guide me down the path of &amp;quot;doing it the right way&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;That said, I&amp;#39;m slightly inclined to believe that &amp;quot;computer science&amp;quot;, as a major, should be abolished; Increasingly, computer science is a field applicable to &lt;em&gt;every other field&lt;/em&gt; - it should be taught as a minor applied to any other major (like electrical engineering, for example, or math, physics, hell, even literature). This would serve not only the practicality aspect, but also train the neural connectivity to think of any subject matter in terms of computation and problem decomposition: useful skills no matter what you want to be when you grow up.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lvcch", "flair_text": null, "created": 1350145347.0, "created_utc": 1350141747.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11blht", "children": [], "author": "MPIS", "id": "c6nc5nh", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "[the best, for reference](http://www.csd.cs.cmu.edu/education/bscs/currreq_12.html).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.csd.cs.cmu.edu/education/bscs/currreq_12.html\"&gt;the best, for reference&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nc5nh", "flair_text": null, "created": 1350411018.0, "created_utc": 1350407418.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11blht", "children": [], "author": "Creating_Logic", "id": "c6lb1we", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 3, "body": "I am really hesitant to post this, because there is inevitably going to be someone who believes the whole concept that I am about to lay out as silly.  There is also plenty of room for clarification.\n\nI am currently trying to get a degree in CS, and I feel as though I come at it from a different perspective compared to many CS majors.\n\nI have been messing with computer programming for many years, and while I am not an amazing coder, I am fairly competent.  My main problem is that I never had a strong math background, which is the main failure point in my studies.  It is not that I do not understand mathematical concepts, because computers are mathematical in nature.\n\nRather, I have a hard time with the language of math.  I know this because I have no problem with logic tables, and have a firm grasp of binary, octal and hexadecimal numbers.  Also, I have never had too much difficulty picking up most of the programming languages that I have learned so far.\n\nSo far, I have reached the level of calculus, and it has been a struggle the whole way through.  To me, math is like speaking Romaji (Japanese), where something like C\\C++ is like speaking my native English.  I understand many of the concepts, but find it difficult to translate; to me it seems they are using the same symbols, but their structures are not the same.\n\nI don't exactly know where I am going with this, I just want to point out that you can be a good programmer and not necessarily seem good at math (even if you are, albeit in a different way).  For example, I have long understood the idea of oh notation when it comes to how I choose to write code, in fact it is almost natural to me.  But I cannot for the life of me seem to translate that understanding into actual mathematical terms without a huge struggle.\n\nI think that is long enough, if someone wants to ask for me to elaborate on something, please point it out.\n\nTL;DR: The language of mathematics =/= computer programming languages.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I am really hesitant to post this, because there is inevitably going to be someone who believes the whole concept that I am about to lay out as silly.  There is also plenty of room for clarification.&lt;/p&gt;\n\n&lt;p&gt;I am currently trying to get a degree in CS, and I feel as though I come at it from a different perspective compared to many CS majors.&lt;/p&gt;\n\n&lt;p&gt;I have been messing with computer programming for many years, and while I am not an amazing coder, I am fairly competent.  My main problem is that I never had a strong math background, which is the main failure point in my studies.  It is not that I do not understand mathematical concepts, because computers are mathematical in nature.&lt;/p&gt;\n\n&lt;p&gt;Rather, I have a hard time with the language of math.  I know this because I have no problem with logic tables, and have a firm grasp of binary, octal and hexadecimal numbers.  Also, I have never had too much difficulty picking up most of the programming languages that I have learned so far.&lt;/p&gt;\n\n&lt;p&gt;So far, I have reached the level of calculus, and it has been a struggle the whole way through.  To me, math is like speaking Romaji (Japanese), where something like C\\C++ is like speaking my native English.  I understand many of the concepts, but find it difficult to translate; to me it seems they are using the same symbols, but their structures are not the same.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t exactly know where I am going with this, I just want to point out that you can be a good programmer and not necessarily seem good at math (even if you are, albeit in a different way).  For example, I have long understood the idea of oh notation when it comes to how I choose to write code, in fact it is almost natural to me.  But I cannot for the life of me seem to translate that understanding into actual mathematical terms without a huge struggle.&lt;/p&gt;\n\n&lt;p&gt;I think that is long enough, if someone wants to ask for me to elaborate on something, please point it out.&lt;/p&gt;\n\n&lt;p&gt;TL;DR: The language of mathematics =/= computer programming languages.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lb1we", "flair_text": null, "created": 1350024351.0, "created_utc": 1350020751.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 11, "link_id": "t3_11blht", "children": [], "author": "skatch", "id": "c6l1gx2", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 5, "body": "I'm a few months away from my BS in CS and the big saving grace at my school is lab work. We have a small in house network for Ciscio classes, set up virtual machines for Windows Server and play with different distros in Linux", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a few months away from my BS in CS and the big saving grace at my school is lab work. We have a small in house network for Ciscio classes, set up virtual machines for Windows Server and play with different distros in Linux&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l1gx2", "flair_text": null, "created": 1349987246.0, "created_utc": 1349983646.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11blht", "children": [], "author": "omfgcow", "id": "c6l6gab", "parent_id": "t3_11blht", "score": 0, "approved_by": null, "upvotes": 2, "body": "From the article, \u201cIt\u2019s widely understood that computer science doesn\u2019t necessarily make you a good programmer,\u201d Kreger says. \u201cIt gives you theoretical knowledge, but because there are so many topics, you skim through everything quickly, and a lot of people come out not being very good programmers.\u201d  This quote is arguable the most important part of the article.  I've not yet been to college or a CS program, but if it is anything like high school, I imagine that a lot of topics either get forgotten over time, or not learned well enough.  A good program should focus on both the theories and soft skills, and some of the practical side of things to make sure students are picking up on concepts and know how to apply them.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;From the article, \u201cIt\u2019s widely understood that computer science doesn\u2019t necessarily make you a good programmer,\u201d Kreger says. \u201cIt gives you theoretical knowledge, but because there are so many topics, you skim through everything quickly, and a lot of people come out not being very good programmers.\u201d  This quote is arguable the most important part of the article.  I&amp;#39;ve not yet been to college or a CS program, but if it is anything like high school, I imagine that a lot of topics either get forgotten over time, or not learned well enough.  A good program should focus on both the theories and soft skills, and some of the practical side of things to make sure students are picking up on concepts and know how to apply them.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l6gab", "flair_text": null, "created": 1350005751.0, "created_utc": 1350002151.0, "num_reports": null}], "score": 126, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 171, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/11blht/math_nerds_vs_code_monkeys_should_computer/", "has_more_comments": false, "name": "t3_11blht", "created": 1349983929.0, "url": "http://blog.smartbear.com/software-quality/bid/230121/math-nerds-vs-code-monkeys-should-computer-science-classes-be-more-practical", "author_flair_text": null, "author": "wordsmithie", "created_utc": 1349980329.0, "link_flair_text": null, "media": null, "num_reports": null}, "343": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 3, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have been browsing through the ACM Digital Library and no luck.&lt;/p&gt;\n\n&lt;p&gt;I am looking for any journal articles on preventing and fighting against trolls online.  I was wondering if you knew of any articles that study social media and fighting trolls such as on Reddit and voting.&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have been browsing through the ACM Digital Library and no luck.\n\nI am looking for any journal articles on preventing and fighting against trolls online.  I was wondering if you knew of any articles that study social media and fighting trolls such as on Reddit and voting.\n\nThanks", "saved": false, "id": "11cd0u", "clicked": false, "title": "Know of any HCI articles on social media / Reddit and fighting trolls?", "num_comments": 6, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11cd0u", "children": [], "author": "andrewguenther", "id": "c6loj7q", "parent_id": "t3_11cd0u", "score": 0, "approved_by": null, "upvotes": 2, "body": "It isn't HCI, but I know that there has been NLP research on detecting trolls\n\n[Here is a good paper](http://sdow.semanticweb.org/2010/pub/sdow2010_paper_1.pdf)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It isn&amp;#39;t HCI, but I know that there has been NLP research on detecting trolls&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://sdow.semanticweb.org/2010/pub/sdow2010_paper_1.pdf\"&gt;Here is a good paper&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6loj7q", "flair_text": null, "created": 1350094711.0, "created_utc": 1350091111.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11cd0u", "children": [], "author": "ahazred8vt", "id": "c6miecf", "parent_id": "t3_11cd0u", "score": 0, "approved_by": null, "upvotes": 1, "body": "Human-computer interaction? There are some academic works, but nothing practical.\n\nhttp://scholar.google.com/scholar?q=hci+%22trolls%22+-patent\nhttp://www.google.com/search?q=hci+nlp+%22trolls%22+-patent", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Human-computer interaction? There are some academic works, but nothing practical.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://scholar.google.com/scholar?q=hci+%22trolls%22+-patent\"&gt;http://scholar.google.com/scholar?q=hci+%22trolls%22+-patent&lt;/a&gt;\n&lt;a href=\"http://www.google.com/search?q=hci+nlp+%22trolls%22+-patent\"&gt;http://www.google.com/search?q=hci+nlp+%22trolls%22+-patent&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6miecf", "flair_text": null, "created": 1350263860.0, "created_utc": 1350260260.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11cd0u", "children": [], "author": "robthablob", "id": "c6ldsby", "parent_id": "t3_11cd0u", "score": 0, "approved_by": null, "upvotes": 3, "body": "I believe that trolls turn to stone when exposed to sunlight.\n\n(Sorry couldn't resist)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe that trolls turn to stone when exposed to sunlight.&lt;/p&gt;\n\n&lt;p&gt;(Sorry couldn&amp;#39;t resist)&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ldsby", "flair_text": null, "created": 1350049501.0, "created_utc": 1350045901.0, "num_reports": null}], "score": 3, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 6, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11cd0u/know_of_any_hci_articles_on_social_media_reddit/", "has_more_comments": false, "name": "t3_11cd0u", "created": 1350009599.0, "url": "http://www.reddit.com/r/compsci/comments/11cd0u/know_of_any_hci_articles_on_social_media_reddit/", "author_flair_text": null, "author": "LOLcarbsAMIRITE", "created_utc": 1350005999.0, "link_flair_text": null, "media": null, "num_reports": null}, "344": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 5, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth\"&gt;Silverman&amp;#39;s rule of thumb&lt;/a&gt; is only valid for a Gaussian kernel.  This is unfortunate, because the Gaussian kernel isn&amp;#39;t really the fastest kernel to calculate (compared to a triangular or quartic kernel, for instance).  &lt;/p&gt;\n\n&lt;p&gt;I realize that there are other ways to estimate bandwidth for a Kernel Density Estimator, but:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The rule of thumb is easy and convenient.&lt;/li&gt;\n&lt;li&gt;KDE isn&amp;#39;t really a very exacting technique to begin with.&lt;/li&gt;\n&lt;li&gt;KDE with large data sets can spend most of its computational time in the kernel algorithm, so there&amp;#39;s sometimes good reason to prefer a simple kernel.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So what happens when you estimate bandwidth with Silverman&amp;#39;s rule of thumb, using a different but not-unlike-Gaussian kernel?  Do you just get a somewhat poorer than optimal estimation, or is it possible for the estimation to come out terribly?  &lt;/p&gt;\n\n&lt;p&gt;Better yet, does anyone know of a pathological case where substitution of a Gaussian kernel for something else &amp;quot;Gaussian like&amp;quot; (i.e. a kernel that someone might actually use and having the approximate shape of a Gaussian as opposed to a kernel consisting of uniform random noise or a kernel with an offset peak) results in a bad estimation?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[Silverman's rule of thumb](http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth) is only valid for a Gaussian kernel.  This is unfortunate, because the Gaussian kernel isn't really the fastest kernel to calculate (compared to a triangular or quartic kernel, for instance).  \n\n\nI realize that there are other ways to estimate bandwidth for a Kernel Density Estimator, but:\n\n\n* The rule of thumb is easy and convenient.\n* KDE isn't really a very exacting technique to begin with.\n* KDE with large data sets can spend most of its computational time in the kernel algorithm, so there's sometimes good reason to prefer a simple kernel.\n\n\nSo what happens when you estimate bandwidth with Silverman's rule of thumb, using a different but not-unlike-Gaussian kernel?  Do you just get a somewhat poorer than optimal estimation, or is it possible for the estimation to come out terribly?  \n\nBetter yet, does anyone know of a pathological case where substitution of a Gaussian kernel for something else \"Gaussian like\" (i.e. a kernel that someone might actually use and having the approximate shape of a Gaussian as opposed to a kernel consisting of uniform random noise or a kernel with an offset peak) results in a bad estimation?\n\n\n\n", "saved": false, "id": "11bkq2", "clicked": false, "title": "What is the practical ramification of using Silverman's rule of thumb with a non-Gaussian kernel?", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11bkq2", "children": [], "author": "0B0A1113001A", "id": "c6ldvqi", "parent_id": "t3_11bkq2", "score": 0, "approved_by": null, "upvotes": 5, "body": "You can easily recalculate this rule for other kernel.\n\n    h = ( R(K) / ( m2(K)^2 * R(f'') * n ) )^0.2\n\nSince the normality assumption of the target density f dosen't change you have\n\n    h = ( R(K) * 8 * sqrt(pi) * sigma^5 / ( m2(K)^2 * 3 * n ) )^0.2\n\nYou just have to replace R(K) and m2(K) by the values for your kernel.\n\nHere are the values for a few simple kernel.\n\n    K              m2(K)   R(K)\n\n    Normal         1       1/(2*sqrt(pi))\n\n    Epanechnikov   1/5     3/5\n\n    Biweight       1/7     5/7\n\n    Triweight      1/9     350/429\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You can easily recalculate this rule for other kernel.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;h = ( R(K) / ( m2(K)^2 * R(f&amp;#39;&amp;#39;) * n ) )^0.2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the normality assumption of the target density f dosen&amp;#39;t change you have&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;h = ( R(K) * 8 * sqrt(pi) * sigma^5 / ( m2(K)^2 * 3 * n ) )^0.2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You just have to replace R(K) and m2(K) by the values for your kernel.&lt;/p&gt;\n\n&lt;p&gt;Here are the values for a few simple kernel.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;K              m2(K)   R(K)\n\nNormal         1       1/(2*sqrt(pi))\n\nEpanechnikov   1/5     3/5\n\nBiweight       1/7     5/7\n\nTriweight      1/9     350/429\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ldvqi", "flair_text": null, "created": 1350050180.0, "created_utc": 1350046580.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11bkq2", "children": [], "author": "more_exercise", "id": "c6l4dbo", "parent_id": "t3_11bkq2", "score": 0, "approved_by": null, "upvotes": 2, "body": "(Caveat: I took statistics in HS and college.  My main takeaway from those classes is that I know enough to know that I know nothing.  Consider this post bullshit unless convinced otherwise)\n\nReading wikipedia tells me that Silverman's rule is the *optimal* choice for h on Gaussian basis functions.   So it would stand to reason that it wouldn't be too far off for \"Gaussian-like\" basis functions.  However, I can pretty much guarantee that it will be *non-optimal*.\n\nIf you assume Gaussian behavior about your inputs, I expect you will probably tend to get an answer that looks a lot like a Gaussian kernel. If you were to recreate Silverman's rule for a triangle distribution, I would expect to see something a bit more spikey.\n\nBut if it's a smooth kernel that looks a lot like gaussian, I'd go for it.\n\nThere's a nice comparator online that shows how the same data will look under different kernel estimators.  You should check it out:\n\nhttp://www.wessa.net/rwasp_density.wasp\n\n[Here is my sample run](http://www.wessa.net/viewprint.wasp?i=3) that shows the spikiness between the different kernel estimators.", "edited": 1349994012.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(Caveat: I took statistics in HS and college.  My main takeaway from those classes is that I know enough to know that I know nothing.  Consider this post bullshit unless convinced otherwise)&lt;/p&gt;\n\n&lt;p&gt;Reading wikipedia tells me that Silverman&amp;#39;s rule is the &lt;em&gt;optimal&lt;/em&gt; choice for h on Gaussian basis functions.   So it would stand to reason that it wouldn&amp;#39;t be too far off for &amp;quot;Gaussian-like&amp;quot; basis functions.  However, I can pretty much guarantee that it will be &lt;em&gt;non-optimal&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you assume Gaussian behavior about your inputs, I expect you will probably tend to get an answer that looks a lot like a Gaussian kernel. If you were to recreate Silverman&amp;#39;s rule for a triangle distribution, I would expect to see something a bit more spikey.&lt;/p&gt;\n\n&lt;p&gt;But if it&amp;#39;s a smooth kernel that looks a lot like gaussian, I&amp;#39;d go for it.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s a nice comparator online that shows how the same data will look under different kernel estimators.  You should check it out:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.wessa.net/rwasp_density.wasp\"&gt;http://www.wessa.net/rwasp_density.wasp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.wessa.net/viewprint.wasp?i=3\"&gt;Here is my sample run&lt;/a&gt; that shows the spikiness between the different kernel estimators.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l4dbo", "flair_text": null, "created": 1349997388.0, "created_utc": 1349993788.0, "num_reports": null}], "score": 7, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 12, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11bkq2/what_is_the_practical_ramification_of_using/", "has_more_comments": false, "name": "t3_11bkq2", "created": 1349983253.0, "url": "http://www.reddit.com/r/compsci/comments/11bkq2/what_is_the_practical_ramification_of_using/", "author_flair_text": null, "author": "eubarch", "created_utc": 1349979653.0, "link_flair_text": null, "media": null, "num_reports": null}, "345": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 17, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I went to school for maths, and have since been focussing on programming and hope to pursue my career in this area.&lt;/p&gt;\n\n&lt;p&gt;My math training is a huge advantage when it comes to internalizing algorithms and abstract ideas like classes and boolean algebra and so on (not to mention exciting new concepts like hypergraph databases: just seeing those two words together gives me a massive mind-boner).&lt;/p&gt;\n\n&lt;p&gt;But that&amp;#39;s all abstract stuff. &lt;strong&gt;I&amp;#39;ve no idea what my computer -- that physical, tangible hunk of metal that sits on my desk -- is actually doing.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Pretty much everything that happens up until we have an assembly language is magic to me. I&amp;#39;m a hardware dunce. &lt;/p&gt;\n\n&lt;p&gt;How can a physical object tell itself to manipulate &amp;quot;data&amp;quot;? How does me pressing a bunch of plastic buttons right now make that big glowing box in front of me assume patterns that resemble letters and words? Where and how are those patterns stored and transmitted in the physical world? &lt;em&gt;Is the internet actually a series of tubes??&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;If anyone can recommend a few books that explain how a computer turns electrically charged matter into streaming videos of naked ladies and apps that make fart noises, I&amp;#39;d be eternally grateful. &lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t want to stray from my studies of programming too much, I&amp;#39;m not looking for a career in electrical engineering; but I&amp;#39;d like to have some general understanding of how this  magic hunk of metal that I work with all day, every day, actually operates. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I went to school for maths, and have since been focussing on programming and hope to pursue my career in this area.\n\nMy math training is a huge advantage when it comes to internalizing algorithms and abstract ideas like classes and boolean algebra and so on (not to mention exciting new concepts like hypergraph databases: just seeing those two words together gives me a massive mind-boner).\n\nBut that's all abstract stuff. **I've no idea what my computer -- that physical, tangible hunk of metal that sits on my desk -- is actually doing.**\n\nPretty much everything that happens up until we have an assembly language is magic to me. I'm a hardware dunce. \n\nHow can a physical object tell itself to manipulate \"data\"? How does me pressing a bunch of plastic buttons right now make that big glowing box in front of me assume patterns that resemble letters and words? Where and how are those patterns stored and transmitted in the physical world? *Is the internet actually a series of tubes??* \n\nIf anyone can recommend a few books that explain how a computer turns electrically charged matter into streaming videos of naked ladies and apps that make fart noises, I'd be eternally grateful. \n\nI don't want to stray from my studies of programming too much, I'm not looking for a career in electrical engineering; but I'd like to have some general understanding of how this  magic hunk of metal that I work with all day, every day, actually operates. ", "saved": false, "id": "11a0cq", "clicked": false, "title": "Computers from the ground up, from transistors to assembly code. Any good books to learn how a computer actually, physically operates (for someone with a background in programming and math)", "num_comments": 53, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 6, "link_id": "t3_11a0cq", "children": [], "author": "Quintic", "id": "c6ksv55", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 35, "body": "I really like the book [The Elements of Computing Systems](http://www.nand2tetris.org/book.php). Most of the chapters are free on the author's website, http://www1.idc.ac.il/tecs/plan.html\n\nThe book starts out talking about logic circuit and how to build the logic for a CPU. Then assembly language, programming language, and a basic operating system.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I really like the book &lt;a href=\"http://www.nand2tetris.org/book.php\"&gt;The Elements of Computing Systems&lt;/a&gt;. Most of the chapters are free on the author&amp;#39;s website, &lt;a href=\"http://www1.idc.ac.il/tecs/plan.html\"&gt;http://www1.idc.ac.il/tecs/plan.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The book starts out talking about logic circuit and how to build the logic for a CPU. Then assembly language, programming language, and a basic operating system.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ksv55", "flair_text": null, "created": 1349940571.0, "created_utc": 1349936971.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 17, "link_id": "t3_11a0cq", "children": [], "author": "[deleted]", "id": "c6kn6k5", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 76, "body": "[Code by Charles Petzold.](http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&amp;qid=1349913644&amp;sr=8-1&amp;keywords=code+charles+petzold)\n\nI wish there was a better way for me to convey this book is *exactly* what you are looking for. After I read it I felt so empowered knowing that I finally understood how computers worked.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&amp;amp;qid=1349913644&amp;amp;sr=8-1&amp;amp;keywords=code+charles+petzold\"&gt;Code by Charles Petzold.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I wish there was a better way for me to convey this book is &lt;em&gt;exactly&lt;/em&gt; what you are looking for. After I read it I felt so empowered knowing that I finally understood how computers worked.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kn6k5", "flair_text": null, "created": 1349917323.0, "created_utc": 1349913723.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 8, "link_id": "t3_11a0cq", "children": [], "author": "tspike", "id": "c6kn4ur", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 25, "body": "The [Hennessy &amp; Patterson computer architecture book](http://www.amazon.com/Computer-Architecture-Quantitative-Approach-Edition/product-reviews/0123704901/ref=dp_top_cm_cr_acr_txt?ie=UTF8&amp;showViewpoints=1) was the standard when I was going to school for this kind of thing. If your local college offers a digital logic course, I'd recommend taking that as well.\n\nThe internet question would be better addressed by a book about network systems.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The &lt;a href=\"http://www.amazon.com/Computer-Architecture-Quantitative-Approach-Edition/product-reviews/0123704901/ref=dp_top_cm_cr_acr_txt?ie=UTF8&amp;amp;showViewpoints=1\"&gt;Hennessy &amp;amp; Patterson computer architecture book&lt;/a&gt; was the standard when I was going to school for this kind of thing. If your local college offers a digital logic course, I&amp;#39;d recommend taking that as well.&lt;/p&gt;\n\n&lt;p&gt;The internet question would be better addressed by a book about network systems.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kn4ur", "flair_text": null, "created": 1349917150.0, "created_utc": 1349913550.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_11a0cq", "children": [], "author": "trestechno", "id": "c6kmoda", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 18, "body": "There's an open course called From [Nand2Tetris](http://www.nand2tetris.org/) that might interest you. It was posted over in /r/programming a little while back, I think. Comments there suggested it's quality, but of course YMMV.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s an open course called From &lt;a href=\"http://www.nand2tetris.org/\"&gt;Nand2Tetris&lt;/a&gt; that might interest you. It was posted over in &lt;a href=\"/r/programming\"&gt;/r/programming&lt;/a&gt; a little while back, I think. Comments there suggested it&amp;#39;s quality, but of course YMMV.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kmoda", "flair_text": null, "created": 1349915487.0, "created_utc": 1349911887.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11a0cq", "children": [], "author": "thebeanz", "id": "c6ksumf", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 8, "body": "Elements of computing.\n\nEnjoy!!\n\nhttp://www1.idc.ac.il/tecs/plan.html\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elements of computing.&lt;/p&gt;\n\n&lt;p&gt;Enjoy!!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www1.idc.ac.il/tecs/plan.html\"&gt;http://www1.idc.ac.il/tecs/plan.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ksumf", "flair_text": null, "created": 1349940478.0, "created_utc": 1349936878.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "ProgramMax", "id": "c6kn7ks", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 5, "body": "I *highly* recommend From The Metal Up by Matthew Blagden. http://www.owlisland.com/books\n\nIt starts out talking about just a transistor. Then how to combine a few transistors to make adders and memory. Up through creating a small OS and an application for it.\n\nAlong the way it does not get you bogged down with technical details. Just enough to be interesting and feed your curiosity. Then it moves on to the next section.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I &lt;em&gt;highly&lt;/em&gt; recommend From The Metal Up by Matthew Blagden. &lt;a href=\"http://www.owlisland.com/books\"&gt;http://www.owlisland.com/books&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It starts out talking about just a transistor. Then how to combine a few transistors to make adders and memory. Up through creating a small OS and an application for it.&lt;/p&gt;\n\n&lt;p&gt;Along the way it does not get you bogged down with technical details. Just enough to be interesting and feed your curiosity. Then it moves on to the next section.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kn7ks", "flair_text": null, "created": 1349917427.0, "created_utc": 1349913827.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11a0cq", "children": [], "author": "borramakot", "id": "c6ko2ov", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 5, "body": "Yale Patt has a great freshman level textbook- extremely readable, I went through it in a week, and decided to transfer to his school.\nhttp://www.amazon.com/Introduction-Computing-Systems-Gates-Beyond/dp/0072994657\n\nIf you want to go in depth into how computers work- every part, and a lot of the networking protocols, I highly recommend \"Upgrading and Repairing PCs\", by Scott Mueller. It's a long book, but absolutely worth every page. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yale Patt has a great freshman level textbook- extremely readable, I went through it in a week, and decided to transfer to his school.\n&lt;a href=\"http://www.amazon.com/Introduction-Computing-Systems-Gates-Beyond/dp/0072994657\"&gt;http://www.amazon.com/Introduction-Computing-Systems-Gates-Beyond/dp/0072994657&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you want to go in depth into how computers work- every part, and a lot of the networking protocols, I highly recommend &amp;quot;Upgrading and Repairing PCs&amp;quot;, by Scott Mueller. It&amp;#39;s a long book, but absolutely worth every page. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ko2ov", "flair_text": null, "created": 1349920687.0, "created_utc": 1349917087.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "CountVonTroll", "id": "c6kz1ml", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 4, "body": "Forget all this and read the first chapter of [The Small Computer Handbook](http://highgate.comm.sfu.ca/pdp8/small-computer-handbook/small-computer-handbook-1966-sec1-2.zip) from 1966 first. It's the manual for the [PDP-8](http://en.wikipedia.org/wiki/PDP-8) and goes from \"what is a computer?\" over the binary, octal and hexadecimal system to machine language within an amazingly short number of pages during which it explains what you want to know, i.e., how the machine operates, at the level of the accumulator and so on.  \nIt describes an ancestor of the x86 from back when it was really very basic, still built out of components you could see with the naked eye, without assuming *any* prior knowledge of computers, and with enough detail to actually build one. Amazingly, it's also fun to read.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Forget all this and read the first chapter of &lt;a href=\"http://highgate.comm.sfu.ca/pdp8/small-computer-handbook/small-computer-handbook-1966-sec1-2.zip\"&gt;The Small Computer Handbook&lt;/a&gt; from 1966 first. It&amp;#39;s the manual for the &lt;a href=\"http://en.wikipedia.org/wiki/PDP-8\"&gt;PDP-8&lt;/a&gt; and goes from &amp;quot;what is a computer?&amp;quot; over the binary, octal and hexadecimal system to machine language within an amazingly short number of pages during which it explains what you want to know, i.e., how the machine operates, at the level of the accumulator and so on.&lt;br/&gt;\nIt describes an ancestor of the x86 from back when it was really very basic, still built out of components you could see with the naked eye, without assuming &lt;em&gt;any&lt;/em&gt; prior knowledge of computers, and with enough detail to actually build one. Amazingly, it&amp;#39;s also fun to read.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kz1ml", "flair_text": null, "created": 1349979061.0, "created_utc": 1349975461.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11a0cq", "children": [], "author": "ldpreload", "id": "c6ksbaq", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 3, "body": "Take a look at the course material for MIT's [computer architecture class (6.004)](http://6004.mit.edu). (There is a textbook, I think, but we never used it when I took it.) All the material is online, and it covers going from a transistor and what it does to ending up with a working though primitive OS.\n\nThe best part of this class is the simulators: there's a simple circuit simulator in Java that you can build up logic gates in, and digital circuitry from gates. It's very hands-on.\n\nThe class is at the introductory level, so it doesn't assume a ton of knowledge; if you have a reasonable background in logic and some programming, it should be accessible to you.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Take a look at the course material for MIT&amp;#39;s &lt;a href=\"http://6004.mit.edu\"&gt;computer architecture class (6.004)&lt;/a&gt;. (There is a textbook, I think, but we never used it when I took it.) All the material is online, and it covers going from a transistor and what it does to ending up with a working though primitive OS.&lt;/p&gt;\n\n&lt;p&gt;The best part of this class is the simulators: there&amp;#39;s a simple circuit simulator in Java that you can build up logic gates in, and digital circuitry from gates. It&amp;#39;s very hands-on.&lt;/p&gt;\n\n&lt;p&gt;The class is at the introductory level, so it doesn&amp;#39;t assume a ton of knowledge; if you have a reasonable background in logic and some programming, it should be accessible to you.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ksbaq", "flair_text": null, "created": 1349937355.0, "created_utc": 1349933755.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11a0cq", "children": [], "author": "jsolson", "id": "c6ksrkk", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 4, "body": "I was going to share the page for my alma mater's Intro to ECE class, which actually covers this material fairly well, but I can't in good conscience do that. The course is ECE2030 and the school is Georgia Tech. If you take the trouble to look it up on your own you'll understand why (and my god, they did it even to the readings, not just the website).\n\nThen I was going to refer you to CS2110, which covers much of the same material. It seems that due to the adoption of T-square, a limited access CMS, there is no longer a public website for this course.\n\nGeorgia Tech, you have failed me.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was going to share the page for my alma mater&amp;#39;s Intro to ECE class, which actually covers this material fairly well, but I can&amp;#39;t in good conscience do that. The course is ECE2030 and the school is Georgia Tech. If you take the trouble to look it up on your own you&amp;#39;ll understand why (and my god, they did it even to the readings, not just the website).&lt;/p&gt;\n\n&lt;p&gt;Then I was going to refer you to CS2110, which covers much of the same material. It seems that due to the adoption of T-square, a limited access CMS, there is no longer a public website for this course.&lt;/p&gt;\n\n&lt;p&gt;Georgia Tech, you have failed me.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ksrkk", "flair_text": null, "created": 1349939939.0, "created_utc": 1349936339.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11a0cq", "children": [], "author": "pencildiet", "id": "c6kmuky", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 2, "body": "With your math background check out the MiT OCW course on Electromagnetics.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;With your math background check out the MiT OCW course on Electromagnetics.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kmuky", "flair_text": null, "created": 1349916114.0, "created_utc": 1349912514.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "fuzzynyanko", "id": "c6kpe1f", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "I took a class that had a book which had a circuit diagram of a CPU. It, at first, was theoretical until a group of students ended up trying to make it. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I took a class that had a book which had a circuit diagram of a CPU. It, at first, was theoretical until a group of students ended up trying to make it. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kpe1f", "flair_text": null, "created": 1349925425.0, "created_utc": 1349921825.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "Snootwaller", "id": "c6krybx", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 2, "body": "[Structured Computer Organization](http://www.amazon.com/Structured-Computer-Organization-5th-Edition/dp/0131485210) is what I cut my teeth on.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.amazon.com/Structured-Computer-Organization-5th-Edition/dp/0131485210\"&gt;Structured Computer Organization&lt;/a&gt; is what I cut my teeth on.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6krybx", "flair_text": null, "created": 1349935584.0, "created_utc": 1349931984.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "ILikeLeptons", "id": "c6kvcy9", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "[the art of digital design](http://www.amazon.com/The-Art-Digital-Design-Introduction/dp/0130467804) is a very good book for this in my opinion. it begins with an introduction to digital logic, then goes on to build and analyse all the subsystems of a Digital PDP-8.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.amazon.com/The-Art-Digital-Design-Introduction/dp/0130467804\"&gt;the art of digital design&lt;/a&gt; is a very good book for this in my opinion. it begins with an introduction to digital logic, then goes on to build and analyse all the subsystems of a Digital PDP-8.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kvcy9", "flair_text": null, "created": 1349963671.0, "created_utc": 1349960071.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "FlushDaBuffer", "id": "c6kvpcx", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "[The Xinu approach](http://www.amazon.com/Operating-System-Design-XINU-Approach/dp/0136375391) i would recommend for learning all about the os and how it works.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.amazon.com/Operating-System-Design-XINU-Approach/dp/0136375391\"&gt;The Xinu approach&lt;/a&gt; i would recommend for learning all about the os and how it works.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kvpcx", "flair_text": null, "created": 1349965760.0, "created_utc": 1349962160.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "NotAbel", "id": "c6kx69p", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "Richard Feynman's \"Lectures on Computation\" are a great, if eclectic, overview of computation from the bottom up.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Richard Feynman&amp;#39;s &amp;quot;Lectures on Computation&amp;quot; are a great, if eclectic, overview of computation from the bottom up.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kx69p", "flair_text": null, "created": 1349972372.0, "created_utc": 1349968772.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "Guido125", "id": "c6ky547", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "This may sound kind of silly, but if you are looking for a solid understanding on how everything works, I suggest installing minecraft and building your own computer with redstone.\n\nReading about it is one thing. Building your own is another.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This may sound kind of silly, but if you are looking for a solid understanding on how everything works, I suggest installing minecraft and building your own computer with redstone.&lt;/p&gt;\n\n&lt;p&gt;Reading about it is one thing. Building your own is another.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ky547", "flair_text": null, "created": 1349975902.0, "created_utc": 1349972302.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "sfrank", "id": "c6l0k4n", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "[Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture](http://www.amazon.com/Inside-Machine-Introduction-Microprocessors-Architecture/dp/1593271042/ref=sr_1_1?ie=UTF8&amp;qid=1349980425&amp;sr=8-1&amp;keywords=Inside+the+Machine%3A+An+Illustrated+Introduction+to+Microprocessors+and+Computer+Architecture) is a very nice book about modern CPUs and how they operate.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.amazon.com/Inside-Machine-Introduction-Microprocessors-Architecture/dp/1593271042/ref=sr_1_1?ie=UTF8&amp;amp;qid=1349980425&amp;amp;sr=8-1&amp;amp;keywords=Inside+the+Machine%3A+An+Illustrated+Introduction+to+Microprocessors+and+Computer+Architecture\"&gt;Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture&lt;/a&gt; is a very nice book about modern CPUs and how they operate.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l0k4n", "flair_text": null, "created": 1349984189.0, "created_utc": 1349980589.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "BloodyThorn", "id": "c6l0pdq", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "CS, Software Engineering student here. So far the only textbook I have considered keeping is my Computer Architecture class.\n\n[Introduction to Computing Systems: From bits &amp; gates to C &amp; beyond](http://www.amazon.com/Introduction-Computing-Systems-gates-beyond/dp/0072467509/ref=sr_1_1?ie=UTF8&amp;qid=1349980957&amp;sr=8-1&amp;keywords=From+gates+to+C)\n\nIt's a little pricey, but if you look around you might find it cheaper.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CS, Software Engineering student here. So far the only textbook I have considered keeping is my Computer Architecture class.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.amazon.com/Introduction-Computing-Systems-gates-beyond/dp/0072467509/ref=sr_1_1?ie=UTF8&amp;amp;qid=1349980957&amp;amp;sr=8-1&amp;amp;keywords=From+gates+to+C\"&gt;Introduction to Computing Systems: From bits &amp;amp; gates to C &amp;amp; beyond&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a little pricey, but if you look around you might find it cheaper.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l0pdq", "flair_text": null, "created": 1349984667.0, "created_utc": 1349981067.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "entropy111", "id": "c6lbwlx", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "I seriously have the best answer, ignore everyone else. \n\nGet \"Assembly Language Step-by-Step: Programming with Linux\"..it'll teach you the hardware stuffs, and take you directly into C..you'll understand it all. \n\nThen to learn how the Network (internet, etc) works...use CBTNuggets Video Tutorials...CompTIA Network+ is a good one. I found that certification oriented books are less bullshitty than the \"general idea\" academia ones. \n\nAll of the above is very hands on. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I seriously have the best answer, ignore everyone else. &lt;/p&gt;\n\n&lt;p&gt;Get &amp;quot;Assembly Language Step-by-Step: Programming with Linux&amp;quot;..it&amp;#39;ll teach you the hardware stuffs, and take you directly into C..you&amp;#39;ll understand it all. &lt;/p&gt;\n\n&lt;p&gt;Then to learn how the Network (internet, etc) works...use CBTNuggets Video Tutorials...CompTIA Network+ is a good one. I found that certification oriented books are less bullshitty than the &amp;quot;general idea&amp;quot; academia ones. &lt;/p&gt;\n\n&lt;p&gt;All of the above is very hands on. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lbwlx", "flair_text": null, "created": 1350030147.0, "created_utc": 1350026547.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11a0cq", "children": [], "author": "tres_chill", "id": "c6nf6wp", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 1, "body": "Read IBM PC Assembly Language - A Guide For Programmers by Leo Scanlon.  I did. You will learn exactly how the CPU \"thinks\" (op codes), what the registers are and how each one has some unique properties, how the BIOS chip works and how to talk to it using INT 10n, how the DOS interrupts work (yeah, they still load), and if you get into it a bit more, you wind up writing your own I/O to the graphics board. \n\nIt's old, but frankly, so is the PC Architecture. \n\nHere it is:\nhttp://www.oldcomputerbooks.com/pages/books/29090/leo-scanlon/ibm-pc-assembly-language-a-guide-for-programmers\n\n", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Read IBM PC Assembly Language - A Guide For Programmers by Leo Scanlon.  I did. You will learn exactly how the CPU &amp;quot;thinks&amp;quot; (op codes), what the registers are and how each one has some unique properties, how the BIOS chip works and how to talk to it using INT 10n, how the DOS interrupts work (yeah, they still load), and if you get into it a bit more, you wind up writing your own I/O to the graphics board. &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s old, but frankly, so is the PC Architecture. &lt;/p&gt;\n\n&lt;p&gt;Here it is:\n&lt;a href=\"http://www.oldcomputerbooks.com/pages/books/29090/leo-scanlon/ibm-pc-assembly-language-a-guide-for-programmers\"&gt;http://www.oldcomputerbooks.com/pages/books/29090/leo-scanlon/ibm-pc-assembly-language-a-guide-for-programmers&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6nf6wp", "flair_text": null, "created": 1350421112.0, "created_utc": 1350417512.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 6, "link_id": "t3_11a0cq", "children": [], "author": "tjandearl", "id": "c6kw4wa", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 3, "body": "Why not skip on buying the book and spend the money on a small 5v power supply a decent sized breadboard and some simple toggle switches, LEDs, and transistors.  Learn to make logic gates, these are the building blocks of digital computing. you will also learn binary math if you haven't yet working with these gates.\n\n\nOnce you learn logic gates you can now make your first adding machine.\nfor 8 bit math addition you will need 1 half adder and 7 full adders, you will loose the last carry if needed.  Basically 16 toggle switches will be funneled into all your gate built adders, the half adder (2 inputs feeding an xor(adding) and an and gate(the carry calculator) will add your first bit and it's carry will feed the full adder (A full adder allows a carry bit as input as well as the two numbers being added).\n\n\nso you are adding  binary numbers 0011(decimal 3) 0001 (decimal 1).\n\nso the lowest bits(the ones in brackets) are xor'ed or 001[1] XOR 000[1] = 0 and the carry is calculated by anding the lowest two bits 001[1] AND 000[1] = 1.\n\nso we have an answer of 0 with a carry of 1 on the first bit.\n\nso now for the next bit we need a full adder.  A full adder is 2 inputs fed into an XOR, that XOR and the carry bit into another XOR for the answer bit, the carry and first XOR fed into an AND, the two input bits fed into an AND and the two ANDS fed into an OR.\n\nso we have 0011 and 0001 calculated to 0000 with a carry of one.\n\nA) 00[1]1 XOR 00[0]1 = 1\n\nB) 1(ANSWER A) XOR 1(from previous carry) = 0 (this is the answer bit)\n\nC) 1(ANSWER A) AND 1(from previous carry) = 1\n\nD) 00[1]1 AND 00[0]1 = 1\n\n1(FROM C) OR (1 FROM D) = 1 (this is the carry bit)\n\nso the answer so far is 0000 CARRY of 1 on the second bit, I won't do the third bit since they are both 0 and the math just gets an answer of 1 from the carry bit. the answer is 0100 or 3+ 1 = 4. \n\nWikipedia to explain adders here: http://en.wikipedia.org/wiki/Adder_(electronics)\n\nonce you know an adder you can make other math, then understand basically everything done on data in the computer is done in binary through a series of gates, your toggle switches are basically 2 registers in memory (the only two you have) and that by adding a memory controller and memory the gates can then request to do actions on any 2 registers by asking for the registers by address and moving them into the processing registers (your toggle switches) and then pushing them through the appropriate gate set (the instruction) and dumping the answer into a third register in memory (your answer register or the LEDs in the gate circuit).  \n\nthe CPU is literally gates and a few registers to hold data that it needs to work on before pushing the answers back into memory. the CPU and memory need to talk, that's what the clock does, keeps communication in rhythm as digital electronics work by timed questions and responses in bits. (for instance you send CLK(0)1010 to the memory controller which means fetch, then immediately after you send (CLK1) 1000 as the address the memory controller then responds (CLK2) 1100 which is the value stored in register 1000). The clock just keeps communication in time with eachother so we all understand what's going on.\n\nBasically once you understand memory registeres, control, and gates you know how a microprocessor works and can work up to an intel machine from there.  I recommend learning by doing, it's more fun and you can see it work.\n\n\nEDIT: DISCLAIMER (Some of the concepts in this document are extremely simplified for space, I could write a book on it haha. I just think learning to make the gates, seeing them work, putting them together into adders subtracters multipliers and dividers, then adding a rotary switch to change between +-*/ so you can pick instructions to apply to your 2 8 bit numbers and pushing them to LEDs is fun. Books bore me.)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why not skip on buying the book and spend the money on a small 5v power supply a decent sized breadboard and some simple toggle switches, LEDs, and transistors.  Learn to make logic gates, these are the building blocks of digital computing. you will also learn binary math if you haven&amp;#39;t yet working with these gates.&lt;/p&gt;\n\n&lt;p&gt;Once you learn logic gates you can now make your first adding machine.\nfor 8 bit math addition you will need 1 half adder and 7 full adders, you will loose the last carry if needed.  Basically 16 toggle switches will be funneled into all your gate built adders, the half adder (2 inputs feeding an xor(adding) and an and gate(the carry calculator) will add your first bit and it&amp;#39;s carry will feed the full adder (A full adder allows a carry bit as input as well as the two numbers being added).&lt;/p&gt;\n\n&lt;p&gt;so you are adding  binary numbers 0011(decimal 3) 0001 (decimal 1).&lt;/p&gt;\n\n&lt;p&gt;so the lowest bits(the ones in brackets) are xor&amp;#39;ed or 001[1] XOR 000[1] = 0 and the carry is calculated by anding the lowest two bits 001[1] AND 000[1] = 1.&lt;/p&gt;\n\n&lt;p&gt;so we have an answer of 0 with a carry of 1 on the first bit.&lt;/p&gt;\n\n&lt;p&gt;so now for the next bit we need a full adder.  A full adder is 2 inputs fed into an XOR, that XOR and the carry bit into another XOR for the answer bit, the carry and first XOR fed into an AND, the two input bits fed into an AND and the two ANDS fed into an OR.&lt;/p&gt;\n\n&lt;p&gt;so we have 0011 and 0001 calculated to 0000 with a carry of one.&lt;/p&gt;\n\n&lt;p&gt;A) 00[1]1 XOR 00[0]1 = 1&lt;/p&gt;\n\n&lt;p&gt;B) 1(ANSWER A) XOR 1(from previous carry) = 0 (this is the answer bit)&lt;/p&gt;\n\n&lt;p&gt;C) 1(ANSWER A) AND 1(from previous carry) = 1&lt;/p&gt;\n\n&lt;p&gt;D) 00[1]1 AND 00[0]1 = 1&lt;/p&gt;\n\n&lt;p&gt;1(FROM C) OR (1 FROM D) = 1 (this is the carry bit)&lt;/p&gt;\n\n&lt;p&gt;so the answer so far is 0000 CARRY of 1 on the second bit, I won&amp;#39;t do the third bit since they are both 0 and the math just gets an answer of 1 from the carry bit. the answer is 0100 or 3+ 1 = 4. &lt;/p&gt;\n\n&lt;p&gt;Wikipedia to explain adders here: &lt;a href=\"http://en.wikipedia.org/wiki/Adder_(electronics)\"&gt;http://en.wikipedia.org/wiki/Adder_(electronics)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;once you know an adder you can make other math, then understand basically everything done on data in the computer is done in binary through a series of gates, your toggle switches are basically 2 registers in memory (the only two you have) and that by adding a memory controller and memory the gates can then request to do actions on any 2 registers by asking for the registers by address and moving them into the processing registers (your toggle switches) and then pushing them through the appropriate gate set (the instruction) and dumping the answer into a third register in memory (your answer register or the LEDs in the gate circuit).  &lt;/p&gt;\n\n&lt;p&gt;the CPU is literally gates and a few registers to hold data that it needs to work on before pushing the answers back into memory. the CPU and memory need to talk, that&amp;#39;s what the clock does, keeps communication in rhythm as digital electronics work by timed questions and responses in bits. (for instance you send CLK(0)1010 to the memory controller which means fetch, then immediately after you send (CLK1) 1000 as the address the memory controller then responds (CLK2) 1100 which is the value stored in register 1000). The clock just keeps communication in time with eachother so we all understand what&amp;#39;s going on.&lt;/p&gt;\n\n&lt;p&gt;Basically once you understand memory registeres, control, and gates you know how a microprocessor works and can work up to an intel machine from there.  I recommend learning by doing, it&amp;#39;s more fun and you can see it work.&lt;/p&gt;\n\n&lt;p&gt;EDIT: DISCLAIMER (Some of the concepts in this document are extremely simplified for space, I could write a book on it haha. I just think learning to make the gates, seeing them work, putting them together into adders subtracters multipliers and dividers, then adding a rotary switch to change between +-*/ so you can pick instructions to apply to your 2 8 bit numbers and pushing them to LEDs is fun. Books bore me.)&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kw4wa", "flair_text": null, "created": 1349967990.0, "created_utc": 1349964390.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_11a0cq", "children": [], "author": "expandingjoy", "id": "c6kx9di", "parent_id": "t3_11a0cq", "score": 0, "approved_by": null, "upvotes": 2, "body": "If you would like an accompanying text that focuses on the mystery, beauty, and wonder of formal logic, meta-mathematics, computer science, and molecular biology, not to mention consciousness, pick up Douglas Hofstadter's **Godel, Esther, Bach**. It is an amazing introductory text to the actual mechanics behind the above mentioned systems, and it isn't afraid to make reasonable speculations using Hofstadter's impeccable wit and intuition. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you would like an accompanying text that focuses on the mystery, beauty, and wonder of formal logic, meta-mathematics, computer science, and molecular biology, not to mention consciousness, pick up Douglas Hofstadter&amp;#39;s &lt;strong&gt;Godel, Esther, Bach&lt;/strong&gt;. It is an amazing introductory text to the actual mechanics behind the above mentioned systems, and it isn&amp;#39;t afraid to make reasonable speculations using Hofstadter&amp;#39;s impeccable wit and intuition. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kx9di", "flair_text": null, "created": 1349972704.0, "created_utc": 1349969104.0, "num_reports": null}], "score": 89, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 106, "hidden": false, "thumbnail": "", "edited": 1349951770.0, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11a0cq/computers_from_the_ground_up_from_transistors_to/", "has_more_comments": false, "name": "t3_11a0cq", "created": 1349913365.0, "url": "http://www.reddit.com/r/compsci/comments/11a0cq/computers_from_the_ground_up_from_transistors_to/", "author_flair_text": null, "author": "CLUSTERfoo", "created_utc": 1349909765.0, "link_flair_text": null, "media": null, "num_reports": null}, "346": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 2, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m interested to know how you leveraged a classic computer science degree to work in programs that normally accept electrical or mechanical engineers. I&amp;#39;m also interested in hearing what kind of work you are doing.&lt;/p&gt;\n\n&lt;p&gt;Id like to do biomedical research, specifically working with medical devices or robotics applied to the medical domain. &lt;/p&gt;\n\n&lt;p&gt;Imaging, AI, and computational geometry are obvious areas where a computer scientist can make contributions to these fields, but I worry that a lack of background in materials science or mechanical engineering could make this unrealistic. Although I plan to try pick up some of the skills in those areas that I am missing by working with Ardunio a bit as I finish up my degree.&lt;/p&gt;\n\n&lt;p&gt;Thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm interested to know how you leveraged a classic computer science degree to work in programs that normally accept electrical or mechanical engineers. I'm also interested in hearing what kind of work you are doing.\n\nId like to do biomedical research, specifically working with medical devices or robotics applied to the medical domain. \n\nImaging, AI, and computational geometry are obvious areas where a computer scientist can make contributions to these fields, but I worry that a lack of background in materials science or mechanical engineering could make this unrealistic. Although I plan to try pick up some of the skills in those areas that I am missing by working with Ardunio a bit as I finish up my degree.\n\nThanks.", "saved": false, "id": "11aqrt", "clicked": false, "title": "Any computer scientists here working in some form of biomedical engineering (or robotics) field; care to discuss their work?", "num_comments": 2, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_11aqrt", "children": [], "author": "tasuret", "id": "c6mezv3", "parent_id": "t3_11aqrt", "score": 0, "approved_by": null, "upvotes": 2, "body": "And the award for most disappointing comment section of the month goes to... this. Damn.\n\nAside from that, your work is cut out for you. When you apply to a position, make sure your cover letter carefully outlines why your non-traditional approach is beneficial.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And the award for most disappointing comment section of the month goes to... this. Damn.&lt;/p&gt;\n\n&lt;p&gt;Aside from that, your work is cut out for you. When you apply to a position, make sure your cover letter carefully outlines why your non-traditional approach is beneficial.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mezv3", "flair_text": null, "created": 1350250227.0, "created_utc": 1350246627.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11aqrt", "children": [], "author": "maskedmarksman", "id": "c6mh9i1", "parent_id": "t3_11aqrt", "score": 0, "approved_by": null, "upvotes": 1, "body": "I have a computer engineering degree and did some short research in the biomedical field. I worked developing a new algorithm/method for a transradial amputee. We used an array of hall-effect sensors to determine the desired rotation of the patients arm after implanting a small, strong magnet onto the patients radial bone. It ended up being accurate to 2.7 degrees or less (pretty good for a project costing about $50). We only used a Arduino for this project, though originally we planned on using an MSP430.\n\nI am honestly in a similar place to you right now though, looking to get into a medical school with a computer engineering degree, which I received in the spring. These weren't my original plans, but life seems to have brought me here. I'm just taking biology and organic chemistry since I didn't take them during my bachelors and you need them for medical school. My plans are to get into an MD/PhD program in the biomedical field, so we have common goals I am sure. I know Purdue and Indiana University have a joint Biomedical Engineering PhD and MD program and other schools and places offer other PhD degrees with their MD's, so that is another option if you don't mind being in school for the rest of your life. \n\nIf you are looking for a job directly out of college, try looking at Boston Scientific's positions. They make medical devices that need to be programmed and engineered, so they might have some opening. Try searching for other companies the make biomedical implants (e.g. pacemakers), since they might need some programmers for their devices. \n\nAnyways, best of luck. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I have a computer engineering degree and did some short research in the biomedical field. I worked developing a new algorithm/method for a transradial amputee. We used an array of hall-effect sensors to determine the desired rotation of the patients arm after implanting a small, strong magnet onto the patients radial bone. It ended up being accurate to 2.7 degrees or less (pretty good for a project costing about $50). We only used a Arduino for this project, though originally we planned on using an MSP430.&lt;/p&gt;\n\n&lt;p&gt;I am honestly in a similar place to you right now though, looking to get into a medical school with a computer engineering degree, which I received in the spring. These weren&amp;#39;t my original plans, but life seems to have brought me here. I&amp;#39;m just taking biology and organic chemistry since I didn&amp;#39;t take them during my bachelors and you need them for medical school. My plans are to get into an MD/PhD program in the biomedical field, so we have common goals I am sure. I know Purdue and Indiana University have a joint Biomedical Engineering PhD and MD program and other schools and places offer other PhD degrees with their MD&amp;#39;s, so that is another option if you don&amp;#39;t mind being in school for the rest of your life. &lt;/p&gt;\n\n&lt;p&gt;If you are looking for a job directly out of college, try looking at Boston Scientific&amp;#39;s positions. They make medical devices that need to be programmed and engineered, so they might have some opening. Try searching for other companies the make biomedical implants (e.g. pacemakers), since they might need some programmers for their devices. &lt;/p&gt;\n\n&lt;p&gt;Anyways, best of luck. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6mh9i1", "flair_text": null, "created": 1350259211.0, "created_utc": 1350255611.0, "num_reports": null}], "score": 10, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 12, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11aqrt/any_computer_scientists_here_working_in_some_form/", "has_more_comments": false, "name": "t3_11aqrt", "created": 1349940555.0, "url": "http://www.reddit.com/r/compsci/comments/11aqrt/any_computer_scientists_here_working_in_some_form/", "author_flair_text": null, "author": "zero_star", "created_utc": 1349936955.0, "link_flair_text": null, "media": null, "num_reports": null}, "347": {"domain": "media.smashingmagazine.com", "link_flair_class": null, "banned_by": null, "downvotes": 48, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "119b8k", "clicked": false, "title": "The \"World Of Programming\" Infographic", "num_comments": 32, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_119b8k", "children": [], "author": "smellyeggs", "id": "c6koh0m", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 35, "body": "Where is Grace Hopper? Seriously. She wrote COBOL and the first compiler... that's beyond noteworthy.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Where is Grace Hopper? Seriously. She wrote COBOL and the first compiler... that&amp;#39;s beyond noteworthy.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6koh0m", "flair_text": null, "created": 1349922089.0, "created_utc": 1349918489.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "tashbarg", "id": "c6ktb4g", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 14, "body": "More like \"An uninformed look at arbitrarily selected parts of the world of programming.\"", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;More like &amp;quot;An uninformed look at arbitrarily selected parts of the world of programming.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ktb4g", "flair_text": null, "created": 1349943807.0, "created_utc": 1349940207.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_119b8k", "children": [], "author": "Hydraulix", "id": "c6koh0e", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 11, "body": "Admiral Grace Hopper is missing? You gotta be fucking kidding me. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Admiral Grace Hopper is missing? You gotta be fucking kidding me. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6koh0e", "flair_text": null, "created": 1349922089.0, "created_utc": 1349918489.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_119b8k", "children": [], "author": "TarMil", "id": "c6ku8gm", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 14, "body": "&gt; // Vim and Emacs are the two most popular editors amongst \"Real Programmers\"\n\nI'm an Emacs user, but fuck this stupid elitist bullshit.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;// Vim and Emacs are the two most popular editors amongst &amp;quot;Real Programmers&amp;quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;m an Emacs user, but fuck this stupid elitist bullshit.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ku8gm", "flair_text": null, "created": 1349952970.0, "created_utc": 1349949370.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "probabilityzero", "id": "c6kkmx6", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 10, "body": "Seems incomplete. No mention of Lisp.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seems incomplete. No mention of Lisp.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kkmx6", "flair_text": null, "created": 1349907966.0, "created_utc": 1349904366.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_119b8k", "children": [], "author": "comtedeRochambeau", "id": "c6kj0ey", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 25, "body": "What was the point or even the context of this graphic?  It seems very arbitrary to me. ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What was the point or even the context of this graphic?  It seems very arbitrary to me. &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kj0ey", "flair_text": null, "created": 1349902473.0, "created_utc": 1349898873.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_119b8k", "children": [], "author": "theantiparadoxicity", "id": "c6kr3hc", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 4, "body": "Why is python included, but no grace hopper or ENIAC?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Why is python included, but no grace hopper or ENIAC?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kr3hc", "flair_text": null, "created": 1349931902.0, "created_utc": 1349928302.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 5, "link_id": "t3_119b8k", "children": [], "author": "uberalles2", "id": "c6krxl7", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 9, "body": "Unix weenies must have created it. Microsoft does not exist in that world.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Unix weenies must have created it. Microsoft does not exist in that world.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6krxl7", "flair_text": null, "created": 1349935489.0, "created_utc": 1349931889.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "kamatsu", "id": "c6ktyvx", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 3, "body": "No Church? McCarthy? Hopper?\n\nVan Rossum? RMS? really?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No Church? McCarthy? Hopper?&lt;/p&gt;\n\n&lt;p&gt;Van Rossum? RMS? really?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6ktyvx", "flair_text": null, "created": 1349949822.0, "created_utc": 1349946222.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "ffs_lemme_in", "id": "c6kwgab", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 3, "body": "Typos, typos everywhere.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Typos, typos everywhere.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kwgab", "flair_text": null, "created": 1349969426.0, "created_utc": 1349965826.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 4, "link_id": "t3_119b8k", "children": [], "author": "PGLubricants", "id": "c6kiz6i", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 5, "body": "Very neat! A little blunt, but well designed, and a consistent portrait style.\n\nOne thing though...\n\n...needs more [))))))))))))))))))))))))))))))](http://en.wikipedia.org/wiki/John_McCarthy_\\(computer_scientist\\)).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very neat! A little blunt, but well designed, and a consistent portrait style.&lt;/p&gt;\n\n&lt;p&gt;One thing though...&lt;/p&gt;\n\n&lt;p&gt;...needs more &lt;a href=\"http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)\"&gt;))))))))))))))))))))))))))))))&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kiz6i", "flair_text": null, "created": 1349902355.0, "created_utc": 1349898755.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "metaobject", "id": "c6knip6", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 1, "body": "Gosling and Stroustrup look very similar (in the drawing, anyway).  Is Gosling trying to pull a Single White Programmer?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Gosling and Stroustrup look very similar (in the drawing, anyway).  Is Gosling trying to pull a Single White Programmer?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6knip6", "flair_text": null, "created": 1349918576.0, "created_utc": 1349914976.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "doctorstupid", "id": "c6kpgb7", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 2, "body": "That's incorrect about Von Neumann inventing the architecture of his namesake!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s incorrect about Von Neumann inventing the architecture of his namesake!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kpgb7", "flair_text": null, "created": 1349925664.0, "created_utc": 1349922064.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "breadst1cks", "id": "c6kpnk1", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 2, "body": "Eight men wearing glasses in a row. I'll never amount to anything. 20/20 vision.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Eight men wearing glasses in a row. I&amp;#39;ll never amount to anything. 20/20 vision.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kpnk1", "flair_text": null, "created": 1349926427.0, "created_utc": 1349922827.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "mumux", "id": "c6kvzuq", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 2, "body": "Quite nice, although I'm of the opinion that RMS doesn't belong here, especially considering some of the people missing: Alonzo Church is the most glaring omission to me, along with McCarthy and, as others have pointed out, Grace Hopper.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quite nice, although I&amp;#39;m of the opinion that RMS doesn&amp;#39;t belong here, especially considering some of the people missing: Alonzo Church is the most glaring omission to me, along with McCarthy and, as others have pointed out, Grace Hopper.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kvzuq", "flair_text": null, "created": 1349967290.0, "created_utc": 1349963690.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_119b8k", "children": [], "author": "hst_samurai", "id": "c6lympm", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 1, "body": "Don't wanna be sissy, but if you are a teacher and want to hang this in your classroom... is 'brainfuck' NSFW?  You've been warned.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Don&amp;#39;t wanna be sissy, but if you are a teacher and want to hang this in your classroom... is &amp;#39;brainfuck&amp;#39; NSFW?  You&amp;#39;ve been warned.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6lympm", "flair_text": null, "created": 1350160714.0, "created_utc": 1350157114.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_119b8k", "children": [], "author": "merreborn", "id": "c6kxg4s", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 1, "body": "[I slapped this together rather hastily...](http://i.imgur.com/qpVJb.jpg)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://i.imgur.com/qpVJb.jpg\"&gt;I slapped this together rather hastily...&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kxg4s", "flair_text": null, "created": 1349973395.0, "created_utc": 1349969795.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 10, "link_id": "t3_119b8k", "children": [], "author": "tubbstosterone", "id": "c6krhvd", "parent_id": "t3_119b8k", "score": 0, "approved_by": null, "upvotes": 3, "body": "WHAT?! NO STEVE JOBS?! SHFOHGOHGOHODGHGHODHGOHDGOIH!!! ", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;WHAT?! NO STEVE JOBS?! SHFOHGOHGOHODGHGHODHGOHDGOIH!!! &lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6krhvd", "flair_text": null, "created": 1349933581.0, "created_utc": 1349929981.0, "num_reports": null}], "score": 107, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 155, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/119b8k/the_world_of_programming_infographic/", "has_more_comments": false, "name": "t3_119b8k", "created": 1349890162.0, "url": "http://media.smashingmagazine.com/wp-content/uploads/2010/06/aboutprogramming04.jpg", "author_flair_text": null, "author": "martinsgr", "created_utc": 1349886562.0, "link_flair_text": null, "media": null, "num_reports": null}, "348": {"domain": "self.compsci", "link_flair_class": null, "banned_by": null, "downvotes": 4, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Alright. I have implemented a GA, a SA, and a RR to solve the same problem. It&amp;#39;s time to see who wins. But...how? Help me out:&lt;/p&gt;\n\n&lt;p&gt;The three stochastic algorithms are each run 30 times, each time with a different random seed. They are optimization algorithms and they each spit out the quality of the solution they found at the end of each run. So there are 3 sets of 30 numbers.&lt;/p&gt;\n\n&lt;p&gt;Now don&amp;#39;t fret over runtime complexity or any of that crap. They are all solving the same problem, which has a very very large solution space. None of them have any hope of finding the global optima. So they all terminate after the same number of evaluation operators. They run roughly the same time.&lt;/p&gt;\n\n&lt;p&gt;How do you compare these algorithms? Just compare the average of their solutions? What about statistical significance? How do you know which algorithm is the best? How do we rank em?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Alright. I have implemented a GA, a SA, and a RR to solve the same problem. It's time to see who wins. But...how? Help me out:\n\nThe three stochastic algorithms are each run 30 times, each time with a different random seed. They are optimization algorithms and they each spit out the quality of the solution they found at the end of each run. So there are 3 sets of 30 numbers.\n\nNow don't fret over runtime complexity or any of that crap. They are all solving the same problem, which has a very very large solution space. None of them have any hope of finding the global optima. So they all terminate after the same number of evaluation operators. They run roughly the same time.\n\nHow do you compare these algorithms? Just compare the average of their solutions? What about statistical significance? How do you know which algorithm is the best? How do we rank em?", "saved": false, "id": "11aobc", "clicked": false, "title": "Genetic Algorithms vs other Stochastic Algorithms", "num_comments": 11, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_11aobc", "children": [], "author": "MysteriousPickle", "id": "c6kucxm", "parent_id": "t3_11aobc", "score": 0, "approved_by": null, "upvotes": 12, "body": "Just plot the 3 distribution curves together on the same chart (with different colors) and stare at that shit until you feel like getting a beer.  You earned it.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just plot the 3 distribution curves together on the same chart (with different colors) and stare at that shit until you feel like getting a beer.  You earned it.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kucxm", "flair_text": null, "created": 1349954474.0, "created_utc": 1349950874.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11aobc", "children": [], "author": "soopasloth", "id": "c6kvqv8", "parent_id": "t3_11aobc", "score": 0, "approved_by": null, "upvotes": 7, "body": "GA - Genetic Algorithm,\nSA - Simulated Annealing,\nRR - ?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;GA - Genetic Algorithm,\nSA - Simulated Annealing,\nRR - ?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kvqv8", "flair_text": null, "created": 1349965988.0, "created_utc": 1349962388.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11aobc", "children": [], "author": "anchoa", "id": "c6l3o2h", "parent_id": "t3_11aobc", "score": 0, "approved_by": null, "upvotes": 3, "body": "Thanks for everyone's input. Here's my approach:\nUsing R, generate a boxplot.\nThen run ANOVA. If there is a significant (p=0.05) difference in the means, use TukeyHSD to rank them.\nTada!\n\nMy only doubt now is about the assumptions of ANOVA:\n1) Normality\n2) Equality of variance.\n\nI dont know how to test for those.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for everyone&amp;#39;s input. Here&amp;#39;s my approach:\nUsing R, generate a boxplot.\nThen run ANOVA. If there is a significant (p=0.05) difference in the means, use TukeyHSD to rank them.\nTada!&lt;/p&gt;\n\n&lt;p&gt;My only doubt now is about the assumptions of ANOVA:\n1) Normality\n2) Equality of variance.&lt;/p&gt;\n\n&lt;p&gt;I dont know how to test for those.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6l3o2h", "flair_text": null, "created": 1349994749.0, "created_utc": 1349991149.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11aobc", "children": [], "author": "nodogbadbiscuit", "id": "c6kujrv", "parent_id": "t3_11aobc", "score": 0, "approved_by": null, "upvotes": 2, "body": "I'd suggest looking at boxplots of the three groups - that should give you an intuitive idea of which performed better and whether it looks like there's any significant difference.\n\nTo test properly for a significant difference between the groups, I think you'd want a [Kruskal-Wallace](http://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance) test.\n\n(Note this wouldn't tell you *which* groups were different and in what way. Anyone else want to chip in with multiple comparisons stuff?)", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d suggest looking at boxplots of the three groups - that should give you an intuitive idea of which performed better and whether it looks like there&amp;#39;s any significant difference.&lt;/p&gt;\n\n&lt;p&gt;To test properly for a significant difference between the groups, I think you&amp;#39;d want a &lt;a href=\"http://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance\"&gt;Kruskal-Wallace&lt;/a&gt; test.&lt;/p&gt;\n\n&lt;p&gt;(Note this wouldn&amp;#39;t tell you &lt;em&gt;which&lt;/em&gt; groups were different and in what way. Anyone else want to chip in with multiple comparisons stuff?)&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kujrv", "flair_text": null, "created": 1349956684.0, "created_utc": 1349953084.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_11aobc", "children": [], "author": "SupersonicSpitfire", "id": "c6oakci", "parent_id": "t3_11aobc", "score": 0, "approved_by": null, "upvotes": 1, "body": "So, which algorithm won?", "edited": 1350778470.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So, which algorithm won?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6oakci", "flair_text": null, "created": 1350573260.0, "created_utc": 1350569660.0, "num_reports": null}], "score": 8, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 12, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": true, "permalink": "/r/compsci/comments/11aobc/genetic_algorithms_vs_other_stochastic_algorithms/", "has_more_comments": false, "name": "t3_11aobc", "created": 1349936897.0, "url": "http://www.reddit.com/r/compsci/comments/11aobc/genetic_algorithms_vs_other_stochastic_algorithms/", "author_flair_text": null, "author": "anchoa", "created_utc": 1349933297.0, "link_flair_text": null, "media": null, "num_reports": null}, "349": {"domain": "plus.google.com", "link_flair_class": null, "banned_by": null, "downvotes": 21, "subreddit_id": "t5_2qhmr", "subreddit": "compsci", "selftext_html": null, "selftext": "", "saved": false, "id": "118svz", "clicked": false, "title": "SmoothLife - a continuous version of Conway's Game of Life", "num_comments": 38, "comments": [{"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 9, "link_id": "t3_118svz", "children": [], "author": "tim_hutton", "id": "c6kb6jt", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 38, "body": "Here's the information from the [video page](http://www.youtube.com/watch?v=KJe9H6qS82I):\n\nSmoothLife is a family of rules created by Stephan Rafler. It was designed as a continuous version of Conway's Game of Life - using floating point values instead of integers. This rule is SmoothLifeL which supports many interesting phenomena such as gliders that can travel in any direction, rotating pairs of gliders, wickstretchers and the appearance of elastic tension in the 'cords' that join the blobs.\n\nhttp://sourceforge.net/projects/smoothlife/\n\nPaper describing SmoothLife and SmoothLifeL: http://arxiv.org/abs/1111.1567\n\nThis animation created in Ready: http://code.google.com/p/reaction-diffusion\n\nMore videos: https://www.youtube.com/playlist?list=PL69EDA11384365494&amp;feature=plcp\n\nDetails:\n\n* Outer radius: 20.0\n* Radius ratio: 3.0\n* Birth range: 0.257 - 0.336\n* Survival range: 0.365 - 0.549\n* Alpha_n (outer sigmoid width): 0.028\n* Alpha_m (inner sigmoid width): 0.147\n* Timestep: 0.05 (Euler integration)\n* Frames: 10819 (saving 1 image per 8 timesteps)\n* Total time units elapsed: 4327.6\n* World size: 512x512, with toroidal wrap-around.\n* Color representation: linear mapping of [0,1] onto [black,white]\n* OpenCL source code: http://reaction-diffusion.googlecode.com/svn/trunk/Ready/Patterns/smoothlife_smoothlifeL.vti\n* Computation time: 74 minutes on an nVidia GeForce GTX 460 (in Ready, Stephan's software at the sourceforge link is much faster)\n", "edited": 1349898804.0, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s the information from the &lt;a href=\"http://www.youtube.com/watch?v=KJe9H6qS82I\"&gt;video page&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;SmoothLife is a family of rules created by Stephan Rafler. It was designed as a continuous version of Conway&amp;#39;s Game of Life - using floating point values instead of integers. This rule is SmoothLifeL which supports many interesting phenomena such as gliders that can travel in any direction, rotating pairs of gliders, wickstretchers and the appearance of elastic tension in the &amp;#39;cords&amp;#39; that join the blobs.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://sourceforge.net/projects/smoothlife/\"&gt;http://sourceforge.net/projects/smoothlife/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Paper describing SmoothLife and SmoothLifeL: &lt;a href=\"http://arxiv.org/abs/1111.1567\"&gt;http://arxiv.org/abs/1111.1567&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This animation created in Ready: &lt;a href=\"http://code.google.com/p/reaction-diffusion\"&gt;http://code.google.com/p/reaction-diffusion&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;More videos: &lt;a href=\"https://www.youtube.com/playlist?list=PL69EDA11384365494&amp;amp;feature=plcp\"&gt;https://www.youtube.com/playlist?list=PL69EDA11384365494&amp;amp;feature=plcp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Details:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Outer radius: 20.0&lt;/li&gt;\n&lt;li&gt;Radius ratio: 3.0&lt;/li&gt;\n&lt;li&gt;Birth range: 0.257 - 0.336&lt;/li&gt;\n&lt;li&gt;Survival range: 0.365 - 0.549&lt;/li&gt;\n&lt;li&gt;Alpha_n (outer sigmoid width): 0.028&lt;/li&gt;\n&lt;li&gt;Alpha_m (inner sigmoid width): 0.147&lt;/li&gt;\n&lt;li&gt;Timestep: 0.05 (Euler integration)&lt;/li&gt;\n&lt;li&gt;Frames: 10819 (saving 1 image per 8 timesteps)&lt;/li&gt;\n&lt;li&gt;Total time units elapsed: 4327.6&lt;/li&gt;\n&lt;li&gt;World size: 512x512, with toroidal wrap-around.&lt;/li&gt;\n&lt;li&gt;Color representation: linear mapping of [0,1] onto [black,white]&lt;/li&gt;\n&lt;li&gt;OpenCL source code: &lt;a href=\"http://reaction-diffusion.googlecode.com/svn/trunk/Ready/Patterns/smoothlife_smoothlifeL.vti\"&gt;http://reaction-diffusion.googlecode.com/svn/trunk/Ready/Patterns/smoothlife_smoothlifeL.vti&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Computation time: 74 minutes on an nVidia GeForce GTX 460 (in Ready, Stephan&amp;#39;s software at the sourceforge link is much faster)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kb6jt", "flair_text": null, "created": 1349866567.0, "created_utc": 1349862967.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_118svz", "children": [], "author": "grayvedigga", "id": "c6kb4ur", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 11, "body": "[Here's the paper](http://arxiv.org/abs/1111.1567) for people like me who are infuriated by pretty videos without even a voiceover hinting at what might be going on.\n\nAlso, the video's too long.  I was getting really bored after about a minute ... and I'm not sure what the highlight at 3:12 is supposed to be.\n\nCool project though.  Now I get to sit down and spend at least 15 minutes with the paper, being far more entertained!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://arxiv.org/abs/1111.1567\"&gt;Here&amp;#39;s the paper&lt;/a&gt; for people like me who are infuriated by pretty videos without even a voiceover hinting at what might be going on.&lt;/p&gt;\n\n&lt;p&gt;Also, the video&amp;#39;s too long.  I was getting really bored after about a minute ... and I&amp;#39;m not sure what the highlight at 3:12 is supposed to be.&lt;/p&gt;\n\n&lt;p&gt;Cool project though.  Now I get to sit down and spend at least 15 minutes with the paper, being far more entertained!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kb4ur", "flair_text": null, "created": 1349865956.0, "created_utc": 1349862356.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 2, "link_id": "t3_118svz", "children": [], "author": "kurin", "id": "c6kfd8q", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 12, "body": "Huh.  They have membranes.", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Huh.  They have membranes.&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kfd8q", "flair_text": null, "created": 1349890058.0, "created_utc": 1349886458.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 3, "link_id": "t3_118svz", "children": [], "author": "astrolabe", "id": "c6kc9u4", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 9, "body": "I want to see smooth go (the game).", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I want to see smooth go (the game).&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kc9u4", "flair_text": null, "created": 1349877227.0, "created_utc": 1349873627.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 0, "link_id": "t3_118svz", "children": [], "author": "jordan0day", "id": "c6khqbw", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 6, "body": "As someone who doesn't know very much about the Game of Life, what interesting differences exist between a continuous and a discrete version?\n\nThe video is very cool, but (again, as someone who knows very little about GoL) my initial response would be \"this looks like GoL with anti-aliasing\" or \"This looks like GoL, zoomed way, way out\". Is that a decent (albeit naive) summary, or is there a lot more to it than that?", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As someone who doesn&amp;#39;t know very much about the Game of Life, what interesting differences exist between a continuous and a discrete version?&lt;/p&gt;\n\n&lt;p&gt;The video is very cool, but (again, as someone who knows very little about GoL) my initial response would be &amp;quot;this looks like GoL with anti-aliasing&amp;quot; or &amp;quot;This looks like GoL, zoomed way, way out&amp;quot;. Is that a decent (albeit naive) summary, or is there a lot more to it than that?&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6khqbw", "flair_text": null, "created": 1349898086.0, "created_utc": 1349894486.0, "num_reports": null}, {"subreddit_id": "t5_2qhmr", "banned_by": null, "downvotes": 1, "link_id": "t3_118svz", "children": [], "author": "heeb", "id": "c6kdgvs", "parent_id": "t3_118svz", "score": 0, "approved_by": null, "upvotes": 4, "body": "This is awesome...\n\nI grew up in awe of Game of Life... I'm in awe again!", "edited": false, "modhash": "", "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is awesome...&lt;/p&gt;\n\n&lt;p&gt;I grew up in awe of Game of Life... I&amp;#39;m in awe again!&lt;/p&gt;\n&lt;/div&gt;", "more_comments": "", "subreddit": "compsci", "flair_class": null, "has_more_comments": false, "name": "t1_c6kdgvs", "flair_text": null, "created": 1349883389.0, "created_utc": 1349879789.0, "num_reports": null}], "score": 244, "approved_by": null, "over_18": false, "author_flair_class": null, "upvotes": 265, "hidden": false, "thumbnail": "", "edited": false, "modhash": "9zragtxolp72b3c12d9c393b8cf47c4497222125c4cec6dbfa", "media_embed": {}, "more_comments": "", "is_self": false, "permalink": "/r/compsci/comments/118svz/smoothlife_a_continuous_version_of_conways_game/", "has_more_comments": false, "name": "t3_118svz", "created": 1349863682.0, "url": "http://plus.google.com/110214848059767137292/posts/WtPBhYJswAe", "author_flair_text": null, "author": "tim_hutton", "created_utc": 1349860082.0, "link_flair_text": null, "media": null, "num_reports": null}}